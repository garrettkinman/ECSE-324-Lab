
C:/Users/garre/OneDrive/Documents/GitHub/ECSE-324-Lab/G37_Lab5/main.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
       0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      20:	cc 13 00 00 d8 13 00 00 e4 13 00 00 f0 13 00 00     ................
      30:	fc 13 00 00 20 21 00 00 74 12 00 00 08 14 00 00     .... !..t.......

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb0007f8 	bl	20bc <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00002210 	.word	0x00002210

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <ICDISER+0x18>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <ICDISER+0x1c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <ICDISER+0x20>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00031448 	.word	0x00031448

00000124 <__cs3_heap_start_ptr>:
     124:	00031470 	.word	0x00031470

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00031450 	.word	0x00031450
     170:	00031453 	.word	0x00031453
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <ICDICER+0x38>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <ICDICER+0x3c>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <ICDICER+0x20>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <ICDICER+0x40>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <ICDICER+0x18>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <ICDICER+0x18>
     1b8:	00031450 	.word	0x00031450
     1bc:	00031450 	.word	0x00031450
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00031450 	.word	0x00031450
     200:	00000000 	.word	0x00000000
     204:	000021ac 	.word	0x000021ac

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	000021ac 	.word	0x000021ac
     250:	00031454 	.word	0x00031454
     254:	00002210 	.word	0x00002210
     258:	00000000 	.word	0x00000000

0000025c <generateSignal>:
#define B_FREQUENCY  246.942
//:
#define C2_FREQUENCY 261.626

// function to generate the output of a signal of a given frequency at a given time
int generateSignal(float frequency, double time) {
     25c:	e92d4800 	push	{r11, lr}
     260:	e28db004 	add	r11, sp, #4
     264:	e24dd018 	sub	sp, sp, #24
     268:	e50b0010 	str	r0, [r11, #-16]
     26c:	e14b21fc 	strd	r2, [r11, #-28]	; 0xffffffe4
    int index  = (int)(frequency * time) % 48000;
     270:	e51b0010 	ldr	r0, [r11, #-16]
     274:	eb00055a 	bl	17e4 <__aeabi_f2d>
     278:	e1a02000 	mov	r2, r0
     27c:	e1a03001 	mov	r3, r1
     280:	e1a00002 	mov	r0, r2
     284:	e1a01003 	mov	r1, r3
     288:	e14b21dc 	ldrd	r2, [r11, #-28]	; 0xffffffe4
     28c:	eb000581 	bl	1898 <__aeabi_dmul>
     290:	e1a02000 	mov	r2, r0
     294:	e1a03001 	mov	r3, r1
     298:	e1a00002 	mov	r0, r2
     29c:	e1a01003 	mov	r1, r3
     2a0:	eb0006a3 	bl	1d34 <__aeabi_d2iz>
     2a4:	e1a03000 	mov	r3, r0
     2a8:	e30129f1 	movw	r2, #6641	; 0x19f1
     2ac:	e3402576 	movt	r2, #1398	; 0x576
     2b0:	e0c21392 	smull	r1, r2, r2, r3
     2b4:	e1a01542 	asr	r1, r2, #10
     2b8:	e1a02fc3 	asr	r2, r3, #31
     2bc:	e0622001 	rsb	r2, r2, r1
     2c0:	e30b1b80 	movw	r1, #48000	; 0xbb80
     2c4:	e0020291 	mul	r2, r1, r2
     2c8:	e0623003 	rsb	r3, r2, r3
     2cc:	e50b3008 	str	r3, [r11, #-8]

    //calling subroutine wave-table
    return sine[index];
     2d0:	e3023218 	movw	r3, #8728	; 0x2218
     2d4:	e3403000 	movt	r3, #0
     2d8:	e51b2008 	ldr	r2, [r11, #-8]
     2dc:	e7933102 	ldr	r3, [r3, r2, lsl #2]
}
     2e0:	e1a00003 	mov	r0, r3
     2e4:	e24bd004 	sub	sp, r11, #4
     2e8:	e8bd8800 	pop	{r11, pc}

000002ec <main>:

int main() {
     2ec:	e92d4800 	push	{r11, lr}
     2f0:	e28db004 	add	r11, sp, #4
     2f4:	e24dd068 	sub	sp, sp, #104	; 0x68

    // interuppt ID of TIM0 & TIM1
	int_setup(2, (int []){199, 200});
     2f8:	e30231b0 	movw	r3, #8624	; 0x21b0
     2fc:	e3403000 	movt	r3, #0
     300:	e24b203c 	sub	r2, r11, #60	; 0x3c
     304:	e8930003 	ldm	r3, {r0, r1}
     308:	e8820003 	stm	r2, {r0, r1}
     30c:	e24b303c 	sub	r3, r11, #60	; 0x3c
     310:	e3a00002 	mov	r0, #2
     314:	e1a01003 	mov	r1, r3
     318:	eb000449 	bl	1444 <int_setup>

	long time = 0;
     31c:	e3a03000 	mov	r3, #0
     320:	e50b3008 	str	r3, [r11, #-8]
    // a struct that is used to configure the different parameters of the HPS time (Tim for our audio)
	HPS_TIM_config_t hps_tim_audio;

	hps_tim_audio.tim = TIM0;
     324:	e3a03001 	mov	r3, #1
     328:	e54b3054 	strb	r3, [r11, #-84]	; 0xffffffac
	hps_tim_audio.timeout = 10; // in microsec (faster than keyboerd)
     32c:	e3a0300a 	mov	r3, #10
     330:	e50b3050 	str	r3, [r11, #-80]	; 0xffffffb0
	hps_tim_audio.LD_en = 1; // set to 1 to achieve the desired timeout, or 0 for maximum count of tim
     334:	e3a03001 	mov	r3, #1
     338:	e50b304c 	str	r3, [r11, #-76]	; 0xffffffb4
	hps_tim_audio.INT_en = 1; // set to 1 to enable interrupts, or 0 to disable interrupt
     33c:	e3a03001 	mov	r3, #1
     340:	e50b3048 	str	r3, [r11, #-72]	; 0xffffffb8
	hps_tim_audio.enable = 1; // set to 1 to activate the desired timers, or 0 to deactivate them
     344:	e3a03001 	mov	r3, #1
     348:	e50b3044 	str	r3, [r11, #-68]	; 0xffffffbc
    
    // configures the timer instances according to the configuration struct stored at the address in argument param. 
    // multiple timers can be configured via the same struct, and the driver handles the different hardware abstractions internally.
	HPS_TIM_config_ASM(&hps_tim_audio);
     34c:	e24b3054 	sub	r3, r11, #84	; 0x54
     350:	e1a00003 	mov	r0, r3
     354:	eb000164 	bl	8ec <HPS_TIM_config_ASM>

    // setting the TIM for keyboard
	HPS_TIM_config_t hps_tim_keyboard;

	hps_tim_keyboard.tim = TIM1;
     358:	e3a03002 	mov	r3, #2
     35c:	e54b306c 	strb	r3, [r11, #-108]	; 0xffffff94
	hps_tim_keyboard.timeout = 20000;
     360:	e3043e20 	movw	r3, #20000	; 0x4e20
     364:	e50b3068 	str	r3, [r11, #-104]	; 0xffffff98
	hps_tim_keyboard.LD_en = 1;
     368:	e3a03001 	mov	r3, #1
     36c:	e50b3064 	str	r3, [r11, #-100]	; 0xffffff9c
	hps_tim_keyboard.INT_en = 1;
     370:	e3a03001 	mov	r3, #1
     374:	e50b3060 	str	r3, [r11, #-96]	; 0xffffffa0
	hps_tim_keyboard.enable = 1;
     378:	e3a03001 	mov	r3, #1
     37c:	e50b305c 	str	r3, [r11, #-92]	; 0xffffffa4
    
    HPS_TIM_config_ASM(&hps_tim_keyboard);
     380:	e24b306c 	sub	r3, r11, #108	; 0x6c
     384:	e1a00003 	mov	r0, r3
     388:	eb000157 	bl	8ec <HPS_TIM_config_ASM>
    
    int amplitude = 100; //MAX volume
     38c:	e3a03064 	mov	r3, #100	; 0x64
     390:	e50b300c 	str	r3, [r11, #-12]

	int a_pressed = 0;
     394:	e3a03000 	mov	r3, #0
     398:	e50b3010 	str	r3, [r11, #-16]
	int s_pressed = 0;
     39c:	e3a03000 	mov	r3, #0
     3a0:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	int d_pressed = 0;
     3a4:	e3a03000 	mov	r3, #0
     3a8:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
	int f_pressed = 0;
     3ac:	e3a03000 	mov	r3, #0
     3b0:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
	int j_pressed = 0;
     3b4:	e3a03000 	mov	r3, #0
     3b8:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	int k_pressed = 0;
     3bc:	e3a03000 	mov	r3, #0
     3c0:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
	int l_pressed = 0;
     3c4:	e3a03000 	mov	r3, #0
     3c8:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
	int semicolon_pressed = 0;
     3cc:	e3a03000 	mov	r3, #0
     3d0:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4

	char *key_data = 0;
     3d4:	e3a03000 	mov	r3, #0
     3d8:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
     3dc:	ea000000 	b	3e4 <main+0xf8>
			if(audio_write_data_ASM(sample, sample)) {
				time++;
			}
			
		}
	}
     3e0:	e1a00000 	nop			; (mov r0, r0)
	int semicolon_pressed = 0;

	char *key_data = 0;

    while(1) {
        long sample = 0;
     3e4:	e3a03000 	mov	r3, #0
     3e8:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
        if(hps_tim1_int_flag){
     3ec:	e3003a18 	movw	r3, #2584	; 0xa18
     3f0:	e3403000 	movt	r3, #0
     3f4:	e5933000 	ldr	r3, [r3]
     3f8:	e3530000 	cmp	r3, #0
     3fc:	0a000091 	beq	648 <main+0x35c>
			hps_tim1_int_flag = 0;
     400:	e3003a18 	movw	r3, #2584	; 0xa18
     404:	e3403000 	movt	r3, #0
     408:	e3a02000 	mov	r2, #0
     40c:	e5832000 	str	r2, [r3]
            
             // If there is valid data in the PS/2 FIFO, the value in the data field of the PS2_Dataregister is stored 
            //at the address pointed to by the argument char pointer data, and the function returns a value of 1.
           // If there is no valid data in the PS/2 FIFO, the function simply return 0
			if(read_ps2_data_ASM(key_data)){
     410:	e51b0034 	ldr	r0, [r11, #-52]	; 0xffffffcc
     414:	eb00024a 	bl	d44 <read_ps2_data_ASM>
     418:	e1a03000 	mov	r3, r0
     41c:	e3530000 	cmp	r3, #0
     420:	0a000088 	beq	648 <main+0x35c>
                //PS2 Keyboard Scan Codes(make code)
                if (*key_data == 0x1C) { a_pressed = 1; }
     424:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
     428:	e5d33000 	ldrb	r3, [r3]
     42c:	e353001c 	cmp	r3, #28
     430:	1a000002 	bne	440 <main+0x154>
     434:	e3a03001 	mov	r3, #1
     438:	e50b3010 	str	r3, [r11, #-16]
     43c:	ea000081 	b	648 <main+0x35c>
                else if (*key_data == 0x1B) { s_pressed = 1; }
     440:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
     444:	e5d33000 	ldrb	r3, [r3]
     448:	e353001b 	cmp	r3, #27
     44c:	1a000002 	bne	45c <main+0x170>
     450:	e3a03001 	mov	r3, #1
     454:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
     458:	ea00007a 	b	648 <main+0x35c>
                else if (*key_data == 0x23) { d_pressed = 1; }
     45c:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
     460:	e5d33000 	ldrb	r3, [r3]
     464:	e3530023 	cmp	r3, #35	; 0x23
     468:	1a000002 	bne	478 <main+0x18c>
     46c:	e3a03001 	mov	r3, #1
     470:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
     474:	ea000073 	b	648 <main+0x35c>
                else if (*key_data == 0x2B) { f_pressed = 1; }
     478:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
     47c:	e5d33000 	ldrb	r3, [r3]
     480:	e353002b 	cmp	r3, #43	; 0x2b
     484:	1a000002 	bne	494 <main+0x1a8>
     488:	e3a03001 	mov	r3, #1
     48c:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
     490:	ea00006c 	b	648 <main+0x35c>
                else if (*key_data == 0x3B) { j_pressed = 1; }
     494:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
     498:	e5d33000 	ldrb	r3, [r3]
     49c:	e353003b 	cmp	r3, #59	; 0x3b
     4a0:	1a000002 	bne	4b0 <main+0x1c4>
     4a4:	e3a03001 	mov	r3, #1
     4a8:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
     4ac:	ea000065 	b	648 <main+0x35c>
                else if (*key_data == 0x42) { k_pressed = 1; }
     4b0:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
     4b4:	e5d33000 	ldrb	r3, [r3]
     4b8:	e3530042 	cmp	r3, #66	; 0x42
     4bc:	1a000002 	bne	4cc <main+0x1e0>
     4c0:	e3a03001 	mov	r3, #1
     4c4:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
     4c8:	ea00005e 	b	648 <main+0x35c>
                else if (*key_data == 0x4B) { l_pressed = 1; }
     4cc:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
     4d0:	e5d33000 	ldrb	r3, [r3]
     4d4:	e353004b 	cmp	r3, #75	; 0x4b
     4d8:	1a000002 	bne	4e8 <main+0x1fc>
     4dc:	e3a03001 	mov	r3, #1
     4e0:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
     4e4:	ea000057 	b	648 <main+0x35c>
                else if (*key_data == 0x4C) { semicolon_pressed = 1; }
     4e8:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
     4ec:	e5d33000 	ldrb	r3, [r3]
     4f0:	e353004c 	cmp	r3, #76	; 0x4c
     4f4:	1a000002 	bne	504 <main+0x218>
     4f8:	e3a03001 	mov	r3, #1
     4fc:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
     500:	ea000050 	b	648 <main+0x35c>
                //to turn volume up or down  
                else if (*key_data == 0x55) { amplitude += 10; } // increase volume
     504:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
     508:	e5d33000 	ldrb	r3, [r3]
     50c:	e3530055 	cmp	r3, #85	; 0x55
     510:	1a000003 	bne	524 <main+0x238>
     514:	e51b300c 	ldr	r3, [r11, #-12]
     518:	e283300a 	add	r3, r3, #10
     51c:	e50b300c 	str	r3, [r11, #-12]
     520:	ea000048 	b	648 <main+0x35c>
                else if (*key_data == 0x4E) { amplitude -= 10; } // decrease volume
     524:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
     528:	e5d33000 	ldrb	r3, [r3]
     52c:	e353004e 	cmp	r3, #78	; 0x4e
     530:	1a000003 	bne	544 <main+0x258>
     534:	e51b300c 	ldr	r3, [r11, #-12]
     538:	e243300a 	sub	r3, r3, #10
     53c:	e50b300c 	str	r3, [r11, #-12]
     540:	ea000040 	b	648 <main+0x35c>
                
                // break code once the key is realesed set is_pressed to zero
                else if (*key_data == 0xF0){
     544:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
     548:	e5d33000 	ldrb	r3, [r3]
     54c:	e35300f0 	cmp	r3, #240	; 0xf0
     550:	1a00003c 	bne	648 <main+0x35c>
                    while(!read_ps2_data_ASM(key_data));
     554:	e1a00000 	nop			; (mov r0, r0)
     558:	e51b0034 	ldr	r0, [r11, #-52]	; 0xffffffcc
     55c:	eb0001f8 	bl	d44 <read_ps2_data_ASM>
     560:	e1a03000 	mov	r3, r0
     564:	e3530000 	cmp	r3, #0
     568:	0afffffa 	beq	558 <main+0x26c>

                    if (*key_data == 0x1C) { a_pressed = 0; }
     56c:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
     570:	e5d33000 	ldrb	r3, [r3]
     574:	e353001c 	cmp	r3, #28
     578:	1a000002 	bne	588 <main+0x29c>
     57c:	e3a03000 	mov	r3, #0
     580:	e50b3010 	str	r3, [r11, #-16]
     584:	ea00002f 	b	648 <main+0x35c>
                    else if (*key_data == 0x1B) { s_pressed = 0; }
     588:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
     58c:	e5d33000 	ldrb	r3, [r3]
     590:	e353001b 	cmp	r3, #27
     594:	1a000002 	bne	5a4 <main+0x2b8>
     598:	e3a03000 	mov	r3, #0
     59c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
     5a0:	ea000028 	b	648 <main+0x35c>
                    else if (*key_data == 0x23) { d_pressed = 0; }
     5a4:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
     5a8:	e5d33000 	ldrb	r3, [r3]
     5ac:	e3530023 	cmp	r3, #35	; 0x23
     5b0:	1a000002 	bne	5c0 <main+0x2d4>
     5b4:	e3a03000 	mov	r3, #0
     5b8:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
     5bc:	ea000021 	b	648 <main+0x35c>
                    else if (*key_data == 0x2B) { f_pressed = 0; }
     5c0:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
     5c4:	e5d33000 	ldrb	r3, [r3]
     5c8:	e353002b 	cmp	r3, #43	; 0x2b
     5cc:	1a000002 	bne	5dc <main+0x2f0>
     5d0:	e3a03000 	mov	r3, #0
     5d4:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
     5d8:	ea00001a 	b	648 <main+0x35c>
                    else if (*key_data == 0x3B) { j_pressed = 0; }
     5dc:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
     5e0:	e5d33000 	ldrb	r3, [r3]
     5e4:	e353003b 	cmp	r3, #59	; 0x3b
     5e8:	1a000002 	bne	5f8 <main+0x30c>
     5ec:	e3a03000 	mov	r3, #0
     5f0:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
     5f4:	ea000013 	b	648 <main+0x35c>
                    else if (*key_data == 0x42) { k_pressed = 0; }
     5f8:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
     5fc:	e5d33000 	ldrb	r3, [r3]
     600:	e3530042 	cmp	r3, #66	; 0x42
     604:	1a000002 	bne	614 <main+0x328>
     608:	e3a03000 	mov	r3, #0
     60c:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
     610:	ea00000c 	b	648 <main+0x35c>
                    else if (*key_data == 0x4B) { l_pressed = 0; }
     614:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
     618:	e5d33000 	ldrb	r3, [r3]
     61c:	e353004b 	cmp	r3, #75	; 0x4b
     620:	1a000002 	bne	630 <main+0x344>
     624:	e3a03000 	mov	r3, #0
     628:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
     62c:	ea000005 	b	648 <main+0x35c>
                    else if (*key_data == 0x4C) { semicolon_pressed = 0; }
     630:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
     634:	e5d33000 	ldrb	r3, [r3]
     638:	e353004c 	cmp	r3, #76	; 0x4c
     63c:	1a000001 	bne	648 <main+0x35c>
     640:	e3a03000 	mov	r3, #0
     644:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
                }
            }
		}

        if(hps_tim0_int_flag){
     648:	e3003a14 	movw	r3, #2580	; 0xa14
     64c:	e3403000 	movt	r3, #0
     650:	e5933000 	ldr	r3, [r3]
     654:	e3530000 	cmp	r3, #0
     658:	0affff60 	beq	3e0 <main+0xf4>
			hps_tim0_int_flag = 0;
     65c:	e3003a14 	movw	r3, #2580	; 0xa14
     660:	e3403000 	movt	r3, #0
     664:	e3a02000 	mov	r2, #0
     668:	e5832000 	str	r2, [r3]
		
			if(a_pressed) {
     66c:	e51b3010 	ldr	r3, [r11, #-16]
     670:	e3530000 	cmp	r3, #0
     674:	0a00000a 	beq	6a4 <main+0x3b8>
				sample += generateSignal(C_FREQUENCY, time);
     678:	e51b0008 	ldr	r0, [r11, #-8]
     67c:	eb00044e 	bl	17bc <__aeabi_i2d>
     680:	e1a02000 	mov	r2, r0
     684:	e1a03001 	mov	r3, r1
     688:	e30d0021 	movw	r0, #53281	; 0xd021
     68c:	e3440302 	movt	r0, #17154	; 0x4302
     690:	ebfffef1 	bl	25c <generateSignal>
     694:	e1a03000 	mov	r3, r0
     698:	e51b2030 	ldr	r2, [r11, #-48]	; 0xffffffd0
     69c:	e0823003 	add	r3, r2, r3
     6a0:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
			}
			if(s_pressed) {
     6a4:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     6a8:	e3530000 	cmp	r3, #0
     6ac:	0a00000a 	beq	6dc <main+0x3f0>
				sample += generateSignal(D_FREQUENCY, time);
     6b0:	e51b0008 	ldr	r0, [r11, #-8]
     6b4:	eb000440 	bl	17bc <__aeabi_i2d>
     6b8:	e1a02000 	mov	r2, r0
     6bc:	e1a03001 	mov	r3, r1
     6c0:	e30d04fe 	movw	r0, #54526	; 0xd4fe
     6c4:	e3440312 	movt	r0, #17170	; 0x4312
     6c8:	ebfffee3 	bl	25c <generateSignal>
     6cc:	e1a03000 	mov	r3, r0
     6d0:	e51b2030 	ldr	r2, [r11, #-48]	; 0xffffffd0
     6d4:	e0823003 	add	r3, r2, r3
     6d8:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
			}
			if(d_pressed) {
     6dc:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     6e0:	e3530000 	cmp	r3, #0
     6e4:	0a00000a 	beq	714 <main+0x428>
				sample += generateSignal(E_FREQUENCY, time);
     6e8:	e51b0008 	ldr	r0, [r11, #-8]
     6ec:	eb000432 	bl	17bc <__aeabi_i2d>
     6f0:	e1a02000 	mov	r2, r0
     6f4:	e1a03001 	mov	r3, r1
     6f8:	e30d0062 	movw	r0, #53346	; 0xd062
     6fc:	e3440324 	movt	r0, #17188	; 0x4324
     700:	ebfffed5 	bl	25c <generateSignal>
     704:	e1a03000 	mov	r3, r0
     708:	e51b2030 	ldr	r2, [r11, #-48]	; 0xffffffd0
     70c:	e0823003 	add	r3, r2, r3
     710:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
			}
			if(f_pressed) {
     714:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     718:	e3530000 	cmp	r3, #0
     71c:	0a00000a 	beq	74c <main+0x460>
				sample += generateSignal(F_FREQUENCY, time);
     720:	e51b0008 	ldr	r0, [r11, #-8]
     724:	eb000424 	bl	17bc <__aeabi_i2d>
     728:	e1a02000 	mov	r2, r0
     72c:	e1a03001 	mov	r3, r1
     730:	e3090d2f 	movw	r0, #40239	; 0x9d2f
     734:	e344032e 	movt	r0, #17198	; 0x432e
     738:	ebfffec7 	bl	25c <generateSignal>
     73c:	e1a03000 	mov	r3, r0
     740:	e51b2030 	ldr	r2, [r11, #-48]	; 0xffffffd0
     744:	e0823003 	add	r3, r2, r3
     748:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
			}
			if(j_pressed) {
     74c:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     750:	e3530000 	cmp	r3, #0
     754:	0a00000a 	beq	784 <main+0x498>
				sample += generateSignal(G_FREQUENCY, time);
     758:	e51b0008 	ldr	r0, [r11, #-8]
     75c:	eb000416 	bl	17bc <__aeabi_i2d>
     760:	e1a02000 	mov	r2, r0
     764:	e1a03001 	mov	r3, r1
     768:	e30f0f7d 	movw	r0, #65405	; 0xff7d
     76c:	e3440343 	movt	r0, #17219	; 0x4343
     770:	ebfffeb9 	bl	25c <generateSignal>
     774:	e1a03000 	mov	r3, r0
     778:	e51b2030 	ldr	r2, [r11, #-48]	; 0xffffffd0
     77c:	e0823003 	add	r3, r2, r3
     780:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
			}
			if(k_pressed) {
     784:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
     788:	e3530000 	cmp	r3, #0
     78c:	0a00000a 	beq	7bc <main+0x4d0>
				sample += generateSignal(A_FREQUENCY, time);
     790:	e51b0008 	ldr	r0, [r11, #-8]
     794:	eb000408 	bl	17bc <__aeabi_i2d>
     798:	e1a02000 	mov	r2, r0
     79c:	e1a03001 	mov	r3, r1
     7a0:	e3a00000 	mov	r0, #0
     7a4:	e344035c 	movt	r0, #17244	; 0x435c
     7a8:	ebfffeab 	bl	25c <generateSignal>
     7ac:	e1a03000 	mov	r3, r0
     7b0:	e51b2030 	ldr	r2, [r11, #-48]	; 0xffffffd0
     7b4:	e0823003 	add	r3, r2, r3
     7b8:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
			}
			if(l_pressed) {
     7bc:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
     7c0:	e3530000 	cmp	r3, #0
     7c4:	0a00000a 	beq	7f4 <main+0x508>
				sample += generateSignal(B_FREQUENCY, time);
     7c8:	e51b0008 	ldr	r0, [r11, #-8]
     7cc:	eb0003fa 	bl	17bc <__aeabi_i2d>
     7d0:	e1a02000 	mov	r2, r0
     7d4:	e1a03001 	mov	r3, r1
     7d8:	e30f0127 	movw	r0, #61735	; 0xf127
     7dc:	e3440376 	movt	r0, #17270	; 0x4376
     7e0:	ebfffe9d 	bl	25c <generateSignal>
     7e4:	e1a03000 	mov	r3, r0
     7e8:	e51b2030 	ldr	r2, [r11, #-48]	; 0xffffffd0
     7ec:	e0823003 	add	r3, r2, r3
     7f0:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
			}
			if(semicolon_pressed) {
     7f4:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
     7f8:	e3530000 	cmp	r3, #0
     7fc:	0a00000a 	beq	82c <ICDIPTR+0x2c>
				sample += generateSignal(C2_FREQUENCY, time);
     800:	e51b0008 	ldr	r0, [r11, #-8]
     804:	eb0003ec 	bl	17bc <__aeabi_i2d>
     808:	e1a02000 	mov	r2, r0
     80c:	e1a03001 	mov	r3, r1
     810:	e30d0021 	movw	r0, #53281	; 0xd021
     814:	e3440382 	movt	r0, #17282	; 0x4382
     818:	ebfffe8f 	bl	25c <generateSignal>
     81c:	e1a03000 	mov	r3, r0
     820:	e51b2030 	ldr	r2, [r11, #-48]	; 0xffffffd0
     824:	e0823003 	add	r3, r2, r3
     828:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
			}

			sample *= amplitude;
     82c:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
     830:	e51b200c 	ldr	r2, [r11, #-12]
     834:	e0030392 	mul	r3, r2, r3
     838:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
            
			// If there is space in both the left-channel and right-channel write FIFOs, then the value in the arguments leftdata and rightdata 
			// is written to the Leftdata and Rightdata registers respectively, and the function returns a value of 1.
			// If there is no space in either one of the FIFOs, the functions simply returns 0
			if(audio_write_data_ASM(sample, sample)) {
     83c:	e51b0030 	ldr	r0, [r11, #-48]	; 0xffffffd0
     840:	e51b1030 	ldr	r1, [r11, #-48]	; 0xffffffd0
     844:	eb0000cd 	bl	b80 <audio_write_data_ASM>
     848:	e1a03000 	mov	r3, r0
     84c:	e3530000 	cmp	r3, #0
     850:	0afffee2 	beq	3e0 <main+0xf4>
				time++;
     854:	e51b3008 	ldr	r3, [r11, #-8]
     858:	e2833001 	add	r3, r3, #1
     85c:	e50b3008 	str	r3, [r11, #-8]
			}
			
		}
	}
     860:	eafffede 	b	3e0 <main+0xf4>

00000864 <HEX_clear_ASM>:
     864:	e3a01000 	mov	r1, #0
     868:	ea000004 	b	880 <WRITE>

0000086c <HEX_flood_ASM>:
     86c:	e3a0107f 	mov	r1, #127	; 0x7f
     870:	ea000002 	b	880 <WRITE>

00000874 <HEX_write_ASM>:
     874:	e59f2064 	ldr	r2, [pc, #100]	; 8e0 <PATTERNS+0x14>
     878:	e7d21001 	ldrb	r1, [r2, r1]
     87c:	eaffffff 	b	880 <WRITE>

00000880 <WRITE>:
     880:	e92d0030 	push	{r4, r5}
     884:	e59f2058 	ldr	r2, [pc, #88]	; 8e4 <PATTERNS+0x18>
     888:	e3a03000 	mov	r3, #0
     88c:	e3e050ff 	mvn	r5, #255	; 0xff

00000890 <LOOP>:
     890:	e3100001 	tst	r0, #1
     894:	0a000003 	beq	8a8 <CONTINUE>
     898:	e5924000 	ldr	r4, [r2]
     89c:	e0044005 	and	r4, r4, r5
     8a0:	e1844001 	orr	r4, r4, r1
     8a4:	e5824000 	str	r4, [r2]

000008a8 <CONTINUE>:
     8a8:	e1a05c65 	ror	r5, r5, #24
     8ac:	e1a01c61 	ror	r1, r1, #24
     8b0:	e2833001 	add	r3, r3, #1
     8b4:	e3530004 	cmp	r3, #4
     8b8:	059f2028 	ldreq	r2, [pc, #40]	; 8e8 <PATTERNS+0x1c>
     8bc:	e1b000a0 	lsrs	r0, r0, #1
     8c0:	1afffff2 	bne	890 <LOOP>
     8c4:	e8bd0030 	pop	{r4, r5}
     8c8:	e12fff1e 	bx	lr

000008cc <PATTERNS>:
     8cc:	4f5b063f 	.word	0x4f5b063f
     8d0:	077d6d66 	.word	0x077d6d66
     8d4:	7c776f7f 	.word	0x7c776f7f
     8d8:	71795e39 	.word	0x71795e39
     8dc:	000000ff 	.word	0x000000ff
     8e0:	000008cc 	.word	0x000008cc
     8e4:	ff200020 	.word	0xff200020
     8e8:	ff200030 	.word	0xff200030

000008ec <HPS_TIM_config_ASM>:
     8ec:	e92d40f0 	push	{r4, r5, r6, r7, lr}
     8f0:	e3a01000 	mov	r1, #0
     8f4:	e3a02001 	mov	r2, #1
     8f8:	e5907000 	ldr	r7, [r0]
     8fc:	eaffffff 	b	900 <LOOP>

00000900 <LOOP>:
     900:	e1170112 	tst	r7, r2, lsl r1
     904:	0a000000 	beq	90c <CONTINUE>
     908:	eb000004 	bl	920 <CONFIG>

0000090c <CONTINUE>:
     90c:	e2811001 	add	r1, r1, #1
     910:	e3510004 	cmp	r1, #4
     914:	bafffff9 	blt	900 <LOOP>

00000918 <DONE>:
     918:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
     91c:	e12fff1e 	bx	lr

00000920 <CONFIG>:
     920:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     924:	e59f30e4 	ldr	r3, [pc, #228]	; a10 <HPS_TIM_BASE+0x10>
     928:	e7934101 	ldr	r4, [r3, r1, lsl #2]
     92c:	eb000005 	bl	948 <DISABLE>
     930:	eb000008 	bl	958 <SET_LOAD_VAL>
     934:	eb00000e 	bl	974 <SET_LOAD_BIT>
     938:	eb000013 	bl	98c <SET_INT_BIT>
     93c:	eb000019 	bl	9a8 <SET_EN_BIT>
     940:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     944:	e12fff1e 	bx	lr

00000948 <DISABLE>:
     948:	e5945008 	ldr	r5, [r4, #8]
     94c:	e3c55001 	bic	r5, r5, #1
     950:	e5845008 	str	r5, [r4, #8]
     954:	e12fff1e 	bx	lr

00000958 <SET_LOAD_VAL>:
     958:	e5905004 	ldr	r5, [r0, #4]
     95c:	e3a06019 	mov	r6, #25
     960:	e0050695 	mul	r5, r5, r6
     964:	e3510002 	cmp	r1, #2
     968:	b1a05105 	lsllt	r5, r5, #2
     96c:	e5845000 	str	r5, [r4]
     970:	e12fff1e 	bx	lr

00000974 <SET_LOAD_BIT>:
     974:	e5945008 	ldr	r5, [r4, #8]
     978:	e5906008 	ldr	r6, [r0, #8]
     97c:	e3c55002 	bic	r5, r5, #2
     980:	e1855086 	orr	r5, r5, r6, lsl #1
     984:	e5845008 	str	r5, [r4, #8]
     988:	e12fff1e 	bx	lr

0000098c <SET_INT_BIT>:
     98c:	e5945008 	ldr	r5, [r4, #8]
     990:	e590600c 	ldr	r6, [r0, #12]
     994:	e2266001 	eor	r6, r6, #1
     998:	e3c55004 	bic	r5, r5, #4
     99c:	e1855106 	orr	r5, r5, r6, lsl #2
     9a0:	e5845008 	str	r5, [r4, #8]
     9a4:	e12fff1e 	bx	lr

000009a8 <SET_EN_BIT>:
     9a8:	e5945008 	ldr	r5, [r4, #8]
     9ac:	e5906010 	ldr	r6, [r0, #16]
     9b0:	e3c55001 	bic	r5, r5, #1
     9b4:	e1855006 	orr	r5, r5, r6
     9b8:	e5845008 	str	r5, [r4, #8]
     9bc:	e12fff1e 	bx	lr

000009c0 <HPS_TIM_clear_INT_ASM>:
     9c0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     9c4:	e3a01000 	mov	r1, #0
     9c8:	e3a02001 	mov	r2, #1
     9cc:	eaffffff 	b	9d0 <INT_LOOP>

000009d0 <INT_LOOP>:
     9d0:	e1100112 	tst	r0, r2, lsl r1
     9d4:	0a000000 	beq	9dc <INT_CONTINUE>
     9d8:	eb000004 	bl	9f0 <CLEAR_IT>

000009dc <INT_CONTINUE>:
     9dc:	e2811001 	add	r1, r1, #1
     9e0:	e3510004 	cmp	r1, #4
     9e4:	bafffff9 	blt	9d0 <INT_LOOP>

000009e8 <INT_DONE>:
     9e8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     9ec:	e12fff1e 	bx	lr

000009f0 <CLEAR_IT>:
     9f0:	e59f3018 	ldr	r3, [pc, #24]	; a10 <HPS_TIM_BASE+0x10>
     9f4:	e7933101 	ldr	r3, [r3, r1, lsl #2]
     9f8:	e593300c 	ldr	r3, [r3, #12]
     9fc:	e12fff1e 	bx	lr

00000a00 <HPS_TIM_BASE>:
     a00:	ffc08000 	.word	0xffc08000
     a04:	ffc09000 	.word	0xffc09000
     a08:	ffd00000 	.word	0xffd00000
     a0c:	ffd01000 	.word	0xffd01000
     a10:	00000a00 	.word	0x00000a00

00000a14 <hps_tim0_int_flag>:
     a14:	00000000 	.word	0x00000000

00000a18 <hps_tim1_int_flag>:
     a18:	00000000 	.word	0x00000000

00000a1c <A9_PRIV_TIM_ISR>:

hps_tim1_int_flag:
	.word 0x0
	
A9_PRIV_TIM_ISR:
	BX LR
     a1c:	e12fff1e 	bx	lr

00000a20 <HPS_GPIO1_ISR>:
	
HPS_GPIO1_ISR:
	BX LR
     a20:	e12fff1e 	bx	lr

00000a24 <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:
	PUSH {LR}
     a24:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	MOV R0, #0x1 //moves the one-hot encoded value of the timer interrupt to clear
     a28:	e3a00001 	mov	r0, #1
	BL HPS_TIM_clear_INT_ASM //clears tim0's interrupt request bit
     a2c:	ebffffe3 	bl	9c0 <HPS_TIM_clear_INT_ASM>

	LDR R0, =hps_tim0_int_flag //loads the address of tim0's interrupt flag into R0
     a30:	e59f0058 	ldr	r0, [pc, #88]	; a90 <FPGA_PS2_DUAL_ISR+0x4>
	MOV R1, #1 //moves 1 into R1 to store at the address in R0
     a34:	e3a01001 	mov	r1, #1
	STR R1, [R0] //sets hps_tim0_int_flag to 1
     a38:	e5801000 	str	r1, [r0]

	POP {LR}
     a3c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     a40:	e12fff1e 	bx	lr

00000a44 <HPS_TIM1_ISR>:
	
HPS_TIM1_ISR:
	PUSH {LR}
     a44:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	MOV R0, #0x2 //moves the one-hot encoded value of the timer interrupt to clear
     a48:	e3a00002 	mov	r0, #2
	BL HPS_TIM_clear_INT_ASM //clears tim1's interrupt request bit
     a4c:	ebffffdb 	bl	9c0 <HPS_TIM_clear_INT_ASM>

	LDR R0, =hps_tim1_int_flag //loads the address of tim1's interrupt flag into R1
     a50:	e59f003c 	ldr	r0, [pc, #60]	; a94 <FPGA_PS2_DUAL_ISR+0x8>
	MOV R1, #1 //moves 1 into R1 to store at the address in R0
     a54:	e3a01001 	mov	r1, #1
	STR R1, [R0] //	sets hps_tim1_int_flag to 1
     a58:	e5801000 	str	r1, [r0]

	POP {LR}
     a5c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     a60:	e12fff1e 	bx	lr

00000a64 <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	BX LR
     a64:	e12fff1e 	bx	lr

00000a68 <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	BX LR
     a68:	e12fff1e 	bx	lr

00000a6c <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
     a6c:	e12fff1e 	bx	lr

00000a70 <FPGA_PB_KEYS_ISR>:
	
FPGA_PB_KEYS_ISR:
	BX LR
     a70:	e12fff1e 	bx	lr

00000a74 <FPGA_Audio_ISR>:
	
FPGA_Audio_ISR:
	BX LR
     a74:	e12fff1e 	bx	lr

00000a78 <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	BX LR
     a78:	e12fff1e 	bx	lr

00000a7c <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
     a7c:	e12fff1e 	bx	lr

00000a80 <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
     a80:	e12fff1e 	bx	lr

00000a84 <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
     a84:	e12fff1e 	bx	lr

00000a88 <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
     a88:	e12fff1e 	bx	lr

00000a8c <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
     a8c:	e12fff1e 	bx	lr
	PUSH {LR}
	
	MOV R0, #0x1 //moves the one-hot encoded value of the timer interrupt to clear
	BL HPS_TIM_clear_INT_ASM //clears tim0's interrupt request bit

	LDR R0, =hps_tim0_int_flag //loads the address of tim0's interrupt flag into R0
     a90:	00000a14 	.word	0x00000a14
	PUSH {LR}
	
	MOV R0, #0x2 //moves the one-hot encoded value of the timer interrupt to clear
	BL HPS_TIM_clear_INT_ASM //clears tim1's interrupt request bit

	LDR R0, =hps_tim1_int_flag //loads the address of tim1's interrupt flag into R1
     a94:	00000a18 	.word	0x00000a18

00000a98 <read_LEDs_ASM>:
     a98:	e59f1010 	ldr	r1, [pc, #16]	; ab0 <write_LEDs_ASM+0xc>
     a9c:	e5910000 	ldr	r0, [r1]
     aa0:	e12fff1e 	bx	lr

00000aa4 <write_LEDs_ASM>:
     aa4:	e59f1004 	ldr	r1, [pc, #4]	; ab0 <write_LEDs_ASM+0xc>
     aa8:	e5810000 	str	r0, [r1]
     aac:	e12fff1e 	bx	lr
     ab0:	ff200000 	.word	0xff200000

00000ab4 <audio_read_data_ASM>:
     ab4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     ab8:	e92d0003 	push	{r0, r1}
     abc:	eb000093 	bl	d10 <audio_read_ralc_ASM>
     ac0:	e3500000 	cmp	r0, #0
     ac4:	08bd0003 	popeq	{r0, r1}
     ac8:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     acc:	03a00000 	moveq	r0, #0
     ad0:	012fff1e 	bxeq	lr
     ad4:	eb000092 	bl	d24 <audio_read_rarc_ASM>
     ad8:	e3500000 	cmp	r0, #0
     adc:	08bd0003 	popeq	{r0, r1}
     ae0:	03a00000 	moveq	r0, #0
     ae4:	012fff1e 	bxeq	lr
     ae8:	e8bd0003 	pop	{r0, r1}
     aec:	e59f2240 	ldr	r2, [pc, #576]	; d34 <audio_read_rarc_ASM+0x10>
     af0:	e5922000 	ldr	r2, [r2]
     af4:	e5802000 	str	r2, [r0]
     af8:	e59f3238 	ldr	r3, [pc, #568]	; d38 <audio_read_rarc_ASM+0x14>
     afc:	e5933000 	ldr	r3, [r3]
     b00:	e5813000 	str	r3, [r1]
     b04:	e3a00001 	mov	r0, #1

00000b08 <audio_read_leftdata_ASM>:
     b08:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     b0c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     b10:	eb00007e 	bl	d10 <audio_read_ralc_ASM>
     b14:	e3500000 	cmp	r0, #0
     b18:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     b1c:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     b20:	03a00000 	moveq	r0, #0
     b24:	012fff1e 	bxeq	lr
     b28:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     b2c:	e59f2200 	ldr	r2, [pc, #512]	; d34 <audio_read_rarc_ASM+0x10>
     b30:	e5922000 	ldr	r2, [r2]
     b34:	e5802000 	str	r2, [r0]
     b38:	e3a00001 	mov	r0, #1
     b3c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     b40:	e12fff1e 	bx	lr

00000b44 <audio_read_rightdata_ASM>:
     b44:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     b48:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     b4c:	eb000074 	bl	d24 <audio_read_rarc_ASM>
     b50:	e3500000 	cmp	r0, #0
     b54:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     b58:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     b5c:	03a00000 	moveq	r0, #0
     b60:	012fff1e 	bxeq	lr
     b64:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     b68:	e59f21c8 	ldr	r2, [pc, #456]	; d38 <audio_read_rarc_ASM+0x14>
     b6c:	e5922000 	ldr	r2, [r2]
     b70:	e5802000 	str	r2, [r0]
     b74:	e3a00001 	mov	r0, #1
     b78:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     b7c:	e12fff1e 	bx	lr

00000b80 <audio_write_data_ASM>:
     b80:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     b84:	e92d0003 	push	{r0, r1}
     b88:	eb000056 	bl	ce8 <audio_read_wslc_ASM>
     b8c:	e3500000 	cmp	r0, #0
     b90:	08bd0003 	popeq	{r0, r1}
     b94:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     b98:	03a00000 	moveq	r0, #0
     b9c:	012fff1e 	bxeq	lr
     ba0:	eb000055 	bl	cfc <audio_read_wsrc_ASM>
     ba4:	e3500000 	cmp	r0, #0
     ba8:	08bd0003 	popeq	{r0, r1}
     bac:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     bb0:	03a00000 	moveq	r0, #0
     bb4:	012fff1e 	bxeq	lr
     bb8:	e8bd0003 	pop	{r0, r1}
     bbc:	e59f2170 	ldr	r2, [pc, #368]	; d34 <audio_read_rarc_ASM+0x10>
     bc0:	e5820000 	str	r0, [r2]
     bc4:	e59f316c 	ldr	r3, [pc, #364]	; d38 <audio_read_rarc_ASM+0x14>
     bc8:	e5831000 	str	r1, [r3]
     bcc:	e3a00001 	mov	r0, #1
     bd0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     bd4:	e12fff1e 	bx	lr

00000bd8 <audio_write_leftdata_ASM>:
     bd8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     bdc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     be0:	eb000040 	bl	ce8 <audio_read_wslc_ASM>
     be4:	e3500000 	cmp	r0, #0
     be8:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     bec:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     bf0:	03a00000 	moveq	r0, #0
     bf4:	012fff1e 	bxeq	lr
     bf8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     bfc:	e59f2130 	ldr	r2, [pc, #304]	; d34 <audio_read_rarc_ASM+0x10>
     c00:	e5820000 	str	r0, [r2]
     c04:	e3a00001 	mov	r0, #1
     c08:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     c0c:	e12fff1e 	bx	lr

00000c10 <audio_write_rightdata_ASM>:
     c10:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     c14:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     c18:	eb000037 	bl	cfc <audio_read_wsrc_ASM>
     c1c:	e3500000 	cmp	r0, #0
     c20:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     c24:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     c28:	03a00000 	moveq	r0, #0
     c2c:	012fff1e 	bxeq	lr
     c30:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     c34:	e59f20fc 	ldr	r2, [pc, #252]	; d38 <audio_read_rarc_ASM+0x14>
     c38:	e5820000 	str	r0, [r2]
     c3c:	e3a00001 	mov	r0, #1
     c40:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     c44:	e12fff1e 	bx	lr

00000c48 <audio_enable_read_fifo_clear_ASM>:
     c48:	e59f00ec 	ldr	r0, [pc, #236]	; d3c <audio_read_rarc_ASM+0x18>
     c4c:	e5901000 	ldr	r1, [r0]
     c50:	e3811004 	orr	r1, r1, #4
     c54:	e5801000 	str	r1, [r0]
     c58:	e12fff1e 	bx	lr

00000c5c <audio_enable_write_fifo_clear_ASM>:
     c5c:	e59f00d8 	ldr	r0, [pc, #216]	; d3c <audio_read_rarc_ASM+0x18>
     c60:	e5901000 	ldr	r1, [r0]
     c64:	e3811008 	orr	r1, r1, #8
     c68:	e5801000 	str	r1, [r0]
     c6c:	e12fff1e 	bx	lr

00000c70 <audio_disable_read_fifo_clear_ASM>:
     c70:	e59f00c4 	ldr	r0, [pc, #196]	; d3c <audio_read_rarc_ASM+0x18>
     c74:	e5901000 	ldr	r1, [r0]
     c78:	e3c11004 	bic	r1, r1, #4
     c7c:	e5801000 	str	r1, [r0]
     c80:	e12fff1e 	bx	lr

00000c84 <audio_disable_write_fifo_clear_ASM>:
     c84:	e59f00b0 	ldr	r0, [pc, #176]	; d3c <audio_read_rarc_ASM+0x18>
     c88:	e5901000 	ldr	r1, [r0]
     c8c:	e3c11008 	bic	r1, r1, #8
     c90:	e5801000 	str	r1, [r0]
     c94:	e12fff1e 	bx	lr

00000c98 <audio_enable_read_int_ASM>:
     c98:	e59f009c 	ldr	r0, [pc, #156]	; d3c <audio_read_rarc_ASM+0x18>
     c9c:	e5901000 	ldr	r1, [r0]
     ca0:	e3811001 	orr	r1, r1, #1
     ca4:	e5801000 	str	r1, [r0]
     ca8:	e12fff1e 	bx	lr

00000cac <audio_enable_write_int_ASM>:
     cac:	e59f0088 	ldr	r0, [pc, #136]	; d3c <audio_read_rarc_ASM+0x18>
     cb0:	e5901000 	ldr	r1, [r0]
     cb4:	e3811002 	orr	r1, r1, #2
     cb8:	e5801000 	str	r1, [r0]
     cbc:	e12fff1e 	bx	lr

00000cc0 <audio_disable_read_int_ASM>:
     cc0:	e59f0074 	ldr	r0, [pc, #116]	; d3c <audio_read_rarc_ASM+0x18>
     cc4:	e5901000 	ldr	r1, [r0]
     cc8:	e3c11001 	bic	r1, r1, #1
     ccc:	e5801000 	str	r1, [r0]
     cd0:	e12fff1e 	bx	lr

00000cd4 <audio_disable_write_int_ASM>:
     cd4:	e59f0060 	ldr	r0, [pc, #96]	; d3c <audio_read_rarc_ASM+0x18>
     cd8:	e5901000 	ldr	r1, [r0]
     cdc:	e3c11002 	bic	r1, r1, #2
     ce0:	e5801000 	str	r1, [r0]
     ce4:	e12fff1e 	bx	lr

00000ce8 <audio_read_wslc_ASM>:
     ce8:	e59f0050 	ldr	r0, [pc, #80]	; d40 <audio_read_rarc_ASM+0x1c>
     cec:	e5900000 	ldr	r0, [r0]
     cf0:	e1a00c20 	lsr	r0, r0, #24
     cf4:	e20000ff 	and	r0, r0, #255	; 0xff
     cf8:	e12fff1e 	bx	lr

00000cfc <audio_read_wsrc_ASM>:
     cfc:	e59f003c 	ldr	r0, [pc, #60]	; d40 <audio_read_rarc_ASM+0x1c>
     d00:	e5900000 	ldr	r0, [r0]
     d04:	e1a00820 	lsr	r0, r0, #16
     d08:	e20000ff 	and	r0, r0, #255	; 0xff
     d0c:	e12fff1e 	bx	lr

00000d10 <audio_read_ralc_ASM>:
     d10:	e59f0028 	ldr	r0, [pc, #40]	; d40 <audio_read_rarc_ASM+0x1c>
     d14:	e5900000 	ldr	r0, [r0]
     d18:	e1a00420 	lsr	r0, r0, #8
     d1c:	e20000ff 	and	r0, r0, #255	; 0xff
     d20:	e12fff1e 	bx	lr

00000d24 <audio_read_rarc_ASM>:
     d24:	e59f0014 	ldr	r0, [pc, #20]	; d40 <audio_read_rarc_ASM+0x1c>
     d28:	e5900000 	ldr	r0, [r0]
     d2c:	e20000ff 	and	r0, r0, #255	; 0xff
     d30:	e12fff1e 	bx	lr
     d34:	ff203048 	.word	0xff203048
     d38:	ff20304c 	.word	0xff20304c
     d3c:	ff203040 	.word	0xff203040
     d40:	ff203044 	.word	0xff203044

00000d44 <read_ps2_data_ASM>:
     d44:	e59f114c 	ldr	r1, [pc, #332]	; e98 <ps2_fifo_ravail+0x4>
     d48:	e5911000 	ldr	r1, [r1]
     d4c:	e3a02902 	mov	r2, #32768	; 0x8000
     d50:	e1110002 	tst	r1, r2
     d54:	03a00000 	moveq	r0, #0
     d58:	012fff1e 	bxeq	lr
     d5c:	e20120ff 	and	r2, r1, #255	; 0xff
     d60:	e5c02000 	strb	r2, [r0]
     d64:	e59f2130 	ldr	r2, [pc, #304]	; e9c <ps2_fifo_ravail+0x8>
     d68:	e0010002 	and	r0, r1, r2
     d6c:	e1a00820 	lsr	r0, r0, #16
     d70:	e12fff1e 	bx	lr

00000d74 <enable_ps2_int_ASM>:
     d74:	e59f011c 	ldr	r0, [pc, #284]	; e98 <ps2_fifo_ravail+0x4>
     d78:	e3a01001 	mov	r1, #1
     d7c:	e5c01004 	strb	r1, [r0, #4]
     d80:	e12fff1e 	bx	lr

00000d84 <disable_ps2_int_ASM>:
     d84:	e59f010c 	ldr	r0, [pc, #268]	; e98 <ps2_fifo_ravail+0x4>
     d88:	e3a01000 	mov	r1, #0
     d8c:	e5c01004 	strb	r1, [r0, #4]
     d90:	e12fff1e 	bx	lr

00000d94 <ps2_fifo_data>:
	...

00000e94 <ps2_fifo_ravail>:
     e94:	00000000 	.word	0x00000000
     e98:	ff200100 	.word	0xff200100
     e9c:	ffff0000 	.word	0xffff0000

00000ea0 <read_PB_data_ASM>:
     ea0:	e59f1074 	ldr	r1, [pc, #116]	; f1c <disable_PB_INT_ASM+0x14>
     ea4:	e5910000 	ldr	r0, [r1]
     ea8:	e12fff1e 	bx	lr

00000eac <PB_data_is_pressed_ASM>:
     eac:	e59f1068 	ldr	r1, [pc, #104]	; f1c <disable_PB_INT_ASM+0x14>
     eb0:	e5912000 	ldr	r2, [r1]
     eb4:	e0000002 	and	r0, r0, r2
     eb8:	e3300000 	teq	r0, #0
     ebc:	13a00001 	movne	r0, #1
     ec0:	e12fff1e 	bx	lr

00000ec4 <read_PB_edgecap_ASM>:
     ec4:	e59f1054 	ldr	r1, [pc, #84]	; f20 <disable_PB_INT_ASM+0x18>
     ec8:	e5910000 	ldr	r0, [r1]
     ecc:	e12fff1e 	bx	lr

00000ed0 <PB_edgecap_is_pressed_ASM>:
     ed0:	e59f1048 	ldr	r1, [pc, #72]	; f20 <disable_PB_INT_ASM+0x18>
     ed4:	e5912000 	ldr	r2, [r1]
     ed8:	e0000002 	and	r0, r0, r2
     edc:	e3300000 	teq	r0, #0
     ee0:	13a00001 	movne	r0, #1
     ee4:	e12fff1e 	bx	lr

00000ee8 <PB_clear_edgecp_ASM>:
     ee8:	e59f1030 	ldr	r1, [pc, #48]	; f20 <disable_PB_INT_ASM+0x18>
     eec:	e5810000 	str	r0, [r1]
     ef0:	e12fff1e 	bx	lr

00000ef4 <enable_PB_INT_ASM>:
     ef4:	e59f1028 	ldr	r1, [pc, #40]	; f24 <disable_PB_INT_ASM+0x1c>
     ef8:	e5912000 	ldr	r2, [r1]
     efc:	e1800002 	orr	r0, r0, r2
     f00:	e5810000 	str	r0, [r1]
     f04:	e12fff1e 	bx	lr

00000f08 <disable_PB_INT_ASM>:
     f08:	e59f1014 	ldr	r1, [pc, #20]	; f24 <disable_PB_INT_ASM+0x1c>
     f0c:	e5912000 	ldr	r2, [r1]
     f10:	e1c00002 	bic	r0, r0, r2
     f14:	e5810000 	str	r0, [r1]
     f18:	e12fff1e 	bx	lr
     f1c:	ff200050 	.word	0xff200050
     f20:	ff20005c 	.word	0xff20005c
     f24:	ff200058 	.word	0xff200058

00000f28 <read_slider_switches_ASM>:
     f28:	e59f1004 	ldr	r1, [pc, #4]	; f34 <read_slider_switches_ASM+0xc>
     f2c:	e5910000 	ldr	r0, [r1]
     f30:	e12fff1e 	bx	lr
     f34:	ff200040 	.word	0xff200040

00000f38 <VGA_clear_charbuff_ASM>:
     f38:	e92d0030 	push	{r4, r5}
     f3c:	e3a02000 	mov	r2, #0
     f40:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
     f44:	e3a00000 	mov	r0, #0

00000f48 <CHAR_LOOPX>:
     f48:	e3a01000 	mov	r1, #0
     f4c:	e0834000 	add	r4, r3, r0

00000f50 <CHAR_LOOPY>:
     f50:	e0845381 	add	r5, r4, r1, lsl #7
     f54:	e5c52000 	strb	r2, [r5]
     f58:	e2811001 	add	r1, r1, #1
     f5c:	e351003c 	cmp	r1, #60	; 0x3c
     f60:	bafffffa 	blt	f50 <CHAR_LOOPY>
     f64:	e2800001 	add	r0, r0, #1
     f68:	e3500050 	cmp	r0, #80	; 0x50
     f6c:	bafffff5 	blt	f48 <CHAR_LOOPX>
     f70:	e8bd0030 	pop	{r4, r5}
     f74:	e12fff1e 	bx	lr

00000f78 <VGA_clear_pixelbuff_ASM>:
     f78:	e92d0030 	push	{r4, r5}
     f7c:	e3a02000 	mov	r2, #0
     f80:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
     f84:	e3a00000 	mov	r0, #0

00000f88 <PIXEL_LOOPX>:
     f88:	e3a01000 	mov	r1, #0
     f8c:	e0834080 	add	r4, r3, r0, lsl #1

00000f90 <PIXEL_LOOPY>:
     f90:	e0845501 	add	r5, r4, r1, lsl #10
     f94:	e1c520b0 	strh	r2, [r5]
     f98:	e2811001 	add	r1, r1, #1
     f9c:	e35100f0 	cmp	r1, #240	; 0xf0
     fa0:	bafffffa 	blt	f90 <PIXEL_LOOPY>
     fa4:	e2800001 	add	r0, r0, #1
     fa8:	e3500d05 	cmp	r0, #320	; 0x140
     fac:	bafffff5 	blt	f88 <PIXEL_LOOPX>
     fb0:	e8bd0030 	pop	{r4, r5}
     fb4:	e12fff1e 	bx	lr

00000fb8 <VGA_write_char_ASM>:
     fb8:	e3500000 	cmp	r0, #0
     fbc:	b12fff1e 	bxlt	lr
     fc0:	e3510000 	cmp	r1, #0
     fc4:	b12fff1e 	bxlt	lr
     fc8:	e350004f 	cmp	r0, #79	; 0x4f
     fcc:	c12fff1e 	bxgt	lr
     fd0:	e351003b 	cmp	r1, #59	; 0x3b
     fd4:	c12fff1e 	bxgt	lr
     fd8:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
     fdc:	e0833000 	add	r3, r3, r0
     fe0:	e0833381 	add	r3, r3, r1, lsl #7
     fe4:	e5c32000 	strb	r2, [r3]
     fe8:	e12fff1e 	bx	lr

00000fec <VGA_write_byte_ASM>:
     fec:	e3500000 	cmp	r0, #0
     ff0:	b12fff1e 	bxlt	lr
     ff4:	e3510000 	cmp	r1, #0
     ff8:	b12fff1e 	bxlt	lr
     ffc:	e350004e 	cmp	r0, #78	; 0x4e
    1000:	c12fff1e 	bxgt	lr
    1004:	e351003b 	cmp	r1, #59	; 0x3b
    1008:	c12fff1e 	bxgt	lr
    100c:	e92d0030 	push	{r4, r5}
    1010:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    1014:	e20250f0 	and	r5, r2, #240	; 0xf0
    1018:	e1a05225 	lsr	r5, r5, #4
    101c:	e202400f 	and	r4, r2, #15
    1020:	e59f2068 	ldr	r2, [pc, #104]	; 1090 <HEX_ASCII+0x10>
    1024:	e7d25005 	ldrb	r5, [r2, r5]
    1028:	e7d24004 	ldrb	r4, [r2, r4]
    102c:	e0833000 	add	r3, r3, r0
    1030:	e0833381 	add	r3, r3, r1, lsl #7
    1034:	e5c35000 	strb	r5, [r3]
    1038:	e2833001 	add	r3, r3, #1
    103c:	e5c34000 	strb	r4, [r3]
    1040:	e8bd0030 	pop	{r4, r5}
    1044:	e12fff1e 	bx	lr

00001048 <VGA_draw_point_ASM>:
    1048:	e59f3044 	ldr	r3, [pc, #68]	; 1094 <HEX_ASCII+0x14>
    104c:	e3500000 	cmp	r0, #0
    1050:	b12fff1e 	bxlt	lr
    1054:	e3510000 	cmp	r1, #0
    1058:	b12fff1e 	bxlt	lr
    105c:	e1500003 	cmp	r0, r3
    1060:	c12fff1e 	bxgt	lr
    1064:	e35100ef 	cmp	r1, #239	; 0xef
    1068:	c12fff1e 	bxgt	lr
    106c:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
    1070:	e0833080 	add	r3, r3, r0, lsl #1
    1074:	e0833501 	add	r3, r3, r1, lsl #10
    1078:	e1c320b0 	strh	r2, [r3]
    107c:	e12fff1e 	bx	lr

00001080 <HEX_ASCII>:
    1080:	33323130 	.word	0x33323130
    1084:	37363534 	.word	0x37363534
    1088:	42413938 	.word	0x42413938
    108c:	46454443 	.word	0x46454443
    1090:	00001080 	.word	0x00001080
    1094:	0000013f 	.word	0x0000013f

00001098 <disable_A9_interrupts>:
#include "../inc/int_setup.h"

void disable_A9_interrupts() {
    1098:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    109c:	e28db000 	add	r11, sp, #0
    10a0:	e24dd00c 	sub	sp, sp, #12
	int status = 0b11010011;
    10a4:	e3a030d3 	mov	r3, #211	; 0xd3
    10a8:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
    10ac:	e51b3008 	ldr	r3, [r11, #-8]
    10b0:	e129f003 	msr	CPSR_fc, r3
}
    10b4:	e28bd000 	add	sp, r11, #0
    10b8:	e8bd0800 	ldmfd	sp!, {r11}
    10bc:	e12fff1e 	bx	lr

000010c0 <enable_A9_interrupts>:

void enable_A9_interrupts() {
    10c0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    10c4:	e28db000 	add	r11, sp, #0
    10c8:	e24dd00c 	sub	sp, sp, #12
	int status = 0b01010011;
    10cc:	e3a03053 	mov	r3, #83	; 0x53
    10d0:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
    10d4:	e51b3008 	ldr	r3, [r11, #-8]
    10d8:	e129f003 	msr	CPSR_fc, r3
}
    10dc:	e28bd000 	add	sp, r11, #0
    10e0:	e8bd0800 	ldmfd	sp!, {r11}
    10e4:	e12fff1e 	bx	lr

000010e8 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack() {
    10e8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    10ec:	e28db000 	add	r11, sp, #0
    10f0:	e24dd00c 	sub	sp, sp, #12
	int stack, mode;
	stack = 0xFFFFFFFF - 7;
    10f4:	e3e03007 	mvn	r3, #7
    10f8:	e50b3008 	str	r3, [r11, #-8]
	mode = 0b11010010;
    10fc:	e3a030d2 	mov	r3, #210	; 0xd2
    1100:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
    1104:	e51b300c 	ldr	r3, [r11, #-12]
    1108:	e129f003 	msr	CPSR_fc, r3
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
    110c:	e51b3008 	ldr	r3, [r11, #-8]
    1110:	e1a0d003 	mov	sp, r3
	
	mode = 0b11010011;
    1114:	e3a030d3 	mov	r3, #211	; 0xd3
    1118:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
    111c:	e51b300c 	ldr	r3, [r11, #-12]
    1120:	e129f003 	msr	CPSR_fc, r3
}
    1124:	e28bd000 	add	sp, r11, #0
    1128:	e8bd0800 	ldmfd	sp!, {r11}
    112c:	e12fff1e 	bx	lr

00001130 <config_interrupt>:

void config_interrupt(int ID, int CPU) {
    1130:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1134:	e28db000 	add	r11, sp, #0
    1138:	e24dd01c 	sub	sp, sp, #28
    113c:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
    1140:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int reg_offset;
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
    1144:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1148:	e1a031c3 	asr	r3, r3, #3
    114c:	e3c33003 	bic	r3, r3, #3
    1150:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 0x1F;
    1154:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1158:	e203301f 	and	r3, r3, #31
    115c:	e50b300c 	str	r3, [r11, #-12]
	value = 1<<index;
    1160:	e3a02001 	mov	r2, #1
    1164:	e51b300c 	ldr	r3, [r11, #-12]
    1168:	e1a03312 	lsl	r3, r2, r3
    116c:	e50b3010 	str	r3, [r11, #-16]
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
    1170:	e51b3008 	ldr	r3, [r11, #-8]
    1174:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
    1178:	e2433c03 	sub	r3, r3, #768	; 0x300
    117c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(int *)address |= value;
    1180:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    1184:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    1188:	e5921000 	ldr	r1, [r2]
    118c:	e51b2010 	ldr	r2, [r11, #-16]
    1190:	e1812002 	orr	r2, r1, r2
    1194:	e5832000 	str	r2, [r3]
	
	reg_offset = (ID & 0xFFFFFFFC);
    1198:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    119c:	e3c33003 	bic	r3, r3, #3
    11a0:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 3;
    11a4:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    11a8:	e2033003 	and	r3, r3, #3
    11ac:	e50b300c 	str	r3, [r11, #-12]
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
    11b0:	e51b2008 	ldr	r2, [r11, #-8]
    11b4:	e51b300c 	ldr	r3, [r11, #-12]
    11b8:	e0823003 	add	r3, r2, r3
    11bc:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
    11c0:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(char *)address = (char)CPU;
    11c4:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    11c8:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
    11cc:	e6ef2072 	uxtb	r2, r2
    11d0:	e5c32000 	strb	r2, [r3]
}
    11d4:	e28bd000 	add	sp, r11, #0
    11d8:	e8bd0800 	ldmfd	sp!, {r11}
    11dc:	e12fff1e 	bx	lr

000011e0 <config_GIC>:

void config_GIC(int len, int* IDs) {
    11e0:	e92d4800 	push	{r11, lr}
    11e4:	e28db004 	add	r11, sp, #4
    11e8:	e24dd010 	sub	sp, sp, #16
    11ec:	e50b0010 	str	r0, [r11, #-16]
    11f0:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
	int i;
	for(i=0 ; i<len ; i++)
    11f4:	e3a03000 	mov	r3, #0
    11f8:	e50b3008 	str	r3, [r11, #-8]
    11fc:	ea00000a 	b	122c <config_GIC+0x4c>
		config_interrupt(IDs[i],1);
    1200:	e51b3008 	ldr	r3, [r11, #-8]
    1204:	e1a03103 	lsl	r3, r3, #2
    1208:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    120c:	e0823003 	add	r3, r2, r3
    1210:	e5933000 	ldr	r3, [r3]
    1214:	e1a00003 	mov	r0, r3
    1218:	e3a01001 	mov	r1, #1
    121c:	ebffffc3 	bl	1130 <config_interrupt>
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
	int i;
	for(i=0 ; i<len ; i++)
    1220:	e51b3008 	ldr	r3, [r11, #-8]
    1224:	e2833001 	add	r3, r3, #1
    1228:	e50b3008 	str	r3, [r11, #-8]
    122c:	e51b2008 	ldr	r2, [r11, #-8]
    1230:	e51b3010 	ldr	r3, [r11, #-16]
    1234:	e1520003 	cmp	r2, r3
    1238:	bafffff0 	blt	1200 <config_GIC+0x20>
		config_interrupt(IDs[i],1);
	*((int *) (MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
    123c:	e30c3104 	movw	r3, #49412	; 0xc104
    1240:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1244:	e30f2fff 	movw	r2, #65535	; 0xffff
    1248:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_CPUIF)) = 1;
    124c:	e3a03cc1 	mov	r3, #49408	; 0xc100
    1250:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1254:	e3a02001 	mov	r2, #1
    1258:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_DIST)) = 1;
    125c:	e3a03a0d 	mov	r3, #53248	; 0xd000
    1260:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1264:	e3a02001 	mov	r2, #1
    1268:	e5832000 	str	r2, [r3]
}
    126c:	e24bd004 	sub	sp, r11, #4
    1270:	e8bd8800 	pop	{r11, pc}

00001274 <__cs3_isr_irq>:

void __attribute__ ((interrupt)) __cs3_isr_irq() {
    1274:	e24ee004 	sub	lr, lr, #4
    1278:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
    127c:	e28db018 	add	r11, sp, #24
    1280:	e24dd00c 	sub	sp, sp, #12
	int interrupt_ID = *((int *) (MPCORE_GIC_CPUIF + ICCIAR));
    1284:	e30c310c 	movw	r3, #49420	; 0xc10c
    1288:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    128c:	e5933000 	ldr	r3, [r3]
    1290:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	
	switch(interrupt_ID) {
    1294:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    1298:	e3530053 	cmp	r3, #83	; 0x53
    129c:	0a00003d 	beq	1398 <__cs3_isr_irq+0x124>
    12a0:	e3530053 	cmp	r3, #83	; 0x53
    12a4:	ca000011 	bgt	12f0 <__cs3_isr_irq+0x7c>
    12a8:	e353004e 	cmp	r3, #78	; 0x4e
    12ac:	0a000031 	beq	1378 <__cs3_isr_irq+0x104>
    12b0:	e353004e 	cmp	r3, #78	; 0x4e
    12b4:	ca000006 	bgt	12d4 <__cs3_isr_irq+0x60>
    12b8:	e3530048 	cmp	r3, #72	; 0x48
    12bc:	0a000029 	beq	1368 <__cs3_isr_irq+0xf4>
    12c0:	e3530049 	cmp	r3, #73	; 0x49
    12c4:	0a000029 	beq	1370 <__cs3_isr_irq+0xfc>
    12c8:	e353001d 	cmp	r3, #29
    12cc:	0a000019 	beq	1338 <__cs3_isr_irq+0xc4>
    12d0:	ea000036 	b	13b0 <__cs3_isr_irq+0x13c>
    12d4:	e3530050 	cmp	r3, #80	; 0x50
    12d8:	0a00002a 	beq	1388 <__cs3_isr_irq+0x114>
    12dc:	e3530050 	cmp	r3, #80	; 0x50
    12e0:	ba000026 	blt	1380 <__cs3_isr_irq+0x10c>
    12e4:	e3530051 	cmp	r3, #81	; 0x51
    12e8:	0a000028 	beq	1390 <__cs3_isr_irq+0x11c>
    12ec:	ea00002f 	b	13b0 <__cs3_isr_irq+0x13c>
    12f0:	e35300c7 	cmp	r3, #199	; 0xc7
    12f4:	0a000013 	beq	1348 <__cs3_isr_irq+0xd4>
    12f8:	e35300c7 	cmp	r3, #199	; 0xc7
    12fc:	ca000006 	bgt	131c <__cs3_isr_irq+0xa8>
    1300:	e3530059 	cmp	r3, #89	; 0x59
    1304:	0a000027 	beq	13a8 <__cs3_isr_irq+0x134>
    1308:	e35300c5 	cmp	r3, #197	; 0xc5
    130c:	0a00000b 	beq	1340 <__cs3_isr_irq+0xcc>
    1310:	e3530054 	cmp	r3, #84	; 0x54
    1314:	0a000021 	beq	13a0 <__cs3_isr_irq+0x12c>
    1318:	ea000024 	b	13b0 <__cs3_isr_irq+0x13c>
    131c:	e35300c9 	cmp	r3, #201	; 0xc9
    1320:	0a00000c 	beq	1358 <__cs3_isr_irq+0xe4>
    1324:	e35300c9 	cmp	r3, #201	; 0xc9
    1328:	ba000008 	blt	1350 <__cs3_isr_irq+0xdc>
    132c:	e35300ca 	cmp	r3, #202	; 0xca
    1330:	0a00000a 	beq	1360 <__cs3_isr_irq+0xec>
    1334:	ea00001d 	b	13b0 <__cs3_isr_irq+0x13c>
		
		case 29:  A9_PRIV_TIM_ISR(); break;
    1338:	ebfffdb7 	bl	a1c <A9_PRIV_TIM_ISR>
    133c:	ea00001c 	b	13b4 <__cs3_isr_irq+0x140>
		case 197: HPS_GPIO1_ISR(); break;
    1340:	ebfffdb6 	bl	a20 <HPS_GPIO1_ISR>
    1344:	ea00001a 	b	13b4 <__cs3_isr_irq+0x140>
		case 199: HPS_TIM0_ISR(); break;
    1348:	ebfffdb5 	bl	a24 <HPS_TIM0_ISR>
    134c:	ea000018 	b	13b4 <__cs3_isr_irq+0x140>
		case 200: HPS_TIM1_ISR(); break;
    1350:	ebfffdbb 	bl	a44 <HPS_TIM1_ISR>
    1354:	ea000016 	b	13b4 <__cs3_isr_irq+0x140>
		case 201: HPS_TIM2_ISR(); break;
    1358:	ebfffdc1 	bl	a64 <HPS_TIM2_ISR>
    135c:	ea000014 	b	13b4 <__cs3_isr_irq+0x140>
		case 202: HPS_TIM3_ISR(); break;
    1360:	ebfffdc0 	bl	a68 <HPS_TIM3_ISR>
    1364:	ea000012 	b	13b4 <__cs3_isr_irq+0x140>
		case 72:  FPGA_INTERVAL_TIM_ISR(); break;
    1368:	ebfffdbf 	bl	a6c <FPGA_INTERVAL_TIM_ISR>
    136c:	ea000010 	b	13b4 <__cs3_isr_irq+0x140>
		case 73:  FPGA_PB_KEYS_ISR(); break;
    1370:	ebfffdbe 	bl	a70 <FPGA_PB_KEYS_ISR>
    1374:	ea00000e 	b	13b4 <__cs3_isr_irq+0x140>
		case 78:  FPGA_Audio_ISR(); break;
    1378:	ebfffdbd 	bl	a74 <FPGA_Audio_ISR>
    137c:	ea00000c 	b	13b4 <__cs3_isr_irq+0x140>
		case 79:  FPGA_PS2_ISR(); break;
    1380:	ebfffdbc 	bl	a78 <FPGA_PS2_ISR>
    1384:	ea00000a 	b	13b4 <__cs3_isr_irq+0x140>
		case 80:  FPGA_JTAG_ISR(); break;
    1388:	ebfffdbb 	bl	a7c <FPGA_JTAG_ISR>
    138c:	ea000008 	b	13b4 <__cs3_isr_irq+0x140>
		case 81:  FPGA_IrDA_ISR(); break;
    1390:	ebfffdba 	bl	a80 <FPGA_IrDA_ISR>
    1394:	ea000006 	b	13b4 <__cs3_isr_irq+0x140>
		case 83:  FPGA_JP1_ISR(); break;
    1398:	ebfffdb9 	bl	a84 <FPGA_JP1_ISR>
    139c:	ea000004 	b	13b4 <__cs3_isr_irq+0x140>
		case 84:  FPGA_JP2_ISR(); break;
    13a0:	ebfffdb8 	bl	a88 <FPGA_JP2_ISR>
    13a4:	ea000002 	b	13b4 <__cs3_isr_irq+0x140>
		case 89:  FPGA_PS2_DUAL_ISR(); break;
    13a8:	ebfffdb7 	bl	a8c <FPGA_PS2_DUAL_ISR>
    13ac:	ea000000 	b	13b4 <__cs3_isr_irq+0x140>
	
		default: while(1); break;
    13b0:	eafffffe 	b	13b0 <__cs3_isr_irq+0x13c>
	}
	
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = interrupt_ID;
    13b4:	e30c3110 	movw	r3, #49424	; 0xc110
    13b8:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    13bc:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
    13c0:	e5832000 	str	r2, [r3]
}
    13c4:	e24bd018 	sub	sp, r11, #24
    13c8:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

000013cc <__cs3_reset>:

void __attribute__ ((interrupt)) __cs3_reset (void) {
    13cc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    13d0:	e28db000 	add	r11, sp, #0
	while(1);
    13d4:	eafffffe 	b	13d4 <__cs3_reset+0x8>

000013d8 <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) {
    13d8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    13dc:	e28db000 	add	r11, sp, #0
	while(1);
    13e0:	eafffffe 	b	13e0 <__cs3_isr_undef+0x8>

000013e4 <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) {
    13e4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    13e8:	e28db000 	add	r11, sp, #0
	while(1);
    13ec:	eafffffe 	b	13ec <__cs3_isr_swi+0x8>

000013f0 <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) {
    13f0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    13f4:	e28db000 	add	r11, sp, #0
	while(1);
    13f8:	eafffffe 	b	13f8 <__cs3_isr_pabort+0x8>

000013fc <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) {
    13fc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1400:	e28db000 	add	r11, sp, #0
	while(1);
    1404:	eafffffe 	b	1404 <__cs3_isr_dabort+0x8>

00001408 <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) {
    1408:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    140c:	e28db000 	add	r11, sp, #0
	while(1);
    1410:	eafffffe 	b	1410 <__cs3_isr_fiq+0x8>

00001414 <fix_bug>:
}

void fix_bug() {
    1414:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1418:	e28db000 	add	r11, sp, #0
    141c:	e24dd00c 	sub	sp, sp, #12
	volatile int * addr = (int *)0xFFFED198;
    1420:	e30d3198 	movw	r3, #53656	; 0xd198
    1424:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1428:	e50b3008 	str	r3, [r11, #-8]
	*addr = 0x000C0000;
    142c:	e51b3008 	ldr	r3, [r11, #-8]
    1430:	e3a02703 	mov	r2, #786432	; 0xc0000
    1434:	e5832000 	str	r2, [r3]
}
    1438:	e28bd000 	add	sp, r11, #0
    143c:	e8bd0800 	ldmfd	sp!, {r11}
    1440:	e12fff1e 	bx	lr

00001444 <int_setup>:

void int_setup(int len, int* IDs) {
    1444:	e92d4800 	push	{r11, lr}
    1448:	e28db004 	add	r11, sp, #4
    144c:	e24dd008 	sub	sp, sp, #8
    1450:	e50b0008 	str	r0, [r11, #-8]
    1454:	e50b100c 	str	r1, [r11, #-12]
	disable_A9_interrupts();
    1458:	ebffff0e 	bl	1098 <disable_A9_interrupts>
	set_A9_IRQ_stack();
    145c:	ebffff21 	bl	10e8 <set_A9_IRQ_stack>
	fix_bug();
    1460:	ebffffeb 	bl	1414 <fix_bug>
	config_GIC(len, IDs);
    1464:	e51b0008 	ldr	r0, [r11, #-8]
    1468:	e51b100c 	ldr	r1, [r11, #-12]
    146c:	ebffff5b 	bl	11e0 <config_GIC>
	enable_A9_interrupts();
    1470:	ebffff12 	bl	10c0 <enable_A9_interrupts>
}
    1474:	e24bd004 	sub	sp, r11, #4
    1478:	e8bd8800 	pop	{r11, pc}

0000147c <__aeabi_drsub>:
    147c:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    1480:	ea000000 	b	1488 <__adddf3>

00001484 <__aeabi_dsub>:
    1484:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

00001488 <__adddf3>:
    1488:	e92d4030 	push	{r4, r5, lr}
    148c:	e1a04081 	lsl	r4, r1, #1
    1490:	e1a05083 	lsl	r5, r3, #1
    1494:	e1340005 	teq	r4, r5
    1498:	01300002 	teqeq	r0, r2
    149c:	1194c000 	orrsne	r12, r4, r0
    14a0:	1195c002 	orrsne	r12, r5, r2
    14a4:	11f0cac4 	mvnsne	r12, r4, asr #21
    14a8:	11f0cac5 	mvnsne	r12, r5, asr #21
    14ac:	0a00008c 	beq	16e4 <__adddf3+0x25c>
    14b0:	e1a04aa4 	lsr	r4, r4, #21
    14b4:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    14b8:	b2655000 	rsblt	r5, r5, #0
    14bc:	da000006 	ble	14dc <__adddf3+0x54>
    14c0:	e0844005 	add	r4, r4, r5
    14c4:	e0202002 	eor	r2, r0, r2
    14c8:	e0213003 	eor	r3, r1, r3
    14cc:	e0220000 	eor	r0, r2, r0
    14d0:	e0231001 	eor	r1, r3, r1
    14d4:	e0202002 	eor	r2, r0, r2
    14d8:	e0213003 	eor	r3, r1, r3
    14dc:	e3550036 	cmp	r5, #54	; 0x36
    14e0:	88bd4030 	pophi	{r4, r5, lr}
    14e4:	812fff1e 	bxhi	lr
    14e8:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    14ec:	e1a01601 	lsl	r1, r1, #12
    14f0:	e3a0c601 	mov	r12, #1048576	; 0x100000
    14f4:	e18c1621 	orr	r1, r12, r1, lsr #12
    14f8:	0a000001 	beq	1504 <__adddf3+0x7c>
    14fc:	e2700000 	rsbs	r0, r0, #0
    1500:	e2e11000 	rsc	r1, r1, #0
    1504:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    1508:	e1a03603 	lsl	r3, r3, #12
    150c:	e18c3623 	orr	r3, r12, r3, lsr #12
    1510:	0a000001 	beq	151c <__adddf3+0x94>
    1514:	e2722000 	rsbs	r2, r2, #0
    1518:	e2e33000 	rsc	r3, r3, #0
    151c:	e1340005 	teq	r4, r5
    1520:	0a000069 	beq	16cc <__adddf3+0x244>
    1524:	e2444001 	sub	r4, r4, #1
    1528:	e275e020 	rsbs	lr, r5, #32
    152c:	ba000005 	blt	1548 <__adddf3+0xc0>
    1530:	e1a0ce12 	lsl	r12, r2, lr
    1534:	e0900532 	adds	r0, r0, r2, lsr r5
    1538:	e2a11000 	adc	r1, r1, #0
    153c:	e0900e13 	adds	r0, r0, r3, lsl lr
    1540:	e0b11553 	adcs	r1, r1, r3, asr r5
    1544:	ea000006 	b	1564 <__adddf3+0xdc>
    1548:	e2455020 	sub	r5, r5, #32
    154c:	e28ee020 	add	lr, lr, #32
    1550:	e3520001 	cmp	r2, #1
    1554:	e1a0ce13 	lsl	r12, r3, lr
    1558:	238cc002 	orrcs	r12, r12, #2
    155c:	e0900553 	adds	r0, r0, r3, asr r5
    1560:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    1564:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1568:	5a000002 	bpl	1578 <__adddf3+0xf0>
    156c:	e27cc000 	rsbs	r12, r12, #0
    1570:	e2f00000 	rscs	r0, r0, #0
    1574:	e2e11000 	rsc	r1, r1, #0
    1578:	e3510601 	cmp	r1, #1048576	; 0x100000
    157c:	3a00000f 	bcc	15c0 <__adddf3+0x138>
    1580:	e3510602 	cmp	r1, #2097152	; 0x200000
    1584:	3a000006 	bcc	15a4 <__adddf3+0x11c>
    1588:	e1b010a1 	lsrs	r1, r1, #1
    158c:	e1b00060 	rrxs	r0, r0
    1590:	e1a0c06c 	rrx	r12, r12
    1594:	e2844001 	add	r4, r4, #1
    1598:	e1a02a84 	lsl	r2, r4, #21
    159c:	e3720501 	cmn	r2, #4194304	; 0x400000
    15a0:	2a00006b 	bcs	1754 <__adddf3+0x2cc>
    15a4:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    15a8:	01b0c0a0 	lsrseq	r12, r0, #1
    15ac:	e2b00000 	adcs	r0, r0, #0
    15b0:	e0a11a04 	adc	r1, r1, r4, lsl #20
    15b4:	e1811005 	orr	r1, r1, r5
    15b8:	e8bd4030 	pop	{r4, r5, lr}
    15bc:	e12fff1e 	bx	lr
    15c0:	e1b0c08c 	lsls	r12, r12, #1
    15c4:	e0b00000 	adcs	r0, r0, r0
    15c8:	e0a11001 	adc	r1, r1, r1
    15cc:	e3110601 	tst	r1, #1048576	; 0x100000
    15d0:	e2444001 	sub	r4, r4, #1
    15d4:	1afffff2 	bne	15a4 <__adddf3+0x11c>
    15d8:	e3310000 	teq	r1, #0
    15dc:	13a03014 	movne	r3, #20
    15e0:	03a03034 	moveq	r3, #52	; 0x34
    15e4:	01a01000 	moveq	r1, r0
    15e8:	03a00000 	moveq	r0, #0
    15ec:	e1a02001 	mov	r2, r1
    15f0:	e3520801 	cmp	r2, #65536	; 0x10000
    15f4:	21a02822 	lsrcs	r2, r2, #16
    15f8:	22433010 	subcs	r3, r3, #16
    15fc:	e3520c01 	cmp	r2, #256	; 0x100
    1600:	21a02422 	lsrcs	r2, r2, #8
    1604:	22433008 	subcs	r3, r3, #8
    1608:	e3520010 	cmp	r2, #16
    160c:	21a02222 	lsrcs	r2, r2, #4
    1610:	22433004 	subcs	r3, r3, #4
    1614:	e3520004 	cmp	r2, #4
    1618:	22433002 	subcs	r3, r3, #2
    161c:	304330a2 	subcc	r3, r3, r2, lsr #1
    1620:	e04331a2 	sub	r3, r3, r2, lsr #3
    1624:	e2532020 	subs	r2, r3, #32
    1628:	aa000007 	bge	164c <__adddf3+0x1c4>
    162c:	e292200c 	adds	r2, r2, #12
    1630:	da000004 	ble	1648 <__adddf3+0x1c0>
    1634:	e282c014 	add	r12, r2, #20
    1638:	e262200c 	rsb	r2, r2, #12
    163c:	e1a00c11 	lsl	r0, r1, r12
    1640:	e1a01231 	lsr	r1, r1, r2
    1644:	ea000004 	b	165c <__adddf3+0x1d4>
    1648:	e2822014 	add	r2, r2, #20
    164c:	d262c020 	rsble	r12, r2, #32
    1650:	e1a01211 	lsl	r1, r1, r2
    1654:	d1811c30 	orrle	r1, r1, r0, lsr r12
    1658:	d1a00210 	lslle	r0, r0, r2
    165c:	e0544003 	subs	r4, r4, r3
    1660:	a0811a04 	addge	r1, r1, r4, lsl #20
    1664:	a1811005 	orrge	r1, r1, r5
    1668:	a8bd4030 	popge	{r4, r5, lr}
    166c:	a12fff1e 	bxge	lr
    1670:	e1e04004 	mvn	r4, r4
    1674:	e254401f 	subs	r4, r4, #31
    1678:	aa00000f 	bge	16bc <__adddf3+0x234>
    167c:	e294400c 	adds	r4, r4, #12
    1680:	ca000006 	bgt	16a0 <__adddf3+0x218>
    1684:	e2844014 	add	r4, r4, #20
    1688:	e2642020 	rsb	r2, r4, #32
    168c:	e1a00430 	lsr	r0, r0, r4
    1690:	e1800211 	orr	r0, r0, r1, lsl r2
    1694:	e1851431 	orr	r1, r5, r1, lsr r4
    1698:	e8bd4030 	pop	{r4, r5, lr}
    169c:	e12fff1e 	bx	lr
    16a0:	e264400c 	rsb	r4, r4, #12
    16a4:	e2642020 	rsb	r2, r4, #32
    16a8:	e1a00230 	lsr	r0, r0, r2
    16ac:	e1800411 	orr	r0, r0, r1, lsl r4
    16b0:	e1a01005 	mov	r1, r5
    16b4:	e8bd4030 	pop	{r4, r5, lr}
    16b8:	e12fff1e 	bx	lr
    16bc:	e1a00431 	lsr	r0, r1, r4
    16c0:	e1a01005 	mov	r1, r5
    16c4:	e8bd4030 	pop	{r4, r5, lr}
    16c8:	e12fff1e 	bx	lr
    16cc:	e3340000 	teq	r4, #0
    16d0:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    16d4:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    16d8:	02844001 	addeq	r4, r4, #1
    16dc:	12455001 	subne	r5, r5, #1
    16e0:	eaffff8f 	b	1524 <__adddf3+0x9c>
    16e4:	e1f0cac4 	mvns	r12, r4, asr #21
    16e8:	11f0cac5 	mvnsne	r12, r5, asr #21
    16ec:	0a00001d 	beq	1768 <__adddf3+0x2e0>
    16f0:	e1340005 	teq	r4, r5
    16f4:	01300002 	teqeq	r0, r2
    16f8:	0a000004 	beq	1710 <__adddf3+0x288>
    16fc:	e194c000 	orrs	r12, r4, r0
    1700:	01a01003 	moveq	r1, r3
    1704:	01a00002 	moveq	r0, r2
    1708:	e8bd4030 	pop	{r4, r5, lr}
    170c:	e12fff1e 	bx	lr
    1710:	e1310003 	teq	r1, r3
    1714:	13a01000 	movne	r1, #0
    1718:	13a00000 	movne	r0, #0
    171c:	18bd4030 	popne	{r4, r5, lr}
    1720:	112fff1e 	bxne	lr
    1724:	e1b0caa4 	lsrs	r12, r4, #21
    1728:	1a000004 	bne	1740 <__adddf3+0x2b8>
    172c:	e1b00080 	lsls	r0, r0, #1
    1730:	e0b11001 	adcs	r1, r1, r1
    1734:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    1738:	e8bd4030 	pop	{r4, r5, lr}
    173c:	e12fff1e 	bx	lr
    1740:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    1744:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    1748:	38bd4030 	popcc	{r4, r5, lr}
    174c:	312fff1e 	bxcc	lr
    1750:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1754:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    1758:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    175c:	e3a00000 	mov	r0, #0
    1760:	e8bd4030 	pop	{r4, r5, lr}
    1764:	e12fff1e 	bx	lr
    1768:	e1f0cac4 	mvns	r12, r4, asr #21
    176c:	11a01003 	movne	r1, r3
    1770:	11a00002 	movne	r0, r2
    1774:	01f0cac5 	mvnseq	r12, r5, asr #21
    1778:	11a03001 	movne	r3, r1
    177c:	11a02000 	movne	r2, r0
    1780:	e1904601 	orrs	r4, r0, r1, lsl #12
    1784:	01925603 	orrseq	r5, r2, r3, lsl #12
    1788:	01310003 	teqeq	r1, r3
    178c:	13811702 	orrne	r1, r1, #524288	; 0x80000
    1790:	e8bd4030 	pop	{r4, r5, lr}
    1794:	e12fff1e 	bx	lr

00001798 <__aeabi_ui2d>:
    1798:	e3300000 	teq	r0, #0
    179c:	03a01000 	moveq	r1, #0
    17a0:	012fff1e 	bxeq	lr
    17a4:	e92d4030 	push	{r4, r5, lr}
    17a8:	e3a04b01 	mov	r4, #1024	; 0x400
    17ac:	e2844032 	add	r4, r4, #50	; 0x32
    17b0:	e3a05000 	mov	r5, #0
    17b4:	e3a01000 	mov	r1, #0
    17b8:	eaffff86 	b	15d8 <__adddf3+0x150>

000017bc <__aeabi_i2d>:
    17bc:	e3300000 	teq	r0, #0
    17c0:	03a01000 	moveq	r1, #0
    17c4:	012fff1e 	bxeq	lr
    17c8:	e92d4030 	push	{r4, r5, lr}
    17cc:	e3a04b01 	mov	r4, #1024	; 0x400
    17d0:	e2844032 	add	r4, r4, #50	; 0x32
    17d4:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    17d8:	42600000 	rsbmi	r0, r0, #0
    17dc:	e3a01000 	mov	r1, #0
    17e0:	eaffff7c 	b	15d8 <__adddf3+0x150>

000017e4 <__aeabi_f2d>:
    17e4:	e1b02080 	lsls	r2, r0, #1
    17e8:	e1a011c2 	asr	r1, r2, #3
    17ec:	e1a01061 	rrx	r1, r1
    17f0:	e1a00e02 	lsl	r0, r2, #28
    17f4:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    17f8:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    17fc:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    1800:	112fff1e 	bxne	lr
    1804:	e3320000 	teq	r2, #0
    1808:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    180c:	012fff1e 	bxeq	lr
    1810:	e92d4030 	push	{r4, r5, lr}
    1814:	e3a04d0e 	mov	r4, #896	; 0x380
    1818:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    181c:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    1820:	eaffff6c 	b	15d8 <__adddf3+0x150>

00001824 <__aeabi_ul2d>:
    1824:	e1902001 	orrs	r2, r0, r1
    1828:	012fff1e 	bxeq	lr
    182c:	e92d4030 	push	{r4, r5, lr}
    1830:	e3a05000 	mov	r5, #0
    1834:	ea000006 	b	1854 <__aeabi_l2d+0x1c>

00001838 <__aeabi_l2d>:
    1838:	e1902001 	orrs	r2, r0, r1
    183c:	012fff1e 	bxeq	lr
    1840:	e92d4030 	push	{r4, r5, lr}
    1844:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    1848:	5a000001 	bpl	1854 <__aeabi_l2d+0x1c>
    184c:	e2700000 	rsbs	r0, r0, #0
    1850:	e2e11000 	rsc	r1, r1, #0
    1854:	e3a04b01 	mov	r4, #1024	; 0x400
    1858:	e2844032 	add	r4, r4, #50	; 0x32
    185c:	e1b0cb21 	lsrs	r12, r1, #22
    1860:	0affff44 	beq	1578 <__adddf3+0xf0>
    1864:	e3a02003 	mov	r2, #3
    1868:	e1b0c1ac 	lsrs	r12, r12, #3
    186c:	12822003 	addne	r2, r2, #3
    1870:	e1b0c1ac 	lsrs	r12, r12, #3
    1874:	12822003 	addne	r2, r2, #3
    1878:	e08221ac 	add	r2, r2, r12, lsr #3
    187c:	e2623020 	rsb	r3, r2, #32
    1880:	e1a0c310 	lsl	r12, r0, r3
    1884:	e1a00230 	lsr	r0, r0, r2
    1888:	e1800311 	orr	r0, r0, r1, lsl r3
    188c:	e1a01231 	lsr	r1, r1, r2
    1890:	e0844002 	add	r4, r4, r2
    1894:	eaffff37 	b	1578 <__adddf3+0xf0>

00001898 <__aeabi_dmul>:
    1898:	e92d4070 	push	{r4, r5, r6, lr}
    189c:	e3a0c0ff 	mov	r12, #255	; 0xff
    18a0:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    18a4:	e01c4a21 	ands	r4, r12, r1, lsr #20
    18a8:	101c5a23 	andsne	r5, r12, r3, lsr #20
    18ac:	1134000c 	teqne	r4, r12
    18b0:	1135000c 	teqne	r5, r12
    18b4:	0b000075 	bleq	1a90 <__aeabi_dmul+0x1f8>
    18b8:	e0844005 	add	r4, r4, r5
    18bc:	e0216003 	eor	r6, r1, r3
    18c0:	e1c11a8c 	bic	r1, r1, r12, lsl #21
    18c4:	e1c33a8c 	bic	r3, r3, r12, lsl #21
    18c8:	e1905601 	orrs	r5, r0, r1, lsl #12
    18cc:	11925603 	orrsne	r5, r2, r3, lsl #12
    18d0:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    18d4:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    18d8:	0a00001d 	beq	1954 <__aeabi_dmul+0xbc>
    18dc:	e08ec290 	umull	r12, lr, r0, r2
    18e0:	e3a05000 	mov	r5, #0
    18e4:	e0a5e291 	umlal	lr, r5, r1, r2
    18e8:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    18ec:	e0a5e390 	umlal	lr, r5, r0, r3
    18f0:	e3a06000 	mov	r6, #0
    18f4:	e0a65391 	umlal	r5, r6, r1, r3
    18f8:	e33c0000 	teq	r12, #0
    18fc:	138ee001 	orrne	lr, lr, #1
    1900:	e24440ff 	sub	r4, r4, #255	; 0xff
    1904:	e3560c02 	cmp	r6, #512	; 0x200
    1908:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    190c:	2a000002 	bcs	191c <__aeabi_dmul+0x84>
    1910:	e1b0e08e 	lsls	lr, lr, #1
    1914:	e0b55005 	adcs	r5, r5, r5
    1918:	e0a66006 	adc	r6, r6, r6
    191c:	e1821586 	orr	r1, r2, r6, lsl #11
    1920:	e1811aa5 	orr	r1, r1, r5, lsr #21
    1924:	e1a00585 	lsl	r0, r5, #11
    1928:	e1800aae 	orr	r0, r0, lr, lsr #21
    192c:	e1a0e58e 	lsl	lr, lr, #11
    1930:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    1934:	835c0c07 	cmphi	r12, #1792	; 0x700
    1938:	8a000011 	bhi	1984 <__aeabi_dmul+0xec>
    193c:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    1940:	01b0e0a0 	lsrseq	lr, r0, #1
    1944:	e2b00000 	adcs	r0, r0, #0
    1948:	e0a11a04 	adc	r1, r1, r4, lsl #20
    194c:	e8bd4070 	pop	{r4, r5, r6, lr}
    1950:	e12fff1e 	bx	lr
    1954:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    1958:	e1861001 	orr	r1, r6, r1
    195c:	e1800002 	orr	r0, r0, r2
    1960:	e0211003 	eor	r1, r1, r3
    1964:	e05440ac 	subs	r4, r4, r12, lsr #1
    1968:	c074500c 	rsbsgt	r5, r4, r12
    196c:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    1970:	c8bd4070 	popgt	{r4, r5, r6, lr}
    1974:	c12fff1e 	bxgt	lr
    1978:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    197c:	e3a0e000 	mov	lr, #0
    1980:	e2544001 	subs	r4, r4, #1
    1984:	ca00005d 	bgt	1b00 <__aeabi_dmul+0x268>
    1988:	e3740036 	cmn	r4, #54	; 0x36
    198c:	d3a00000 	movle	r0, #0
    1990:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    1994:	d8bd4070 	pople	{r4, r5, r6, lr}
    1998:	d12fff1e 	bxle	lr
    199c:	e2644000 	rsb	r4, r4, #0
    19a0:	e2544020 	subs	r4, r4, #32
    19a4:	aa00001a 	bge	1a14 <__aeabi_dmul+0x17c>
    19a8:	e294400c 	adds	r4, r4, #12
    19ac:	ca00000c 	bgt	19e4 <__aeabi_dmul+0x14c>
    19b0:	e2844014 	add	r4, r4, #20
    19b4:	e2645020 	rsb	r5, r4, #32
    19b8:	e1a03510 	lsl	r3, r0, r5
    19bc:	e1a00430 	lsr	r0, r0, r4
    19c0:	e1800511 	orr	r0, r0, r1, lsl r5
    19c4:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    19c8:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    19cc:	e0900fa3 	adds	r0, r0, r3, lsr #31
    19d0:	e0a21431 	adc	r1, r2, r1, lsr r4
    19d4:	e19ee083 	orrs	lr, lr, r3, lsl #1
    19d8:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    19dc:	e8bd4070 	pop	{r4, r5, r6, lr}
    19e0:	e12fff1e 	bx	lr
    19e4:	e264400c 	rsb	r4, r4, #12
    19e8:	e2645020 	rsb	r5, r4, #32
    19ec:	e1a03410 	lsl	r3, r0, r4
    19f0:	e1a00530 	lsr	r0, r0, r5
    19f4:	e1800411 	orr	r0, r0, r1, lsl r4
    19f8:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    19fc:	e0900fa3 	adds	r0, r0, r3, lsr #31
    1a00:	e2a11000 	adc	r1, r1, #0
    1a04:	e19ee083 	orrs	lr, lr, r3, lsl #1
    1a08:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1a0c:	e8bd4070 	pop	{r4, r5, r6, lr}
    1a10:	e12fff1e 	bx	lr
    1a14:	e2645020 	rsb	r5, r4, #32
    1a18:	e18ee510 	orr	lr, lr, r0, lsl r5
    1a1c:	e1a03430 	lsr	r3, r0, r4
    1a20:	e1833511 	orr	r3, r3, r1, lsl r5
    1a24:	e1a00431 	lsr	r0, r1, r4
    1a28:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1a2c:	e1c00431 	bic	r0, r0, r1, lsr r4
    1a30:	e0800fa3 	add	r0, r0, r3, lsr #31
    1a34:	e19ee083 	orrs	lr, lr, r3, lsl #1
    1a38:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1a3c:	e8bd4070 	pop	{r4, r5, r6, lr}
    1a40:	e12fff1e 	bx	lr
    1a44:	e3340000 	teq	r4, #0
    1a48:	1a000008 	bne	1a70 <__aeabi_dmul+0x1d8>
    1a4c:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    1a50:	e1b00080 	lsls	r0, r0, #1
    1a54:	e0a11001 	adc	r1, r1, r1
    1a58:	e3110601 	tst	r1, #1048576	; 0x100000
    1a5c:	02444001 	subeq	r4, r4, #1
    1a60:	0afffffa 	beq	1a50 <__aeabi_dmul+0x1b8>
    1a64:	e1811006 	orr	r1, r1, r6
    1a68:	e3350000 	teq	r5, #0
    1a6c:	112fff1e 	bxne	lr
    1a70:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    1a74:	e1b02082 	lsls	r2, r2, #1
    1a78:	e0a33003 	adc	r3, r3, r3
    1a7c:	e3130601 	tst	r3, #1048576	; 0x100000
    1a80:	02455001 	subeq	r5, r5, #1
    1a84:	0afffffa 	beq	1a74 <__aeabi_dmul+0x1dc>
    1a88:	e1833006 	orr	r3, r3, r6
    1a8c:	e12fff1e 	bx	lr
    1a90:	e134000c 	teq	r4, r12
    1a94:	e00c5a23 	and	r5, r12, r3, lsr #20
    1a98:	1135000c 	teqne	r5, r12
    1a9c:	0a000007 	beq	1ac0 <__aeabi_dmul+0x228>
    1aa0:	e1906081 	orrs	r6, r0, r1, lsl #1
    1aa4:	11926083 	orrsne	r6, r2, r3, lsl #1
    1aa8:	1affffe5 	bne	1a44 <__aeabi_dmul+0x1ac>
    1aac:	e0211003 	eor	r1, r1, r3
    1ab0:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1ab4:	e3a00000 	mov	r0, #0
    1ab8:	e8bd4070 	pop	{r4, r5, r6, lr}
    1abc:	e12fff1e 	bx	lr
    1ac0:	e1906081 	orrs	r6, r0, r1, lsl #1
    1ac4:	01a00002 	moveq	r0, r2
    1ac8:	01a01003 	moveq	r1, r3
    1acc:	11926083 	orrsne	r6, r2, r3, lsl #1
    1ad0:	0a000010 	beq	1b18 <__aeabi_dmul+0x280>
    1ad4:	e134000c 	teq	r4, r12
    1ad8:	1a000001 	bne	1ae4 <__aeabi_dmul+0x24c>
    1adc:	e1906601 	orrs	r6, r0, r1, lsl #12
    1ae0:	1a00000c 	bne	1b18 <__aeabi_dmul+0x280>
    1ae4:	e135000c 	teq	r5, r12
    1ae8:	1a000003 	bne	1afc <__aeabi_dmul+0x264>
    1aec:	e1926603 	orrs	r6, r2, r3, lsl #12
    1af0:	11a00002 	movne	r0, r2
    1af4:	11a01003 	movne	r1, r3
    1af8:	1a000006 	bne	1b18 <__aeabi_dmul+0x280>
    1afc:	e0211003 	eor	r1, r1, r3
    1b00:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1b04:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    1b08:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    1b0c:	e3a00000 	mov	r0, #0
    1b10:	e8bd4070 	pop	{r4, r5, r6, lr}
    1b14:	e12fff1e 	bx	lr
    1b18:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    1b1c:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    1b20:	e8bd4070 	pop	{r4, r5, r6, lr}
    1b24:	e12fff1e 	bx	lr

00001b28 <__aeabi_ddiv>:
    1b28:	e92d4070 	push	{r4, r5, r6, lr}
    1b2c:	e3a0c0ff 	mov	r12, #255	; 0xff
    1b30:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    1b34:	e01c4a21 	ands	r4, r12, r1, lsr #20
    1b38:	101c5a23 	andsne	r5, r12, r3, lsr #20
    1b3c:	1134000c 	teqne	r4, r12
    1b40:	1135000c 	teqne	r5, r12
    1b44:	0b00005e 	bleq	1cc4 <__aeabi_ddiv+0x19c>
    1b48:	e0444005 	sub	r4, r4, r5
    1b4c:	e021e003 	eor	lr, r1, r3
    1b50:	e1925603 	orrs	r5, r2, r3, lsl #12
    1b54:	e1a01601 	lsl	r1, r1, #12
    1b58:	0a00004c 	beq	1c90 <__aeabi_ddiv+0x168>
    1b5c:	e1a03603 	lsl	r3, r3, #12
    1b60:	e3a05201 	mov	r5, #268435456	; 0x10000000
    1b64:	e1853223 	orr	r3, r5, r3, lsr #4
    1b68:	e1833c22 	orr	r3, r3, r2, lsr #24
    1b6c:	e1a02402 	lsl	r2, r2, #8
    1b70:	e1855221 	orr	r5, r5, r1, lsr #4
    1b74:	e1855c20 	orr	r5, r5, r0, lsr #24
    1b78:	e1a06400 	lsl	r6, r0, #8
    1b7c:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    1b80:	e1550003 	cmp	r5, r3
    1b84:	01560002 	cmpeq	r6, r2
    1b88:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    1b8c:	e2844c03 	add	r4, r4, #768	; 0x300
    1b90:	2a000001 	bcs	1b9c <__aeabi_ddiv+0x74>
    1b94:	e1b030a3 	lsrs	r3, r3, #1
    1b98:	e1a02062 	rrx	r2, r2
    1b9c:	e0566002 	subs	r6, r6, r2
    1ba0:	e0c55003 	sbc	r5, r5, r3
    1ba4:	e1b030a3 	lsrs	r3, r3, #1
    1ba8:	e1a02062 	rrx	r2, r2
    1bac:	e3a00601 	mov	r0, #1048576	; 0x100000
    1bb0:	e3a0c702 	mov	r12, #524288	; 0x80000
    1bb4:	e056e002 	subs	lr, r6, r2
    1bb8:	e0d5e003 	sbcs	lr, r5, r3
    1bbc:	20466002 	subcs	r6, r6, r2
    1bc0:	21a0500e 	movcs	r5, lr
    1bc4:	2180000c 	orrcs	r0, r0, r12
    1bc8:	e1b030a3 	lsrs	r3, r3, #1
    1bcc:	e1a02062 	rrx	r2, r2
    1bd0:	e056e002 	subs	lr, r6, r2
    1bd4:	e0d5e003 	sbcs	lr, r5, r3
    1bd8:	20466002 	subcs	r6, r6, r2
    1bdc:	21a0500e 	movcs	r5, lr
    1be0:	218000ac 	orrcs	r0, r0, r12, lsr #1
    1be4:	e1b030a3 	lsrs	r3, r3, #1
    1be8:	e1a02062 	rrx	r2, r2
    1bec:	e056e002 	subs	lr, r6, r2
    1bf0:	e0d5e003 	sbcs	lr, r5, r3
    1bf4:	20466002 	subcs	r6, r6, r2
    1bf8:	21a0500e 	movcs	r5, lr
    1bfc:	2180012c 	orrcs	r0, r0, r12, lsr #2
    1c00:	e1b030a3 	lsrs	r3, r3, #1
    1c04:	e1a02062 	rrx	r2, r2
    1c08:	e056e002 	subs	lr, r6, r2
    1c0c:	e0d5e003 	sbcs	lr, r5, r3
    1c10:	20466002 	subcs	r6, r6, r2
    1c14:	21a0500e 	movcs	r5, lr
    1c18:	218001ac 	orrcs	r0, r0, r12, lsr #3
    1c1c:	e195e006 	orrs	lr, r5, r6
    1c20:	0a00000d 	beq	1c5c <__aeabi_ddiv+0x134>
    1c24:	e1a05205 	lsl	r5, r5, #4
    1c28:	e1855e26 	orr	r5, r5, r6, lsr #28
    1c2c:	e1a06206 	lsl	r6, r6, #4
    1c30:	e1a03183 	lsl	r3, r3, #3
    1c34:	e1833ea2 	orr	r3, r3, r2, lsr #29
    1c38:	e1a02182 	lsl	r2, r2, #3
    1c3c:	e1b0c22c 	lsrs	r12, r12, #4
    1c40:	1affffdb 	bne	1bb4 <__aeabi_ddiv+0x8c>
    1c44:	e3110601 	tst	r1, #1048576	; 0x100000
    1c48:	1a000006 	bne	1c68 <__aeabi_ddiv+0x140>
    1c4c:	e1811000 	orr	r1, r1, r0
    1c50:	e3a00000 	mov	r0, #0
    1c54:	e3a0c102 	mov	r12, #-2147483648	; 0x80000000
    1c58:	eaffffd5 	b	1bb4 <__aeabi_ddiv+0x8c>
    1c5c:	e3110601 	tst	r1, #1048576	; 0x100000
    1c60:	01811000 	orreq	r1, r1, r0
    1c64:	03a00000 	moveq	r0, #0
    1c68:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    1c6c:	835c0c07 	cmphi	r12, #1792	; 0x700
    1c70:	8affff43 	bhi	1984 <__aeabi_dmul+0xec>
    1c74:	e055c003 	subs	r12, r5, r3
    1c78:	0056c002 	subseq	r12, r6, r2
    1c7c:	01b0c0a0 	lsrseq	r12, r0, #1
    1c80:	e2b00000 	adcs	r0, r0, #0
    1c84:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1c88:	e8bd4070 	pop	{r4, r5, r6, lr}
    1c8c:	e12fff1e 	bx	lr
    1c90:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    1c94:	e18e1621 	orr	r1, lr, r1, lsr #12
    1c98:	e09440ac 	adds	r4, r4, r12, lsr #1
    1c9c:	c074500c 	rsbsgt	r5, r4, r12
    1ca0:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    1ca4:	c8bd4070 	popgt	{r4, r5, r6, lr}
    1ca8:	c12fff1e 	bxgt	lr
    1cac:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    1cb0:	e3a0e000 	mov	lr, #0
    1cb4:	e2544001 	subs	r4, r4, #1
    1cb8:	eaffff31 	b	1984 <__aeabi_dmul+0xec>
    1cbc:	e185e006 	orr	lr, r5, r6
    1cc0:	eaffff2f 	b	1984 <__aeabi_dmul+0xec>
    1cc4:	e00c5a23 	and	r5, r12, r3, lsr #20
    1cc8:	e134000c 	teq	r4, r12
    1ccc:	0135000c 	teqeq	r5, r12
    1cd0:	0affff90 	beq	1b18 <__aeabi_dmul+0x280>
    1cd4:	e134000c 	teq	r4, r12
    1cd8:	1a000006 	bne	1cf8 <__aeabi_ddiv+0x1d0>
    1cdc:	e1904601 	orrs	r4, r0, r1, lsl #12
    1ce0:	1affff8c 	bne	1b18 <__aeabi_dmul+0x280>
    1ce4:	e135000c 	teq	r5, r12
    1ce8:	1affff83 	bne	1afc <__aeabi_dmul+0x264>
    1cec:	e1a00002 	mov	r0, r2
    1cf0:	e1a01003 	mov	r1, r3
    1cf4:	eaffff87 	b	1b18 <__aeabi_dmul+0x280>
    1cf8:	e135000c 	teq	r5, r12
    1cfc:	1a000004 	bne	1d14 <__aeabi_ddiv+0x1ec>
    1d00:	e1925603 	orrs	r5, r2, r3, lsl #12
    1d04:	0affff68 	beq	1aac <__aeabi_dmul+0x214>
    1d08:	e1a00002 	mov	r0, r2
    1d0c:	e1a01003 	mov	r1, r3
    1d10:	eaffff80 	b	1b18 <__aeabi_dmul+0x280>
    1d14:	e1906081 	orrs	r6, r0, r1, lsl #1
    1d18:	11926083 	orrsne	r6, r2, r3, lsl #1
    1d1c:	1affff48 	bne	1a44 <__aeabi_dmul+0x1ac>
    1d20:	e1904081 	orrs	r4, r0, r1, lsl #1
    1d24:	1affff74 	bne	1afc <__aeabi_dmul+0x264>
    1d28:	e1925083 	orrs	r5, r2, r3, lsl #1
    1d2c:	1affff5e 	bne	1aac <__aeabi_dmul+0x214>
    1d30:	eaffff78 	b	1b18 <__aeabi_dmul+0x280>

00001d34 <__aeabi_d2iz>:
    1d34:	e1a02081 	lsl	r2, r1, #1
    1d38:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    1d3c:	2a00000c 	bcs	1d74 <__aeabi_d2iz+0x40>
    1d40:	5a000009 	bpl	1d6c <__aeabi_d2iz+0x38>
    1d44:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    1d48:	e0532ac2 	subs	r2, r3, r2, asr #21
    1d4c:	9a00000a 	bls	1d7c <__aeabi_d2iz+0x48>
    1d50:	e1a03581 	lsl	r3, r1, #11
    1d54:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    1d58:	e1833aa0 	orr	r3, r3, r0, lsr #21
    1d5c:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    1d60:	e1a00233 	lsr	r0, r3, r2
    1d64:	12600000 	rsbne	r0, r0, #0
    1d68:	e12fff1e 	bx	lr
    1d6c:	e3a00000 	mov	r0, #0
    1d70:	e12fff1e 	bx	lr
    1d74:	e1900601 	orrs	r0, r0, r1, lsl #12
    1d78:	1a000002 	bne	1d88 <__aeabi_d2iz+0x54>
    1d7c:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
    1d80:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    1d84:	e12fff1e 	bx	lr
    1d88:	e3a00000 	mov	r0, #0
    1d8c:	e12fff1e 	bx	lr

00001d90 <atexit>:
    1d90:	e1a01000 	mov	r1, r0
    1d94:	e3a00000 	mov	r0, #0
    1d98:	e92d4008 	push	{r3, lr}
    1d9c:	e1a02000 	mov	r2, r0
    1da0:	e1a03000 	mov	r3, r0
    1da4:	eb00000e 	bl	1de4 <__register_exitproc>
    1da8:	e8bd4008 	pop	{r3, lr}
    1dac:	e12fff1e 	bx	lr

00001db0 <exit>:
    1db0:	e92d4008 	push	{r3, lr}
    1db4:	e3a01000 	mov	r1, #0
    1db8:	e1a04000 	mov	r4, r0
    1dbc:	eb000045 	bl	1ed8 <__call_exitprocs>
    1dc0:	e59f3018 	ldr	r3, [pc, #24]	; 1de0 <exit+0x30>
    1dc4:	e5930000 	ldr	r0, [r3]
    1dc8:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    1dcc:	e3530000 	cmp	r3, #0
    1dd0:	11a0e00f 	movne	lr, pc
    1dd4:	112fff13 	bxne	r3
    1dd8:	e1a00004 	mov	r0, r4
    1ddc:	eb0000c9 	bl	2108 <_exit>
    1de0:	000021b8 	.word	0x000021b8

00001de4 <__register_exitproc>:
    1de4:	e59fc0e4 	ldr	r12, [pc, #228]	; 1ed0 <__register_exitproc+0xec>
    1de8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    1dec:	e59c4000 	ldr	r4, [r12]
    1df0:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    1df4:	e35c0000 	cmp	r12, #0
    1df8:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    1dfc:	e59c5004 	ldr	r5, [r12, #4]
    1e00:	0584c148 	streq	r12, [r4, #328]	; 0x148
    1e04:	e355001f 	cmp	r5, #31
    1e08:	e24dd010 	sub	sp, sp, #16
    1e0c:	e1a06000 	mov	r6, r0
    1e10:	da000015 	ble	1e6c <__register_exitproc+0x88>
    1e14:	e59f00b8 	ldr	r0, [pc, #184]	; 1ed4 <__register_exitproc+0xf0>
    1e18:	e3500000 	cmp	r0, #0
    1e1c:	1a000001 	bne	1e28 <__register_exitproc+0x44>
    1e20:	e3e00000 	mvn	r0, #0
    1e24:	ea000018 	b	1e8c <__register_exitproc+0xa8>
    1e28:	e3a00e19 	mov	r0, #400	; 0x190
    1e2c:	e58d100c 	str	r1, [sp, #12]
    1e30:	e58d2008 	str	r2, [sp, #8]
    1e34:	e58d3004 	str	r3, [sp, #4]
    1e38:	e320f000 	nop	{0}
    1e3c:	e250c000 	subs	r12, r0, #0
    1e40:	e59d100c 	ldr	r1, [sp, #12]
    1e44:	e59d2008 	ldr	r2, [sp, #8]
    1e48:	e59d3004 	ldr	r3, [sp, #4]
    1e4c:	0afffff3 	beq	1e20 <__register_exitproc+0x3c>
    1e50:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    1e54:	e3a00000 	mov	r0, #0
    1e58:	e58c0004 	str	r0, [r12, #4]
    1e5c:	e58c5000 	str	r5, [r12]
    1e60:	e584c148 	str	r12, [r4, #328]	; 0x148
    1e64:	e58c0188 	str	r0, [r12, #392]	; 0x188
    1e68:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    1e6c:	e3560000 	cmp	r6, #0
    1e70:	e59c4004 	ldr	r4, [r12, #4]
    1e74:	1a000007 	bne	1e98 <__register_exitproc+0xb4>
    1e78:	e2843002 	add	r3, r4, #2
    1e7c:	e2844001 	add	r4, r4, #1
    1e80:	e78c1103 	str	r1, [r12, r3, lsl #2]
    1e84:	e58c4004 	str	r4, [r12, #4]
    1e88:	e3a00000 	mov	r0, #0
    1e8c:	e28dd010 	add	sp, sp, #16
    1e90:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    1e94:	e12fff1e 	bx	lr
    1e98:	e3a00001 	mov	r0, #1
    1e9c:	e1a00410 	lsl	r0, r0, r4
    1ea0:	e08c8104 	add	r8, r12, r4, lsl #2
    1ea4:	e3560002 	cmp	r6, #2
    1ea8:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    1eac:	e5883108 	str	r3, [r8, #264]	; 0x108
    1eb0:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    1eb4:	e1877000 	orr	r7, r7, r0
    1eb8:	01830000 	orreq	r0, r3, r0
    1ebc:	e1a05008 	mov	r5, r8
    1ec0:	e5882088 	str	r2, [r8, #136]	; 0x88
    1ec4:	e58c7188 	str	r7, [r12, #392]	; 0x188
    1ec8:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    1ecc:	eaffffe9 	b	1e78 <__register_exitproc+0x94>
    1ed0:	000021b8 	.word	0x000021b8
    1ed4:	00000000 	.word	0x00000000

00001ed8 <__call_exitprocs>:
    1ed8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1edc:	e59f3168 	ldr	r3, [pc, #360]	; 204c <__call_exitprocs+0x174>
    1ee0:	e5933000 	ldr	r3, [r3]
    1ee4:	e24dd014 	sub	sp, sp, #20
    1ee8:	e58d3004 	str	r3, [sp, #4]
    1eec:	e2833f52 	add	r3, r3, #328	; 0x148
    1ef0:	e58d0008 	str	r0, [sp, #8]
    1ef4:	e58d300c 	str	r3, [sp, #12]
    1ef8:	e1a07001 	mov	r7, r1
    1efc:	e3a08001 	mov	r8, #1
    1f00:	e59d3004 	ldr	r3, [sp, #4]
    1f04:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    1f08:	e3560000 	cmp	r6, #0
    1f0c:	e59db00c 	ldr	r11, [sp, #12]
    1f10:	0a000033 	beq	1fe4 <__call_exitprocs+0x10c>
    1f14:	e5965004 	ldr	r5, [r6, #4]
    1f18:	e2554001 	subs	r4, r5, #1
    1f1c:	5286a088 	addpl	r10, r6, #136	; 0x88
    1f20:	5285501f 	addpl	r5, r5, #31
    1f24:	508a5105 	addpl	r5, r10, r5, lsl #2
    1f28:	5a000007 	bpl	1f4c <__call_exitprocs+0x74>
    1f2c:	ea000029 	b	1fd8 <__call_exitprocs+0x100>
    1f30:	e5953000 	ldr	r3, [r5]
    1f34:	e1530007 	cmp	r3, r7
    1f38:	0a000005 	beq	1f54 <__call_exitprocs+0x7c>
    1f3c:	e2444001 	sub	r4, r4, #1
    1f40:	e3740001 	cmn	r4, #1
    1f44:	e2455004 	sub	r5, r5, #4
    1f48:	0a000022 	beq	1fd8 <__call_exitprocs+0x100>
    1f4c:	e3570000 	cmp	r7, #0
    1f50:	1afffff6 	bne	1f30 <__call_exitprocs+0x58>
    1f54:	e5963004 	ldr	r3, [r6, #4]
    1f58:	e06a2005 	rsb	r2, r10, r5
    1f5c:	e2433001 	sub	r3, r3, #1
    1f60:	e0862002 	add	r2, r6, r2
    1f64:	e1530004 	cmp	r3, r4
    1f68:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    1f6c:	13a01000 	movne	r1, #0
    1f70:	05864004 	streq	r4, [r6, #4]
    1f74:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    1f78:	e3530000 	cmp	r3, #0
    1f7c:	0affffee 	beq	1f3c <__call_exitprocs+0x64>
    1f80:	e1a02418 	lsl	r2, r8, r4
    1f84:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    1f88:	e1120001 	tst	r2, r1
    1f8c:	e5969004 	ldr	r9, [r6, #4]
    1f90:	0a000016 	beq	1ff0 <__call_exitprocs+0x118>
    1f94:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    1f98:	e1120001 	tst	r2, r1
    1f9c:	1a000016 	bne	1ffc <__call_exitprocs+0x124>
    1fa0:	e59d0008 	ldr	r0, [sp, #8]
    1fa4:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    1fa8:	e1a0e00f 	mov	lr, pc
    1fac:	e12fff13 	bx	r3
    1fb0:	e5963004 	ldr	r3, [r6, #4]
    1fb4:	e1530009 	cmp	r3, r9
    1fb8:	1affffd0 	bne	1f00 <__call_exitprocs+0x28>
    1fbc:	e59b3000 	ldr	r3, [r11]
    1fc0:	e1530006 	cmp	r3, r6
    1fc4:	1affffcd 	bne	1f00 <__call_exitprocs+0x28>
    1fc8:	e2444001 	sub	r4, r4, #1
    1fcc:	e3740001 	cmn	r4, #1
    1fd0:	e2455004 	sub	r5, r5, #4
    1fd4:	1affffdc 	bne	1f4c <__call_exitprocs+0x74>
    1fd8:	e59f1070 	ldr	r1, [pc, #112]	; 2050 <__call_exitprocs+0x178>
    1fdc:	e3510000 	cmp	r1, #0
    1fe0:	1a000009 	bne	200c <__call_exitprocs+0x134>
    1fe4:	e28dd014 	add	sp, sp, #20
    1fe8:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1fec:	e12fff1e 	bx	lr
    1ff0:	e1a0e00f 	mov	lr, pc
    1ff4:	e12fff13 	bx	r3
    1ff8:	eaffffec 	b	1fb0 <__call_exitprocs+0xd8>
    1ffc:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    2000:	e1a0e00f 	mov	lr, pc
    2004:	e12fff13 	bx	r3
    2008:	eaffffe8 	b	1fb0 <__call_exitprocs+0xd8>
    200c:	e5963004 	ldr	r3, [r6, #4]
    2010:	e3530000 	cmp	r3, #0
    2014:	e5963000 	ldr	r3, [r6]
    2018:	1a000008 	bne	2040 <__call_exitprocs+0x168>
    201c:	e3530000 	cmp	r3, #0
    2020:	0a000006 	beq	2040 <__call_exitprocs+0x168>
    2024:	e1a00006 	mov	r0, r6
    2028:	e58b3000 	str	r3, [r11]
    202c:	e320f000 	nop	{0}
    2030:	e59b6000 	ldr	r6, [r11]
    2034:	e3560000 	cmp	r6, #0
    2038:	1affffb5 	bne	1f14 <__call_exitprocs+0x3c>
    203c:	eaffffe8 	b	1fe4 <__call_exitprocs+0x10c>
    2040:	e1a0b006 	mov	r11, r6
    2044:	e1a06003 	mov	r6, r3
    2048:	eafffff9 	b	2034 <__call_exitprocs+0x15c>
    204c:	000021b8 	.word	0x000021b8
    2050:	00000000 	.word	0x00000000

00002054 <register_fini>:
    2054:	e92d4008 	push	{r3, lr}
    2058:	e59f3010 	ldr	r3, [pc, #16]	; 2070 <register_fini+0x1c>
    205c:	e3530000 	cmp	r3, #0
    2060:	159f000c 	ldrne	r0, [pc, #12]	; 2074 <register_fini+0x20>
    2064:	1bffff49 	blne	1d90 <atexit>
    2068:	e8bd4008 	pop	{r3, lr}
    206c:	e12fff1e 	bx	lr
    2070:	000021e0 	.word	0x000021e0
    2074:	00002078 	.word	0x00002078

00002078 <__libc_fini_array>:
    2078:	e92d4038 	push	{r3, r4, r5, lr}
    207c:	e59f5030 	ldr	r5, [pc, #48]	; 20b4 <__libc_fini_array+0x3c>
    2080:	e59f4030 	ldr	r4, [pc, #48]	; 20b8 <__libc_fini_array+0x40>
    2084:	e0654004 	rsb	r4, r5, r4
    2088:	e1b04144 	asrs	r4, r4, #2
    208c:	10855104 	addne	r5, r5, r4, lsl #2
    2090:	0a000004 	beq	20a8 <__libc_fini_array+0x30>
    2094:	e5353004 	ldr	r3, [r5, #-4]!
    2098:	e1a0e00f 	mov	lr, pc
    209c:	e12fff13 	bx	r3
    20a0:	e2544001 	subs	r4, r4, #1
    20a4:	1afffffa 	bne	2094 <__libc_fini_array+0x1c>
    20a8:	eb00004c 	bl	21e0 <__libc_fini>
    20ac:	e8bd4038 	pop	{r3, r4, r5, lr}
    20b0:	e12fff1e 	bx	lr
    20b4:	000021f8 	.word	0x000021f8
    20b8:	000021fc 	.word	0x000021fc

000020bc <__cs3_premain>:
    20bc:	e92d4008 	push	{r3, lr}
    20c0:	eb000017 	bl	2124 <__libc_init_array>
    20c4:	e59f3030 	ldr	r3, [pc, #48]	; 20fc <__cs3_premain+0x40>
    20c8:	e3530000 	cmp	r3, #0
    20cc:	15930000 	ldrne	r0, [r3]
    20d0:	01a00003 	moveq	r0, r3
    20d4:	e59f3024 	ldr	r3, [pc, #36]	; 2100 <__cs3_premain+0x44>
    20d8:	e3530000 	cmp	r3, #0
    20dc:	15931000 	ldrne	r1, [r3]
    20e0:	01a01003 	moveq	r1, r3
    20e4:	e3a02000 	mov	r2, #0
    20e8:	ebfff87f 	bl	2ec <main>
    20ec:	e59f3010 	ldr	r3, [pc, #16]	; 2104 <__cs3_premain+0x48>
    20f0:	e3530000 	cmp	r3, #0
    20f4:	1bffff2d 	blne	1db0 <exit>
    20f8:	eafffffe 	b	20f8 <__cs3_premain+0x3c>
	...
    2104:	00001db0 	.word	0x00001db0

00002108 <_exit>:
    2108:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    210c:	e3a00018 	mov	r0, #24
    2110:	e59f1004 	ldr	r1, [pc, #4]	; 211c <_exit+0x14>
    2114:	ef123456 	svc	0x00123456
    2118:	eafffffe 	b	2118 <_exit+0x10>
    211c:	00020026 	.word	0x00020026

00002120 <__cs3_isr_interrupt>:
    2120:	eafffffe 	b	2120 <__cs3_isr_interrupt>

00002124 <__libc_init_array>:
    2124:	e92d4070 	push	{r4, r5, r6, lr}
    2128:	e59f506c 	ldr	r5, [pc, #108]	; 219c <__libc_init_array+0x78>
    212c:	e59f606c 	ldr	r6, [pc, #108]	; 21a0 <__libc_init_array+0x7c>
    2130:	e0656006 	rsb	r6, r5, r6
    2134:	e1b06146 	asrs	r6, r6, #2
    2138:	12455004 	subne	r5, r5, #4
    213c:	13a04000 	movne	r4, #0
    2140:	0a000005 	beq	215c <__libc_init_array+0x38>
    2144:	e5b53004 	ldr	r3, [r5, #4]!
    2148:	e2844001 	add	r4, r4, #1
    214c:	e1a0e00f 	mov	lr, pc
    2150:	e12fff13 	bx	r3
    2154:	e1560004 	cmp	r6, r4
    2158:	1afffff9 	bne	2144 <__libc_init_array+0x20>
    215c:	e59f5040 	ldr	r5, [pc, #64]	; 21a4 <__libc_init_array+0x80>
    2160:	e59f6040 	ldr	r6, [pc, #64]	; 21a8 <__libc_init_array+0x84>
    2164:	e0656006 	rsb	r6, r5, r6
    2168:	eb000014 	bl	21c0 <_init>
    216c:	e1b06146 	asrs	r6, r6, #2
    2170:	12455004 	subne	r5, r5, #4
    2174:	13a04000 	movne	r4, #0
    2178:	0a000005 	beq	2194 <__libc_init_array+0x70>
    217c:	e5b53004 	ldr	r3, [r5, #4]!
    2180:	e2844001 	add	r4, r4, #1
    2184:	e1a0e00f 	mov	lr, pc
    2188:	e12fff13 	bx	r3
    218c:	e1560004 	cmp	r6, r4
    2190:	1afffff9 	bne	217c <__libc_init_array+0x58>
    2194:	e8bd4070 	pop	{r4, r5, r6, lr}
    2198:	e12fff1e 	bx	lr
    219c:	000021d8 	.word	0x000021d8
    21a0:	000021d8 	.word	0x000021d8
    21a4:	000021d8 	.word	0x000021d8
    21a8:	000021e0 	.word	0x000021e0

Disassembly of section .rodata:

000021b0 <_global_impure_ptr-0x8>:
    21b0:	000000c7 	.word	0x000000c7
    21b4:	000000c8 	.word	0x000000c8

000021b8 <_global_impure_ptr>:
    21b8:	00031020 00000043                        ...C...

000021c0 <_init>:
    21c0:	e1a0c00d 	mov	r12, sp
    21c4:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    21c8:	e24cb004 	sub	r11, r12, #4
    21cc:	e24bd028 	sub	sp, r11, #40	; 0x28
    21d0:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    21d4:	e12fff1e 	bx	lr

000021d8 <__init_array_start>:
    21d8:	00002054 	.word	0x00002054

000021dc <__frame_dummy_init_array_entry>:
    21dc:	00000208                                ....

000021e0 <__libc_fini>:
    21e0:	e1a0c00d 	mov	r12, sp
    21e4:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    21e8:	e24cb004 	sub	r11, r12, #4
    21ec:	e24bd028 	sub	sp, r11, #40	; 0x28
    21f0:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    21f4:	e12fff1e 	bx	lr

000021f8 <__fini_array_start>:
    21f8:	000001c4 	.word	0x000001c4

000021fc <__cs3_regions>:
	...
    2208:	00031450 	.word	0x00031450
    220c:	00000020 	.word	0x00000020


C:/Users/garre/OneDrive/Documents/GitHub/ECSE-324-Lab/G37_Lab5/main.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
       0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      20:	ec 14 00 00 f8 14 00 00 04 15 00 00 10 15 00 00     ................
      30:	1c 15 00 00 5c 26 00 00 94 13 00 00 28 15 00 00     ....\&......(...

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb000947 	bl	25f8 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	0000274c 	.word	0x0000274c

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <ICDISER+0x18>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <ICDISER+0x1c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <ICDISER+0x20>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00031988 	.word	0x00031988

00000124 <__cs3_heap_start_ptr>:
     124:	000319b0 	.word	0x000319b0

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00031990 	.word	0x00031990
     170:	00031993 	.word	0x00031993
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <ICDICER+0x38>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <ICDICER+0x3c>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <ICDICER+0x20>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <ICDICER+0x40>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <ICDICER+0x18>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <ICDICER+0x18>
     1b8:	00031990 	.word	0x00031990
     1bc:	00031990 	.word	0x00031990
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00031990 	.word	0x00031990
     200:	00000000 	.word	0x00000000
     204:	000026e8 	.word	0x000026e8

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	000026e8 	.word	0x000026e8
     250:	00031994 	.word	0x00031994
     254:	00002750 	.word	0x00002750
     258:	00000000 	.word	0x00000000

0000025c <generateSignal>:
#define B_FREQUENCY  246.942
//:
#define C2_FREQUENCY 261.626

// function to generate the output of a signal of a given frequency at a given time
int generateSignal(float frequency, double time) {
     25c:	e92d4800 	push	{r11, lr}
     260:	e28db004 	add	r11, sp, #4
     264:	e24dd018 	sub	sp, sp, #24
     268:	e50b0010 	str	r0, [r11, #-16]
     26c:	e14b21fc 	strd	r2, [r11, #-28]	; 0xffffffe4
    int index  = (int)(frequency * time) % 48000;
     270:	e51b0010 	ldr	r0, [r11, #-16]
     274:	eb0005a2 	bl	1904 <__aeabi_f2d>
     278:	e1a02000 	mov	r2, r0
     27c:	e1a03001 	mov	r3, r1
     280:	e1a00002 	mov	r0, r2
     284:	e1a01003 	mov	r1, r3
     288:	e14b21dc 	ldrd	r2, [r11, #-28]	; 0xffffffe4
     28c:	eb0005c9 	bl	19b8 <__aeabi_dmul>
     290:	e1a02000 	mov	r2, r0
     294:	e1a03001 	mov	r3, r1
     298:	e1a00002 	mov	r0, r2
     29c:	e1a01003 	mov	r1, r3
     2a0:	eb0006eb 	bl	1e54 <__aeabi_d2iz>
     2a4:	e1a03000 	mov	r3, r0
     2a8:	e30129f1 	movw	r2, #6641	; 0x19f1
     2ac:	e3402576 	movt	r2, #1398	; 0x576
     2b0:	e0c21392 	smull	r1, r2, r2, r3
     2b4:	e1a01542 	asr	r1, r2, #10
     2b8:	e1a02fc3 	asr	r2, r3, #31
     2bc:	e0622001 	rsb	r2, r2, r1
     2c0:	e30b1b80 	movw	r1, #48000	; 0xbb80
     2c4:	e0020291 	mul	r2, r1, r2
     2c8:	e0623003 	rsb	r3, r2, r3
     2cc:	e50b3008 	str	r3, [r11, #-8]

    //calling subroutine wave-table
    return sine[index];
     2d0:	e3023758 	movw	r3, #10072	; 0x2758
     2d4:	e3403000 	movt	r3, #0
     2d8:	e51b2008 	ldr	r2, [r11, #-8]
     2dc:	e7933102 	ldr	r3, [r3, r2, lsl #2]
}
     2e0:	e1a00003 	mov	r0, r3
     2e4:	e24bd004 	sub	sp, r11, #4
     2e8:	e8bd8800 	pop	{r11, pc}

000002ec <main>:

int main() {
     2ec:	e92d4800 	push	{r11, lr}
     2f0:	e28db004 	add	r11, sp, #4
     2f4:	e24dd078 	sub	sp, sp, #120	; 0x78

    // interuppt ID of TIM0 & TIM1
	int_setup(2, (int []){199, 200});
     2f8:	e30236ec 	movw	r3, #9964	; 0x26ec
     2fc:	e3403000 	movt	r3, #0
     300:	e24b2048 	sub	r2, r11, #72	; 0x48
     304:	e8930003 	ldm	r3, {r0, r1}
     308:	e8820003 	stm	r2, {r0, r1}
     30c:	e24b3048 	sub	r3, r11, #72	; 0x48
     310:	e3a00002 	mov	r0, #2
     314:	e1a01003 	mov	r1, r3
     318:	eb000491 	bl	1564 <int_setup>

	long time = 0;
     31c:	e3a03000 	mov	r3, #0
     320:	e50b3008 	str	r3, [r11, #-8]
    // a struct that is used to configure the different parameters of the HPS time (Tim for our audio)
	HPS_TIM_config_t hps_tim_audio;

	hps_tim_audio.tim = TIM0;
     324:	e3a03001 	mov	r3, #1
     328:	e54b3060 	strb	r3, [r11, #-96]	; 0xffffffa0
	hps_tim_audio.timeout = 10; // in microsec (faster than keyboerd)
     32c:	e3a0300a 	mov	r3, #10
     330:	e50b305c 	str	r3, [r11, #-92]	; 0xffffffa4
	hps_tim_audio.LD_en = 1; // set to 1 to achieve the desired timeout, or 0 for maximum count of tim
     334:	e3a03001 	mov	r3, #1
     338:	e50b3058 	str	r3, [r11, #-88]	; 0xffffffa8
	hps_tim_audio.INT_en = 1; // set to 1 to enable interrupts, or 0 to disable interrupt
     33c:	e3a03001 	mov	r3, #1
     340:	e50b3054 	str	r3, [r11, #-84]	; 0xffffffac
	hps_tim_audio.enable = 1; // set to 1 to activate the desired timers, or 0 to deactivate them
     344:	e3a03001 	mov	r3, #1
     348:	e50b3050 	str	r3, [r11, #-80]	; 0xffffffb0
    
    // configures the timer instances according to the configuration struct stored at the address in argument param. 
    // multiple timers can be configured via the same struct, and the driver handles the different hardware abstractions internally.
	HPS_TIM_config_ASM(&hps_tim_audio);
     34c:	e24b3060 	sub	r3, r11, #96	; 0x60
     350:	e1a00003 	mov	r0, r3
     354:	eb0001ac 	bl	a0c <HPS_TIM_config_ASM>

    // setting the TIM for keyboard
	HPS_TIM_config_t hps_tim_keyboard;

	hps_tim_keyboard.tim = TIM1;
     358:	e3a03002 	mov	r3, #2
     35c:	e54b3078 	strb	r3, [r11, #-120]	; 0xffffff88
	hps_tim_keyboard.timeout = 20000;
     360:	e3043e20 	movw	r3, #20000	; 0x4e20
     364:	e50b3074 	str	r3, [r11, #-116]	; 0xffffff8c
	hps_tim_keyboard.LD_en = 1;
     368:	e3a03001 	mov	r3, #1
     36c:	e50b3070 	str	r3, [r11, #-112]	; 0xffffff90
	hps_tim_keyboard.INT_en = 1;
     370:	e3a03001 	mov	r3, #1
     374:	e50b306c 	str	r3, [r11, #-108]	; 0xffffff94
	hps_tim_keyboard.enable = 1;
     378:	e3a03001 	mov	r3, #1
     37c:	e50b3068 	str	r3, [r11, #-104]	; 0xffffff98
    
    HPS_TIM_config_ASM(&hps_tim_keyboard);
     380:	e24b3078 	sub	r3, r11, #120	; 0x78
     384:	e1a00003 	mov	r0, r3
     388:	eb00019f 	bl	a0c <HPS_TIM_config_ASM>
    
    int amplitude = 100; //MAX volume
     38c:	e3a03064 	mov	r3, #100	; 0x64
     390:	e50b300c 	str	r3, [r11, #-12]

	int a_pressed = 0;
     394:	e3a03000 	mov	r3, #0
     398:	e50b3010 	str	r3, [r11, #-16]
	int s_pressed = 0;
     39c:	e3a03000 	mov	r3, #0
     3a0:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	int d_pressed = 0;
     3a4:	e3a03000 	mov	r3, #0
     3a8:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
	int f_pressed = 0;
     3ac:	e3a03000 	mov	r3, #0
     3b0:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
	int j_pressed = 0;
     3b4:	e3a03000 	mov	r3, #0
     3b8:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	int k_pressed = 0;
     3bc:	e3a03000 	mov	r3, #0
     3c0:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
	int l_pressed = 0;
     3c4:	e3a03000 	mov	r3, #0
     3c8:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
	int semi_pressed = 0;
     3cc:	e3a03000 	mov	r3, #0
     3d0:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4

	VGA_clear_pixelbuff_ASM();
     3d4:	eb00032f 	bl	1098 <VGA_clear_pixelbuff_ASM>

	char *key_data = 0;
     3d8:	e3a03000 	mov	r3, #0
     3dc:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4
	float x = 0;
     3e0:	e3a03000 	mov	r3, #0
     3e4:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
    int color = 0;
     3e8:	e3a03000 	mov	r3, #0
     3ec:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
     3f0:	ea000000 	b	3f8 <main+0x10c>
				int y = (double)(sample) / (10000000.0) + 120; //+120 to be in middle of screen //removed 2 zero
				VGA_draw_point_ASM(x, y, color++);
                
			}
		}
	}
     3f4:	e1a00000 	nop			; (mov r0, r0)
	float x = 0;
    int color = 0;
	

    while(1) {
        long sample =0;
     3f8:	e3a03000 	mov	r3, #0
     3fc:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
        if(hps_tim1_int_flag){
     400:	e3003b38 	movw	r3, #2872	; 0xb38
     404:	e3403000 	movt	r3, #0
     408:	e5933000 	ldr	r3, [r3]
     40c:	e3530000 	cmp	r3, #0
     410:	0a000091 	beq	65c <main+0x370>
			hps_tim1_int_flag = 0;
     414:	e3003b38 	movw	r3, #2872	; 0xb38
     418:	e3403000 	movt	r3, #0
     41c:	e3a02000 	mov	r2, #0
     420:	e5832000 	str	r2, [r3]
            
             // If there is valid data in the PS/2 FIFO, the value in the data field of the PS2_Dataregister is stored 
            //at the address pointed to by the argument char pointer data, and the function returns a value of 1.
           // If there is no valid data in the PS/2 FIFO, the function simply return 0
			if(read_ps2_data_ASM(key_data)){
     424:	e51b003c 	ldr	r0, [r11, #-60]	; 0xffffffc4
     428:	eb00028d 	bl	e64 <read_ps2_data_ASM>
     42c:	e1a03000 	mov	r3, r0
     430:	e3530000 	cmp	r3, #0
     434:	0a000088 	beq	65c <main+0x370>
                //PS2 Keyboard Scan Codes(make code)
                if (*key_data == 0x1C) { a_pressed = 1; }
     438:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
     43c:	e5d33000 	ldrb	r3, [r3]
     440:	e353001c 	cmp	r3, #28
     444:	1a000002 	bne	454 <main+0x168>
     448:	e3a03001 	mov	r3, #1
     44c:	e50b3010 	str	r3, [r11, #-16]
     450:	ea000081 	b	65c <main+0x370>
                else if (*key_data == 0x1B) { s_pressed = 1; }
     454:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
     458:	e5d33000 	ldrb	r3, [r3]
     45c:	e353001b 	cmp	r3, #27
     460:	1a000002 	bne	470 <main+0x184>
     464:	e3a03001 	mov	r3, #1
     468:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
     46c:	ea00007a 	b	65c <main+0x370>
                else if (*key_data == 0x23) { d_pressed = 1; }
     470:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
     474:	e5d33000 	ldrb	r3, [r3]
     478:	e3530023 	cmp	r3, #35	; 0x23
     47c:	1a000002 	bne	48c <main+0x1a0>
     480:	e3a03001 	mov	r3, #1
     484:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
     488:	ea000073 	b	65c <main+0x370>
                else if (*key_data == 0x2B) { f_pressed = 1; }
     48c:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
     490:	e5d33000 	ldrb	r3, [r3]
     494:	e353002b 	cmp	r3, #43	; 0x2b
     498:	1a000002 	bne	4a8 <main+0x1bc>
     49c:	e3a03001 	mov	r3, #1
     4a0:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
     4a4:	ea00006c 	b	65c <main+0x370>
                else if (*key_data == 0x3B) { j_pressed = 1; }
     4a8:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
     4ac:	e5d33000 	ldrb	r3, [r3]
     4b0:	e353003b 	cmp	r3, #59	; 0x3b
     4b4:	1a000002 	bne	4c4 <main+0x1d8>
     4b8:	e3a03001 	mov	r3, #1
     4bc:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
     4c0:	ea000065 	b	65c <main+0x370>
                else if (*key_data == 0x42) { k_pressed = 1; }
     4c4:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
     4c8:	e5d33000 	ldrb	r3, [r3]
     4cc:	e3530042 	cmp	r3, #66	; 0x42
     4d0:	1a000002 	bne	4e0 <main+0x1f4>
     4d4:	e3a03001 	mov	r3, #1
     4d8:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
     4dc:	ea00005e 	b	65c <main+0x370>
                else if (*key_data == 0x4B) { l_pressed = 1; }
     4e0:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
     4e4:	e5d33000 	ldrb	r3, [r3]
     4e8:	e353004b 	cmp	r3, #75	; 0x4b
     4ec:	1a000002 	bne	4fc <main+0x210>
     4f0:	e3a03001 	mov	r3, #1
     4f4:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
     4f8:	ea000057 	b	65c <main+0x370>
                else if (*key_data == 0x4C) { semi_pressed = 1; }
     4fc:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
     500:	e5d33000 	ldrb	r3, [r3]
     504:	e353004c 	cmp	r3, #76	; 0x4c
     508:	1a000002 	bne	518 <main+0x22c>
     50c:	e3a03001 	mov	r3, #1
     510:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
     514:	ea000050 	b	65c <main+0x370>
                //to turn volume up or down  
                else if (*key_data == 0x55) { amplitude += 10; } // increase volume
     518:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
     51c:	e5d33000 	ldrb	r3, [r3]
     520:	e3530055 	cmp	r3, #85	; 0x55
     524:	1a000003 	bne	538 <main+0x24c>
     528:	e51b300c 	ldr	r3, [r11, #-12]
     52c:	e283300a 	add	r3, r3, #10
     530:	e50b300c 	str	r3, [r11, #-12]
     534:	ea000048 	b	65c <main+0x370>
                else if (*key_data == 0x4E) { amplitude -= 10; } // decrease volume
     538:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
     53c:	e5d33000 	ldrb	r3, [r3]
     540:	e353004e 	cmp	r3, #78	; 0x4e
     544:	1a000003 	bne	558 <main+0x26c>
     548:	e51b300c 	ldr	r3, [r11, #-12]
     54c:	e243300a 	sub	r3, r3, #10
     550:	e50b300c 	str	r3, [r11, #-12]
     554:	ea000040 	b	65c <main+0x370>
                
                //break code once the key is realesed set is_pressed to zero
                else if (*key_data == 0xF0){
     558:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
     55c:	e5d33000 	ldrb	r3, [r3]
     560:	e35300f0 	cmp	r3, #240	; 0xf0
     564:	1a00003c 	bne	65c <main+0x370>
                    while(!read_ps2_data_ASM(key_data));
     568:	e1a00000 	nop			; (mov r0, r0)
     56c:	e51b003c 	ldr	r0, [r11, #-60]	; 0xffffffc4
     570:	eb00023b 	bl	e64 <read_ps2_data_ASM>
     574:	e1a03000 	mov	r3, r0
     578:	e3530000 	cmp	r3, #0
     57c:	0afffffa 	beq	56c <main+0x280>

                    if      (*key_data == 0x1C) { a_pressed = 0; }
     580:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
     584:	e5d33000 	ldrb	r3, [r3]
     588:	e353001c 	cmp	r3, #28
     58c:	1a000002 	bne	59c <main+0x2b0>
     590:	e3a03000 	mov	r3, #0
     594:	e50b3010 	str	r3, [r11, #-16]
     598:	ea00002f 	b	65c <main+0x370>
                    else if (*key_data == 0x1B) { s_pressed = 0; }
     59c:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
     5a0:	e5d33000 	ldrb	r3, [r3]
     5a4:	e353001b 	cmp	r3, #27
     5a8:	1a000002 	bne	5b8 <main+0x2cc>
     5ac:	e3a03000 	mov	r3, #0
     5b0:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
     5b4:	ea000028 	b	65c <main+0x370>
                    else if (*key_data == 0x23) { d_pressed = 0; }
     5b8:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
     5bc:	e5d33000 	ldrb	r3, [r3]
     5c0:	e3530023 	cmp	r3, #35	; 0x23
     5c4:	1a000002 	bne	5d4 <main+0x2e8>
     5c8:	e3a03000 	mov	r3, #0
     5cc:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
     5d0:	ea000021 	b	65c <main+0x370>
                    else if (*key_data == 0x2B) { f_pressed = 0; }
     5d4:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
     5d8:	e5d33000 	ldrb	r3, [r3]
     5dc:	e353002b 	cmp	r3, #43	; 0x2b
     5e0:	1a000002 	bne	5f0 <main+0x304>
     5e4:	e3a03000 	mov	r3, #0
     5e8:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
     5ec:	ea00001a 	b	65c <main+0x370>
                    else if (*key_data == 0x3B) { j_pressed = 0; }
     5f0:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
     5f4:	e5d33000 	ldrb	r3, [r3]
     5f8:	e353003b 	cmp	r3, #59	; 0x3b
     5fc:	1a000002 	bne	60c <main+0x320>
     600:	e3a03000 	mov	r3, #0
     604:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
     608:	ea000013 	b	65c <main+0x370>
                    else if (*key_data == 0x42) { k_pressed = 0; }
     60c:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
     610:	e5d33000 	ldrb	r3, [r3]
     614:	e3530042 	cmp	r3, #66	; 0x42
     618:	1a000002 	bne	628 <main+0x33c>
     61c:	e3a03000 	mov	r3, #0
     620:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
     624:	ea00000c 	b	65c <main+0x370>
                    else if (*key_data == 0x4B) { l_pressed = 0; }
     628:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
     62c:	e5d33000 	ldrb	r3, [r3]
     630:	e353004b 	cmp	r3, #75	; 0x4b
     634:	1a000002 	bne	644 <main+0x358>
     638:	e3a03000 	mov	r3, #0
     63c:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
     640:	ea000005 	b	65c <main+0x370>
                    else if (*key_data == 0x4C) { semi_pressed = 0; }
     644:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
     648:	e5d33000 	ldrb	r3, [r3]
     64c:	e353004c 	cmp	r3, #76	; 0x4c
     650:	1a000001 	bne	65c <main+0x370>
     654:	e3a03000 	mov	r3, #0
     658:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
                }
            }
		}

        	if(hps_tim0_int_flag){
     65c:	e3003b34 	movw	r3, #2868	; 0xb34
     660:	e3403000 	movt	r3, #0
     664:	e5933000 	ldr	r3, [r3]
     668:	e3530000 	cmp	r3, #0
     66c:	0affff60 	beq	3f4 <main+0x108>
			hps_tim0_int_flag = 0;
     670:	e3003b34 	movw	r3, #2868	; 0xb34
     674:	e3403000 	movt	r3, #0
     678:	e3a02000 	mov	r2, #0
     67c:	e5832000 	str	r2, [r3]

			if(a_pressed) {
     680:	e51b3010 	ldr	r3, [r11, #-16]
     684:	e3530000 	cmp	r3, #0
     688:	0a00000a 	beq	6b8 <main+0x3cc>
				sample += generateSignal(C_FREQUENCY, time);
     68c:	e51b0008 	ldr	r0, [r11, #-8]
     690:	eb000491 	bl	18dc <__aeabi_i2d>
     694:	e1a02000 	mov	r2, r0
     698:	e1a03001 	mov	r3, r1
     69c:	e30d0021 	movw	r0, #53281	; 0xd021
     6a0:	e3440302 	movt	r0, #17154	; 0x4302
     6a4:	ebfffeec 	bl	25c <generateSignal>
     6a8:	e1a03000 	mov	r3, r0
     6ac:	e51b2038 	ldr	r2, [r11, #-56]	; 0xffffffc8
     6b0:	e0823003 	add	r3, r2, r3
     6b4:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
			}
			if(s_pressed) {
     6b8:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     6bc:	e3530000 	cmp	r3, #0
     6c0:	0a00000a 	beq	6f0 <main+0x404>
				sample += generateSignal(D_FREQUENCY, time);
     6c4:	e51b0008 	ldr	r0, [r11, #-8]
     6c8:	eb000483 	bl	18dc <__aeabi_i2d>
     6cc:	e1a02000 	mov	r2, r0
     6d0:	e1a03001 	mov	r3, r1
     6d4:	e30d04fe 	movw	r0, #54526	; 0xd4fe
     6d8:	e3440312 	movt	r0, #17170	; 0x4312
     6dc:	ebfffede 	bl	25c <generateSignal>
     6e0:	e1a03000 	mov	r3, r0
     6e4:	e51b2038 	ldr	r2, [r11, #-56]	; 0xffffffc8
     6e8:	e0823003 	add	r3, r2, r3
     6ec:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
			}
			if(d_pressed) {
     6f0:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     6f4:	e3530000 	cmp	r3, #0
     6f8:	0a00000a 	beq	728 <main+0x43c>
				sample += generateSignal(E_FREQUENCY, time);
     6fc:	e51b0008 	ldr	r0, [r11, #-8]
     700:	eb000475 	bl	18dc <__aeabi_i2d>
     704:	e1a02000 	mov	r2, r0
     708:	e1a03001 	mov	r3, r1
     70c:	e30d0062 	movw	r0, #53346	; 0xd062
     710:	e3440324 	movt	r0, #17188	; 0x4324
     714:	ebfffed0 	bl	25c <generateSignal>
     718:	e1a03000 	mov	r3, r0
     71c:	e51b2038 	ldr	r2, [r11, #-56]	; 0xffffffc8
     720:	e0823003 	add	r3, r2, r3
     724:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
			}
			if(f_pressed) {
     728:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     72c:	e3530000 	cmp	r3, #0
     730:	0a00000a 	beq	760 <main+0x474>
				sample += generateSignal(F_FREQUENCY, time);
     734:	e51b0008 	ldr	r0, [r11, #-8]
     738:	eb000467 	bl	18dc <__aeabi_i2d>
     73c:	e1a02000 	mov	r2, r0
     740:	e1a03001 	mov	r3, r1
     744:	e3090d2f 	movw	r0, #40239	; 0x9d2f
     748:	e344032e 	movt	r0, #17198	; 0x432e
     74c:	ebfffec2 	bl	25c <generateSignal>
     750:	e1a03000 	mov	r3, r0
     754:	e51b2038 	ldr	r2, [r11, #-56]	; 0xffffffc8
     758:	e0823003 	add	r3, r2, r3
     75c:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
			}
			if(j_pressed) {
     760:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     764:	e3530000 	cmp	r3, #0
     768:	0a00000a 	beq	798 <main+0x4ac>
				sample += generateSignal(G_FREQUENCY, time);
     76c:	e51b0008 	ldr	r0, [r11, #-8]
     770:	eb000459 	bl	18dc <__aeabi_i2d>
     774:	e1a02000 	mov	r2, r0
     778:	e1a03001 	mov	r3, r1
     77c:	e30f0f7d 	movw	r0, #65405	; 0xff7d
     780:	e3440343 	movt	r0, #17219	; 0x4343
     784:	ebfffeb4 	bl	25c <generateSignal>
     788:	e1a03000 	mov	r3, r0
     78c:	e51b2038 	ldr	r2, [r11, #-56]	; 0xffffffc8
     790:	e0823003 	add	r3, r2, r3
     794:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
			}
			if(k_pressed) {
     798:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
     79c:	e3530000 	cmp	r3, #0
     7a0:	0a00000a 	beq	7d0 <main+0x4e4>
				sample += generateSignal(A_FREQUENCY, time);
     7a4:	e51b0008 	ldr	r0, [r11, #-8]
     7a8:	eb00044b 	bl	18dc <__aeabi_i2d>
     7ac:	e1a02000 	mov	r2, r0
     7b0:	e1a03001 	mov	r3, r1
     7b4:	e3a00000 	mov	r0, #0
     7b8:	e344035c 	movt	r0, #17244	; 0x435c
     7bc:	ebfffea6 	bl	25c <generateSignal>
     7c0:	e1a03000 	mov	r3, r0
     7c4:	e51b2038 	ldr	r2, [r11, #-56]	; 0xffffffc8
     7c8:	e0823003 	add	r3, r2, r3
     7cc:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
			}
			if(l_pressed) {
     7d0:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
     7d4:	e3530000 	cmp	r3, #0
     7d8:	0a00000a 	beq	808 <ICDIPTR+0x8>
				sample += generateSignal(B_FREQUENCY, time);
     7dc:	e51b0008 	ldr	r0, [r11, #-8]
     7e0:	eb00043d 	bl	18dc <__aeabi_i2d>
     7e4:	e1a02000 	mov	r2, r0
     7e8:	e1a03001 	mov	r3, r1
     7ec:	e30f0127 	movw	r0, #61735	; 0xf127
     7f0:	e3440376 	movt	r0, #17270	; 0x4376
     7f4:	ebfffe98 	bl	25c <generateSignal>
     7f8:	e1a03000 	mov	r3, r0
     7fc:	e51b2038 	ldr	r2, [r11, #-56]	; 0xffffffc8
     800:	e0823003 	add	r3, r2, r3
     804:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
			}
			if(semi_pressed) {
     808:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
     80c:	e3530000 	cmp	r3, #0
     810:	0a00000a 	beq	840 <ICDIPTR+0x40>
				sample += generateSignal(C2_FREQUENCY, time);
     814:	e51b0008 	ldr	r0, [r11, #-8]
     818:	eb00042f 	bl	18dc <__aeabi_i2d>
     81c:	e1a02000 	mov	r2, r0
     820:	e1a03001 	mov	r3, r1
     824:	e30d0021 	movw	r0, #53281	; 0xd021
     828:	e3440382 	movt	r0, #17282	; 0x4382
     82c:	ebfffe8a 	bl	25c <generateSignal>
     830:	e1a03000 	mov	r3, r0
     834:	e51b2038 	ldr	r2, [r11, #-56]	; 0xffffffc8
     838:	e0823003 	add	r3, r2, r3
     83c:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
			}

            sample *= amplitude;
     840:	e51b3038 	ldr	r3, [r11, #-56]	; 0xffffffc8
     844:	e51b200c 	ldr	r2, [r11, #-12]
     848:	e0030392 	mul	r3, r2, r3
     84c:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
            
            // If there is space in both the left-channel and right-channel write FIFOs, then the value in the arguments leftdata and rightdata 
            //is written to the Leftdata and Rightdata registers respectively, and the function returns a value of 1.
           // If there is no space in either one of the FIFOs, the functions simply returns 0
			if(audio_write_data_ASM(sample, sample)) {
     850:	e51b0038 	ldr	r0, [r11, #-56]	; 0xffffffc8
     854:	e51b1038 	ldr	r1, [r11, #-56]	; 0xffffffc8
     858:	eb000110 	bl	ca0 <audio_write_data_ASM>
     85c:	e1a03000 	mov	r3, r0
     860:	e3530000 	cmp	r3, #0
     864:	0afffee2 	beq	3f4 <main+0x108>
				time++;
     868:	e51b3008 	ldr	r3, [r11, #-8]
     86c:	e2833001 	add	r3, r3, #1
     870:	e50b3008 	str	r3, [r11, #-8]

				if(time%20 == 0) { //draw every ~ 6 samples
     874:	e51b1008 	ldr	r1, [r11, #-8]
     878:	e3063667 	movw	r3, #26215	; 0x6667
     87c:	e3463666 	movt	r3, #26214	; 0x6666
     880:	e0c32193 	smull	r2, r3, r3, r1
     884:	e1a021c3 	asr	r2, r3, #3
     888:	e1a03fc1 	asr	r3, r1, #31
     88c:	e0632002 	rsb	r2, r3, r2
     890:	e1a03002 	mov	r3, r2
     894:	e1a03103 	lsl	r3, r3, #2
     898:	e0833002 	add	r3, r3, r2
     89c:	e1a03103 	lsl	r3, r3, #2
     8a0:	e0632001 	rsb	r2, r3, r1
     8a4:	e3520000 	cmp	r2, #0
     8a8:	1a00000e 	bne	8e8 <ICDIPTR+0xe8>
					x +=1;
     8ac:	e51b0030 	ldr	r0, [r11, #-48]	; 0xffffffd0
     8b0:	e3a015fe 	mov	r1, #1065353216	; 0x3f800000
     8b4:	eb000580 	bl	1ebc <__addsf3>
     8b8:	e1a03000 	mov	r3, r0
     8bc:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
					if(x > SCREEN_WIDTH) {
     8c0:	e51b0030 	ldr	r0, [r11, #-48]	; 0xffffffd0
     8c4:	e3a01000 	mov	r1, #0
     8c8:	e34413a0 	movt	r1, #17312	; 0x43a0
     8cc:	eb000661 	bl	2258 <__aeabi_fcmpgt>
     8d0:	e1a03000 	mov	r3, r0
     8d4:	e3530000 	cmp	r3, #0
     8d8:	0a000002 	beq	8e8 <ICDIPTR+0xe8>
						VGA_clear_pixelbuff_ASM();
     8dc:	eb0001ed 	bl	1098 <VGA_clear_pixelbuff_ASM>
						x = 0;
     8e0:	e3a03000 	mov	r3, #0
     8e4:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
					}
				}
				int y = (double)(sample) / (10000000.0) + 120; //+120 to be in middle of screen //removed 2 zero
     8e8:	e51b0038 	ldr	r0, [r11, #-56]	; 0xffffffc8
     8ec:	eb0003fa 	bl	18dc <__aeabi_i2d>
     8f0:	e1a02000 	mov	r2, r0
     8f4:	e1a03001 	mov	r3, r1
     8f8:	e1a00002 	mov	r0, r2
     8fc:	e1a01003 	mov	r1, r3
     900:	e3a02000 	mov	r2, #0
     904:	e30132d0 	movw	r3, #4816	; 0x12d0
     908:	e3443163 	movt	r3, #16739	; 0x4163
     90c:	eb0004cd 	bl	1c48 <__aeabi_ddiv>
     910:	e1a02000 	mov	r2, r0
     914:	e1a03001 	mov	r3, r1
     918:	e1a00002 	mov	r0, r2
     91c:	e1a01003 	mov	r1, r3
     920:	e3a02000 	mov	r2, #0
     924:	e3a03000 	mov	r3, #0
     928:	e344305e 	movt	r3, #16478	; 0x405e
     92c:	eb00031d 	bl	15a8 <__adddf3>
     930:	e1a02000 	mov	r2, r0
     934:	e1a03001 	mov	r3, r1
     938:	e1a00002 	mov	r0, r2
     93c:	e1a01003 	mov	r1, r3
     940:	eb000543 	bl	1e54 <__aeabi_d2iz>
     944:	e1a03000 	mov	r3, r0
     948:	e50b3040 	str	r3, [r11, #-64]	; 0xffffffc0
				VGA_draw_point_ASM(x, y, color++);
     94c:	e51b0030 	ldr	r0, [r11, #-48]	; 0xffffffd0
     950:	eb000646 	bl	2270 <__aeabi_f2iz>
     954:	e1a02000 	mov	r2, r0
     958:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
     95c:	e6ff3073 	uxth	r3, r3
     960:	e51b1034 	ldr	r1, [r11, #-52]	; 0xffffffcc
     964:	e2811001 	add	r1, r1, #1
     968:	e50b1034 	str	r1, [r11, #-52]	; 0xffffffcc
     96c:	e6bf3073 	sxth	r3, r3
     970:	e1a00002 	mov	r0, r2
     974:	e51b1040 	ldr	r1, [r11, #-64]	; 0xffffffc0
     978:	e1a02003 	mov	r2, r3
     97c:	eb0001f9 	bl	1168 <VGA_draw_point_ASM>
                
			}
		}
	}
     980:	eafffe9b 	b	3f4 <main+0x108>

00000984 <HEX_clear_ASM>:
     984:	e3a01000 	mov	r1, #0
     988:	ea000004 	b	9a0 <WRITE>

0000098c <HEX_flood_ASM>:
     98c:	e3a0107f 	mov	r1, #127	; 0x7f
     990:	ea000002 	b	9a0 <WRITE>

00000994 <HEX_write_ASM>:
     994:	e59f2064 	ldr	r2, [pc, #100]	; a00 <PATTERNS+0x14>
     998:	e7d21001 	ldrb	r1, [r2, r1]
     99c:	eaffffff 	b	9a0 <WRITE>

000009a0 <WRITE>:
     9a0:	e92d0030 	push	{r4, r5}
     9a4:	e59f2058 	ldr	r2, [pc, #88]	; a04 <PATTERNS+0x18>
     9a8:	e3a03000 	mov	r3, #0
     9ac:	e3e050ff 	mvn	r5, #255	; 0xff

000009b0 <LOOP>:
     9b0:	e3100001 	tst	r0, #1
     9b4:	0a000003 	beq	9c8 <CONTINUE>
     9b8:	e5924000 	ldr	r4, [r2]
     9bc:	e0044005 	and	r4, r4, r5
     9c0:	e1844001 	orr	r4, r4, r1
     9c4:	e5824000 	str	r4, [r2]

000009c8 <CONTINUE>:
     9c8:	e1a05c65 	ror	r5, r5, #24
     9cc:	e1a01c61 	ror	r1, r1, #24
     9d0:	e2833001 	add	r3, r3, #1
     9d4:	e3530004 	cmp	r3, #4
     9d8:	059f2028 	ldreq	r2, [pc, #40]	; a08 <PATTERNS+0x1c>
     9dc:	e1b000a0 	lsrs	r0, r0, #1
     9e0:	1afffff2 	bne	9b0 <LOOP>
     9e4:	e8bd0030 	pop	{r4, r5}
     9e8:	e12fff1e 	bx	lr

000009ec <PATTERNS>:
     9ec:	4f5b063f 	.word	0x4f5b063f
     9f0:	077d6d66 	.word	0x077d6d66
     9f4:	7c776f7f 	.word	0x7c776f7f
     9f8:	71795e39 	.word	0x71795e39
     9fc:	000000ff 	.word	0x000000ff
     a00:	000009ec 	.word	0x000009ec
     a04:	ff200020 	.word	0xff200020
     a08:	ff200030 	.word	0xff200030

00000a0c <HPS_TIM_config_ASM>:
     a0c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
     a10:	e3a01000 	mov	r1, #0
     a14:	e3a02001 	mov	r2, #1
     a18:	e5907000 	ldr	r7, [r0]
     a1c:	eaffffff 	b	a20 <LOOP>

00000a20 <LOOP>:
     a20:	e1170112 	tst	r7, r2, lsl r1
     a24:	0a000000 	beq	a2c <CONTINUE>
     a28:	eb000004 	bl	a40 <CONFIG>

00000a2c <CONTINUE>:
     a2c:	e2811001 	add	r1, r1, #1
     a30:	e3510004 	cmp	r1, #4
     a34:	bafffff9 	blt	a20 <LOOP>

00000a38 <DONE>:
     a38:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
     a3c:	e12fff1e 	bx	lr

00000a40 <CONFIG>:
     a40:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     a44:	e59f30e4 	ldr	r3, [pc, #228]	; b30 <HPS_TIM_BASE+0x10>
     a48:	e7934101 	ldr	r4, [r3, r1, lsl #2]
     a4c:	eb000005 	bl	a68 <DISABLE>
     a50:	eb000008 	bl	a78 <SET_LOAD_VAL>
     a54:	eb00000e 	bl	a94 <SET_LOAD_BIT>
     a58:	eb000013 	bl	aac <SET_INT_BIT>
     a5c:	eb000019 	bl	ac8 <SET_EN_BIT>
     a60:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     a64:	e12fff1e 	bx	lr

00000a68 <DISABLE>:
     a68:	e5945008 	ldr	r5, [r4, #8]
     a6c:	e3c55001 	bic	r5, r5, #1
     a70:	e5845008 	str	r5, [r4, #8]
     a74:	e12fff1e 	bx	lr

00000a78 <SET_LOAD_VAL>:
     a78:	e5905004 	ldr	r5, [r0, #4]
     a7c:	e3a06019 	mov	r6, #25
     a80:	e0050695 	mul	r5, r5, r6
     a84:	e3510002 	cmp	r1, #2
     a88:	b1a05105 	lsllt	r5, r5, #2
     a8c:	e5845000 	str	r5, [r4]
     a90:	e12fff1e 	bx	lr

00000a94 <SET_LOAD_BIT>:
     a94:	e5945008 	ldr	r5, [r4, #8]
     a98:	e5906008 	ldr	r6, [r0, #8]
     a9c:	e3c55002 	bic	r5, r5, #2
     aa0:	e1855086 	orr	r5, r5, r6, lsl #1
     aa4:	e5845008 	str	r5, [r4, #8]
     aa8:	e12fff1e 	bx	lr

00000aac <SET_INT_BIT>:
     aac:	e5945008 	ldr	r5, [r4, #8]
     ab0:	e590600c 	ldr	r6, [r0, #12]
     ab4:	e2266001 	eor	r6, r6, #1
     ab8:	e3c55004 	bic	r5, r5, #4
     abc:	e1855106 	orr	r5, r5, r6, lsl #2
     ac0:	e5845008 	str	r5, [r4, #8]
     ac4:	e12fff1e 	bx	lr

00000ac8 <SET_EN_BIT>:
     ac8:	e5945008 	ldr	r5, [r4, #8]
     acc:	e5906010 	ldr	r6, [r0, #16]
     ad0:	e3c55001 	bic	r5, r5, #1
     ad4:	e1855006 	orr	r5, r5, r6
     ad8:	e5845008 	str	r5, [r4, #8]
     adc:	e12fff1e 	bx	lr

00000ae0 <HPS_TIM_clear_INT_ASM>:
     ae0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     ae4:	e3a01000 	mov	r1, #0
     ae8:	e3a02001 	mov	r2, #1
     aec:	eaffffff 	b	af0 <INT_LOOP>

00000af0 <INT_LOOP>:
     af0:	e1100112 	tst	r0, r2, lsl r1
     af4:	0a000000 	beq	afc <INT_CONTINUE>
     af8:	eb000004 	bl	b10 <CLEAR_IT>

00000afc <INT_CONTINUE>:
     afc:	e2811001 	add	r1, r1, #1
     b00:	e3510004 	cmp	r1, #4
     b04:	bafffff9 	blt	af0 <INT_LOOP>

00000b08 <INT_DONE>:
     b08:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     b0c:	e12fff1e 	bx	lr

00000b10 <CLEAR_IT>:
     b10:	e59f3018 	ldr	r3, [pc, #24]	; b30 <HPS_TIM_BASE+0x10>
     b14:	e7933101 	ldr	r3, [r3, r1, lsl #2]
     b18:	e593300c 	ldr	r3, [r3, #12]
     b1c:	e12fff1e 	bx	lr

00000b20 <HPS_TIM_BASE>:
     b20:	ffc08000 	.word	0xffc08000
     b24:	ffc09000 	.word	0xffc09000
     b28:	ffd00000 	.word	0xffd00000
     b2c:	ffd01000 	.word	0xffd01000
     b30:	00000b20 	.word	0x00000b20

00000b34 <hps_tim0_int_flag>:
     b34:	00000000 	.word	0x00000000

00000b38 <hps_tim1_int_flag>:
     b38:	00000000 	.word	0x00000000

00000b3c <A9_PRIV_TIM_ISR>:

hps_tim1_int_flag:
	.word 0x0
	
A9_PRIV_TIM_ISR:
	BX LR
     b3c:	e12fff1e 	bx	lr

00000b40 <HPS_GPIO1_ISR>:
	
HPS_GPIO1_ISR:
	BX LR
     b40:	e12fff1e 	bx	lr

00000b44 <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:
	PUSH {LR}
     b44:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	MOV R0, #0x1 //moves the one-hot encoded value of the timer interrupt to clear
     b48:	e3a00001 	mov	r0, #1
	BL HPS_TIM_clear_INT_ASM //clears tim0's interrupt request bit
     b4c:	ebffffe3 	bl	ae0 <HPS_TIM_clear_INT_ASM>

	LDR R0, =hps_tim0_int_flag //loads the address of tim0's interrupt flag into R0
     b50:	e59f0058 	ldr	r0, [pc, #88]	; bb0 <FPGA_PS2_DUAL_ISR+0x4>
	MOV R1, #1 //moves 1 into R1 to store at the address in R0
     b54:	e3a01001 	mov	r1, #1
	STR R1, [R0] //sets hps_tim0_int_flag to 1
     b58:	e5801000 	str	r1, [r0]

	POP {LR}
     b5c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     b60:	e12fff1e 	bx	lr

00000b64 <HPS_TIM1_ISR>:
	
HPS_TIM1_ISR:
	PUSH {LR}
     b64:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	MOV R0, #0x2 //moves the one-hot encoded value of the timer interrupt to clear
     b68:	e3a00002 	mov	r0, #2
	BL HPS_TIM_clear_INT_ASM //clears tim1's interrupt request bit
     b6c:	ebffffdb 	bl	ae0 <HPS_TIM_clear_INT_ASM>

	LDR R0, =hps_tim1_int_flag //loads the address of tim1's interrupt flag into R1
     b70:	e59f003c 	ldr	r0, [pc, #60]	; bb4 <FPGA_PS2_DUAL_ISR+0x8>
	MOV R1, #1 //moves 1 into R1 to store at the address in R0
     b74:	e3a01001 	mov	r1, #1
	STR R1, [R0] //	sets hps_tim1_int_flag to 1
     b78:	e5801000 	str	r1, [r0]

	POP {LR}
     b7c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     b80:	e12fff1e 	bx	lr

00000b84 <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	BX LR
     b84:	e12fff1e 	bx	lr

00000b88 <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	BX LR
     b88:	e12fff1e 	bx	lr

00000b8c <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
     b8c:	e12fff1e 	bx	lr

00000b90 <FPGA_PB_KEYS_ISR>:
	
FPGA_PB_KEYS_ISR:
	BX LR
     b90:	e12fff1e 	bx	lr

00000b94 <FPGA_Audio_ISR>:
	
FPGA_Audio_ISR:
	BX LR
     b94:	e12fff1e 	bx	lr

00000b98 <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	BX LR
     b98:	e12fff1e 	bx	lr

00000b9c <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
     b9c:	e12fff1e 	bx	lr

00000ba0 <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
     ba0:	e12fff1e 	bx	lr

00000ba4 <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
     ba4:	e12fff1e 	bx	lr

00000ba8 <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
     ba8:	e12fff1e 	bx	lr

00000bac <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
     bac:	e12fff1e 	bx	lr
	PUSH {LR}
	
	MOV R0, #0x1 //moves the one-hot encoded value of the timer interrupt to clear
	BL HPS_TIM_clear_INT_ASM //clears tim0's interrupt request bit

	LDR R0, =hps_tim0_int_flag //loads the address of tim0's interrupt flag into R0
     bb0:	00000b34 	.word	0x00000b34
	PUSH {LR}
	
	MOV R0, #0x2 //moves the one-hot encoded value of the timer interrupt to clear
	BL HPS_TIM_clear_INT_ASM //clears tim1's interrupt request bit

	LDR R0, =hps_tim1_int_flag //loads the address of tim1's interrupt flag into R1
     bb4:	00000b38 	.word	0x00000b38

00000bb8 <read_LEDs_ASM>:
     bb8:	e59f1010 	ldr	r1, [pc, #16]	; bd0 <write_LEDs_ASM+0xc>
     bbc:	e5910000 	ldr	r0, [r1]
     bc0:	e12fff1e 	bx	lr

00000bc4 <write_LEDs_ASM>:
     bc4:	e59f1004 	ldr	r1, [pc, #4]	; bd0 <write_LEDs_ASM+0xc>
     bc8:	e5810000 	str	r0, [r1]
     bcc:	e12fff1e 	bx	lr
     bd0:	ff200000 	.word	0xff200000

00000bd4 <audio_read_data_ASM>:
     bd4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     bd8:	e92d0003 	push	{r0, r1}
     bdc:	eb000093 	bl	e30 <audio_read_ralc_ASM>
     be0:	e3500000 	cmp	r0, #0
     be4:	08bd0003 	popeq	{r0, r1}
     be8:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     bec:	03a00000 	moveq	r0, #0
     bf0:	012fff1e 	bxeq	lr
     bf4:	eb000092 	bl	e44 <audio_read_rarc_ASM>
     bf8:	e3500000 	cmp	r0, #0
     bfc:	08bd0003 	popeq	{r0, r1}
     c00:	03a00000 	moveq	r0, #0
     c04:	012fff1e 	bxeq	lr
     c08:	e8bd0003 	pop	{r0, r1}
     c0c:	e59f2240 	ldr	r2, [pc, #576]	; e54 <audio_read_rarc_ASM+0x10>
     c10:	e5922000 	ldr	r2, [r2]
     c14:	e5802000 	str	r2, [r0]
     c18:	e59f3238 	ldr	r3, [pc, #568]	; e58 <audio_read_rarc_ASM+0x14>
     c1c:	e5933000 	ldr	r3, [r3]
     c20:	e5813000 	str	r3, [r1]
     c24:	e3a00001 	mov	r0, #1

00000c28 <audio_read_leftdata_ASM>:
     c28:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     c2c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     c30:	eb00007e 	bl	e30 <audio_read_ralc_ASM>
     c34:	e3500000 	cmp	r0, #0
     c38:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     c3c:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     c40:	03a00000 	moveq	r0, #0
     c44:	012fff1e 	bxeq	lr
     c48:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     c4c:	e59f2200 	ldr	r2, [pc, #512]	; e54 <audio_read_rarc_ASM+0x10>
     c50:	e5922000 	ldr	r2, [r2]
     c54:	e5802000 	str	r2, [r0]
     c58:	e3a00001 	mov	r0, #1
     c5c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     c60:	e12fff1e 	bx	lr

00000c64 <audio_read_rightdata_ASM>:
     c64:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     c68:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     c6c:	eb000074 	bl	e44 <audio_read_rarc_ASM>
     c70:	e3500000 	cmp	r0, #0
     c74:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     c78:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     c7c:	03a00000 	moveq	r0, #0
     c80:	012fff1e 	bxeq	lr
     c84:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     c88:	e59f21c8 	ldr	r2, [pc, #456]	; e58 <audio_read_rarc_ASM+0x14>
     c8c:	e5922000 	ldr	r2, [r2]
     c90:	e5802000 	str	r2, [r0]
     c94:	e3a00001 	mov	r0, #1
     c98:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     c9c:	e12fff1e 	bx	lr

00000ca0 <audio_write_data_ASM>:
     ca0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     ca4:	e92d0003 	push	{r0, r1}
     ca8:	eb000056 	bl	e08 <audio_read_wslc_ASM>
     cac:	e3500000 	cmp	r0, #0
     cb0:	08bd0003 	popeq	{r0, r1}
     cb4:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     cb8:	03a00000 	moveq	r0, #0
     cbc:	012fff1e 	bxeq	lr
     cc0:	eb000055 	bl	e1c <audio_read_wsrc_ASM>
     cc4:	e3500000 	cmp	r0, #0
     cc8:	08bd0003 	popeq	{r0, r1}
     ccc:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     cd0:	03a00000 	moveq	r0, #0
     cd4:	012fff1e 	bxeq	lr
     cd8:	e8bd0003 	pop	{r0, r1}
     cdc:	e59f2170 	ldr	r2, [pc, #368]	; e54 <audio_read_rarc_ASM+0x10>
     ce0:	e5820000 	str	r0, [r2]
     ce4:	e59f316c 	ldr	r3, [pc, #364]	; e58 <audio_read_rarc_ASM+0x14>
     ce8:	e5831000 	str	r1, [r3]
     cec:	e3a00001 	mov	r0, #1
     cf0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     cf4:	e12fff1e 	bx	lr

00000cf8 <audio_write_leftdata_ASM>:
     cf8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     cfc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     d00:	eb000040 	bl	e08 <audio_read_wslc_ASM>
     d04:	e3500000 	cmp	r0, #0
     d08:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     d0c:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     d10:	03a00000 	moveq	r0, #0
     d14:	012fff1e 	bxeq	lr
     d18:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     d1c:	e59f2130 	ldr	r2, [pc, #304]	; e54 <audio_read_rarc_ASM+0x10>
     d20:	e5820000 	str	r0, [r2]
     d24:	e3a00001 	mov	r0, #1
     d28:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     d2c:	e12fff1e 	bx	lr

00000d30 <audio_write_rightdata_ASM>:
     d30:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     d34:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     d38:	eb000037 	bl	e1c <audio_read_wsrc_ASM>
     d3c:	e3500000 	cmp	r0, #0
     d40:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     d44:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     d48:	03a00000 	moveq	r0, #0
     d4c:	012fff1e 	bxeq	lr
     d50:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     d54:	e59f20fc 	ldr	r2, [pc, #252]	; e58 <audio_read_rarc_ASM+0x14>
     d58:	e5820000 	str	r0, [r2]
     d5c:	e3a00001 	mov	r0, #1
     d60:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     d64:	e12fff1e 	bx	lr

00000d68 <audio_enable_read_fifo_clear_ASM>:
     d68:	e59f00ec 	ldr	r0, [pc, #236]	; e5c <audio_read_rarc_ASM+0x18>
     d6c:	e5901000 	ldr	r1, [r0]
     d70:	e3811004 	orr	r1, r1, #4
     d74:	e5801000 	str	r1, [r0]
     d78:	e12fff1e 	bx	lr

00000d7c <audio_enable_write_fifo_clear_ASM>:
     d7c:	e59f00d8 	ldr	r0, [pc, #216]	; e5c <audio_read_rarc_ASM+0x18>
     d80:	e5901000 	ldr	r1, [r0]
     d84:	e3811008 	orr	r1, r1, #8
     d88:	e5801000 	str	r1, [r0]
     d8c:	e12fff1e 	bx	lr

00000d90 <audio_disable_read_fifo_clear_ASM>:
     d90:	e59f00c4 	ldr	r0, [pc, #196]	; e5c <audio_read_rarc_ASM+0x18>
     d94:	e5901000 	ldr	r1, [r0]
     d98:	e3c11004 	bic	r1, r1, #4
     d9c:	e5801000 	str	r1, [r0]
     da0:	e12fff1e 	bx	lr

00000da4 <audio_disable_write_fifo_clear_ASM>:
     da4:	e59f00b0 	ldr	r0, [pc, #176]	; e5c <audio_read_rarc_ASM+0x18>
     da8:	e5901000 	ldr	r1, [r0]
     dac:	e3c11008 	bic	r1, r1, #8
     db0:	e5801000 	str	r1, [r0]
     db4:	e12fff1e 	bx	lr

00000db8 <audio_enable_read_int_ASM>:
     db8:	e59f009c 	ldr	r0, [pc, #156]	; e5c <audio_read_rarc_ASM+0x18>
     dbc:	e5901000 	ldr	r1, [r0]
     dc0:	e3811001 	orr	r1, r1, #1
     dc4:	e5801000 	str	r1, [r0]
     dc8:	e12fff1e 	bx	lr

00000dcc <audio_enable_write_int_ASM>:
     dcc:	e59f0088 	ldr	r0, [pc, #136]	; e5c <audio_read_rarc_ASM+0x18>
     dd0:	e5901000 	ldr	r1, [r0]
     dd4:	e3811002 	orr	r1, r1, #2
     dd8:	e5801000 	str	r1, [r0]
     ddc:	e12fff1e 	bx	lr

00000de0 <audio_disable_read_int_ASM>:
     de0:	e59f0074 	ldr	r0, [pc, #116]	; e5c <audio_read_rarc_ASM+0x18>
     de4:	e5901000 	ldr	r1, [r0]
     de8:	e3c11001 	bic	r1, r1, #1
     dec:	e5801000 	str	r1, [r0]
     df0:	e12fff1e 	bx	lr

00000df4 <audio_disable_write_int_ASM>:
     df4:	e59f0060 	ldr	r0, [pc, #96]	; e5c <audio_read_rarc_ASM+0x18>
     df8:	e5901000 	ldr	r1, [r0]
     dfc:	e3c11002 	bic	r1, r1, #2
     e00:	e5801000 	str	r1, [r0]
     e04:	e12fff1e 	bx	lr

00000e08 <audio_read_wslc_ASM>:
     e08:	e59f0050 	ldr	r0, [pc, #80]	; e60 <audio_read_rarc_ASM+0x1c>
     e0c:	e5900000 	ldr	r0, [r0]
     e10:	e1a00c20 	lsr	r0, r0, #24
     e14:	e20000ff 	and	r0, r0, #255	; 0xff
     e18:	e12fff1e 	bx	lr

00000e1c <audio_read_wsrc_ASM>:
     e1c:	e59f003c 	ldr	r0, [pc, #60]	; e60 <audio_read_rarc_ASM+0x1c>
     e20:	e5900000 	ldr	r0, [r0]
     e24:	e1a00820 	lsr	r0, r0, #16
     e28:	e20000ff 	and	r0, r0, #255	; 0xff
     e2c:	e12fff1e 	bx	lr

00000e30 <audio_read_ralc_ASM>:
     e30:	e59f0028 	ldr	r0, [pc, #40]	; e60 <audio_read_rarc_ASM+0x1c>
     e34:	e5900000 	ldr	r0, [r0]
     e38:	e1a00420 	lsr	r0, r0, #8
     e3c:	e20000ff 	and	r0, r0, #255	; 0xff
     e40:	e12fff1e 	bx	lr

00000e44 <audio_read_rarc_ASM>:
     e44:	e59f0014 	ldr	r0, [pc, #20]	; e60 <audio_read_rarc_ASM+0x1c>
     e48:	e5900000 	ldr	r0, [r0]
     e4c:	e20000ff 	and	r0, r0, #255	; 0xff
     e50:	e12fff1e 	bx	lr
     e54:	ff203048 	.word	0xff203048
     e58:	ff20304c 	.word	0xff20304c
     e5c:	ff203040 	.word	0xff203040
     e60:	ff203044 	.word	0xff203044

00000e64 <read_ps2_data_ASM>:
     e64:	e59f114c 	ldr	r1, [pc, #332]	; fb8 <ps2_fifo_ravail+0x4>
     e68:	e5911000 	ldr	r1, [r1]
     e6c:	e3a02902 	mov	r2, #32768	; 0x8000
     e70:	e1110002 	tst	r1, r2
     e74:	03a00000 	moveq	r0, #0
     e78:	012fff1e 	bxeq	lr
     e7c:	e20120ff 	and	r2, r1, #255	; 0xff
     e80:	e5c02000 	strb	r2, [r0]
     e84:	e59f2130 	ldr	r2, [pc, #304]	; fbc <ps2_fifo_ravail+0x8>
     e88:	e0010002 	and	r0, r1, r2
     e8c:	e1a00820 	lsr	r0, r0, #16
     e90:	e12fff1e 	bx	lr

00000e94 <enable_ps2_int_ASM>:
     e94:	e59f011c 	ldr	r0, [pc, #284]	; fb8 <ps2_fifo_ravail+0x4>
     e98:	e3a01001 	mov	r1, #1
     e9c:	e5c01004 	strb	r1, [r0, #4]
     ea0:	e12fff1e 	bx	lr

00000ea4 <disable_ps2_int_ASM>:
     ea4:	e59f010c 	ldr	r0, [pc, #268]	; fb8 <ps2_fifo_ravail+0x4>
     ea8:	e3a01000 	mov	r1, #0
     eac:	e5c01004 	strb	r1, [r0, #4]
     eb0:	e12fff1e 	bx	lr

00000eb4 <ps2_fifo_data>:
	...

00000fb4 <ps2_fifo_ravail>:
     fb4:	00000000 	.word	0x00000000
     fb8:	ff200100 	.word	0xff200100
     fbc:	ffff0000 	.word	0xffff0000

00000fc0 <read_PB_data_ASM>:
     fc0:	e59f1074 	ldr	r1, [pc, #116]	; 103c <disable_PB_INT_ASM+0x14>
     fc4:	e5910000 	ldr	r0, [r1]
     fc8:	e12fff1e 	bx	lr

00000fcc <PB_data_is_pressed_ASM>:
     fcc:	e59f1068 	ldr	r1, [pc, #104]	; 103c <disable_PB_INT_ASM+0x14>
     fd0:	e5912000 	ldr	r2, [r1]
     fd4:	e0000002 	and	r0, r0, r2
     fd8:	e3300000 	teq	r0, #0
     fdc:	13a00001 	movne	r0, #1
     fe0:	e12fff1e 	bx	lr

00000fe4 <read_PB_edgecap_ASM>:
     fe4:	e59f1054 	ldr	r1, [pc, #84]	; 1040 <disable_PB_INT_ASM+0x18>
     fe8:	e5910000 	ldr	r0, [r1]
     fec:	e12fff1e 	bx	lr

00000ff0 <PB_edgecap_is_pressed_ASM>:
     ff0:	e59f1048 	ldr	r1, [pc, #72]	; 1040 <disable_PB_INT_ASM+0x18>
     ff4:	e5912000 	ldr	r2, [r1]
     ff8:	e0000002 	and	r0, r0, r2
     ffc:	e3300000 	teq	r0, #0
    1000:	13a00001 	movne	r0, #1
    1004:	e12fff1e 	bx	lr

00001008 <PB_clear_edgecp_ASM>:
    1008:	e59f1030 	ldr	r1, [pc, #48]	; 1040 <disable_PB_INT_ASM+0x18>
    100c:	e5810000 	str	r0, [r1]
    1010:	e12fff1e 	bx	lr

00001014 <enable_PB_INT_ASM>:
    1014:	e59f1028 	ldr	r1, [pc, #40]	; 1044 <disable_PB_INT_ASM+0x1c>
    1018:	e5912000 	ldr	r2, [r1]
    101c:	e1800002 	orr	r0, r0, r2
    1020:	e5810000 	str	r0, [r1]
    1024:	e12fff1e 	bx	lr

00001028 <disable_PB_INT_ASM>:
    1028:	e59f1014 	ldr	r1, [pc, #20]	; 1044 <disable_PB_INT_ASM+0x1c>
    102c:	e5912000 	ldr	r2, [r1]
    1030:	e1c00002 	bic	r0, r0, r2
    1034:	e5810000 	str	r0, [r1]
    1038:	e12fff1e 	bx	lr
    103c:	ff200050 	.word	0xff200050
    1040:	ff20005c 	.word	0xff20005c
    1044:	ff200058 	.word	0xff200058

00001048 <read_slider_switches_ASM>:
    1048:	e59f1004 	ldr	r1, [pc, #4]	; 1054 <read_slider_switches_ASM+0xc>
    104c:	e5910000 	ldr	r0, [r1]
    1050:	e12fff1e 	bx	lr
    1054:	ff200040 	.word	0xff200040

00001058 <VGA_clear_charbuff_ASM>:
    1058:	e92d0030 	push	{r4, r5}
    105c:	e3a02000 	mov	r2, #0
    1060:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    1064:	e3a00000 	mov	r0, #0

00001068 <CHAR_LOOPX>:
    1068:	e3a01000 	mov	r1, #0
    106c:	e0834000 	add	r4, r3, r0

00001070 <CHAR_LOOPY>:
    1070:	e0845381 	add	r5, r4, r1, lsl #7
    1074:	e5c52000 	strb	r2, [r5]
    1078:	e2811001 	add	r1, r1, #1
    107c:	e351003c 	cmp	r1, #60	; 0x3c
    1080:	bafffffa 	blt	1070 <CHAR_LOOPY>
    1084:	e2800001 	add	r0, r0, #1
    1088:	e3500050 	cmp	r0, #80	; 0x50
    108c:	bafffff5 	blt	1068 <CHAR_LOOPX>
    1090:	e8bd0030 	pop	{r4, r5}
    1094:	e12fff1e 	bx	lr

00001098 <VGA_clear_pixelbuff_ASM>:
    1098:	e92d0030 	push	{r4, r5}
    109c:	e3a02000 	mov	r2, #0
    10a0:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
    10a4:	e3a00000 	mov	r0, #0

000010a8 <PIXEL_LOOPX>:
    10a8:	e3a01000 	mov	r1, #0
    10ac:	e0834080 	add	r4, r3, r0, lsl #1

000010b0 <PIXEL_LOOPY>:
    10b0:	e0845501 	add	r5, r4, r1, lsl #10
    10b4:	e1c520b0 	strh	r2, [r5]
    10b8:	e2811001 	add	r1, r1, #1
    10bc:	e35100f0 	cmp	r1, #240	; 0xf0
    10c0:	bafffffa 	blt	10b0 <PIXEL_LOOPY>
    10c4:	e2800001 	add	r0, r0, #1
    10c8:	e3500d05 	cmp	r0, #320	; 0x140
    10cc:	bafffff5 	blt	10a8 <PIXEL_LOOPX>
    10d0:	e8bd0030 	pop	{r4, r5}
    10d4:	e12fff1e 	bx	lr

000010d8 <VGA_write_char_ASM>:
    10d8:	e3500000 	cmp	r0, #0
    10dc:	b12fff1e 	bxlt	lr
    10e0:	e3510000 	cmp	r1, #0
    10e4:	b12fff1e 	bxlt	lr
    10e8:	e350004f 	cmp	r0, #79	; 0x4f
    10ec:	c12fff1e 	bxgt	lr
    10f0:	e351003b 	cmp	r1, #59	; 0x3b
    10f4:	c12fff1e 	bxgt	lr
    10f8:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    10fc:	e0833000 	add	r3, r3, r0
    1100:	e0833381 	add	r3, r3, r1, lsl #7
    1104:	e5c32000 	strb	r2, [r3]
    1108:	e12fff1e 	bx	lr

0000110c <VGA_write_byte_ASM>:
    110c:	e3500000 	cmp	r0, #0
    1110:	b12fff1e 	bxlt	lr
    1114:	e3510000 	cmp	r1, #0
    1118:	b12fff1e 	bxlt	lr
    111c:	e350004e 	cmp	r0, #78	; 0x4e
    1120:	c12fff1e 	bxgt	lr
    1124:	e351003b 	cmp	r1, #59	; 0x3b
    1128:	c12fff1e 	bxgt	lr
    112c:	e92d0030 	push	{r4, r5}
    1130:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    1134:	e20250f0 	and	r5, r2, #240	; 0xf0
    1138:	e1a05225 	lsr	r5, r5, #4
    113c:	e202400f 	and	r4, r2, #15
    1140:	e59f2068 	ldr	r2, [pc, #104]	; 11b0 <HEX_ASCII+0x10>
    1144:	e7d25005 	ldrb	r5, [r2, r5]
    1148:	e7d24004 	ldrb	r4, [r2, r4]
    114c:	e0833000 	add	r3, r3, r0
    1150:	e0833381 	add	r3, r3, r1, lsl #7
    1154:	e5c35000 	strb	r5, [r3]
    1158:	e2833001 	add	r3, r3, #1
    115c:	e5c34000 	strb	r4, [r3]
    1160:	e8bd0030 	pop	{r4, r5}
    1164:	e12fff1e 	bx	lr

00001168 <VGA_draw_point_ASM>:
    1168:	e59f3044 	ldr	r3, [pc, #68]	; 11b4 <HEX_ASCII+0x14>
    116c:	e3500000 	cmp	r0, #0
    1170:	b12fff1e 	bxlt	lr
    1174:	e3510000 	cmp	r1, #0
    1178:	b12fff1e 	bxlt	lr
    117c:	e1500003 	cmp	r0, r3
    1180:	c12fff1e 	bxgt	lr
    1184:	e35100ef 	cmp	r1, #239	; 0xef
    1188:	c12fff1e 	bxgt	lr
    118c:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
    1190:	e0833080 	add	r3, r3, r0, lsl #1
    1194:	e0833501 	add	r3, r3, r1, lsl #10
    1198:	e1c320b0 	strh	r2, [r3]
    119c:	e12fff1e 	bx	lr

000011a0 <HEX_ASCII>:
    11a0:	33323130 	.word	0x33323130
    11a4:	37363534 	.word	0x37363534
    11a8:	42413938 	.word	0x42413938
    11ac:	46454443 	.word	0x46454443
    11b0:	000011a0 	.word	0x000011a0
    11b4:	0000013f 	.word	0x0000013f

000011b8 <disable_A9_interrupts>:
#include "../inc/int_setup.h"

void disable_A9_interrupts() {
    11b8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    11bc:	e28db000 	add	r11, sp, #0
    11c0:	e24dd00c 	sub	sp, sp, #12
	int status = 0b11010011;
    11c4:	e3a030d3 	mov	r3, #211	; 0xd3
    11c8:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
    11cc:	e51b3008 	ldr	r3, [r11, #-8]
    11d0:	e129f003 	msr	CPSR_fc, r3
}
    11d4:	e28bd000 	add	sp, r11, #0
    11d8:	e8bd0800 	ldmfd	sp!, {r11}
    11dc:	e12fff1e 	bx	lr

000011e0 <enable_A9_interrupts>:

void enable_A9_interrupts() {
    11e0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    11e4:	e28db000 	add	r11, sp, #0
    11e8:	e24dd00c 	sub	sp, sp, #12
	int status = 0b01010011;
    11ec:	e3a03053 	mov	r3, #83	; 0x53
    11f0:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
    11f4:	e51b3008 	ldr	r3, [r11, #-8]
    11f8:	e129f003 	msr	CPSR_fc, r3
}
    11fc:	e28bd000 	add	sp, r11, #0
    1200:	e8bd0800 	ldmfd	sp!, {r11}
    1204:	e12fff1e 	bx	lr

00001208 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack() {
    1208:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    120c:	e28db000 	add	r11, sp, #0
    1210:	e24dd00c 	sub	sp, sp, #12
	int stack, mode;
	stack = 0xFFFFFFFF - 7;
    1214:	e3e03007 	mvn	r3, #7
    1218:	e50b3008 	str	r3, [r11, #-8]
	mode = 0b11010010;
    121c:	e3a030d2 	mov	r3, #210	; 0xd2
    1220:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
    1224:	e51b300c 	ldr	r3, [r11, #-12]
    1228:	e129f003 	msr	CPSR_fc, r3
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
    122c:	e51b3008 	ldr	r3, [r11, #-8]
    1230:	e1a0d003 	mov	sp, r3
	
	mode = 0b11010011;
    1234:	e3a030d3 	mov	r3, #211	; 0xd3
    1238:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
    123c:	e51b300c 	ldr	r3, [r11, #-12]
    1240:	e129f003 	msr	CPSR_fc, r3
}
    1244:	e28bd000 	add	sp, r11, #0
    1248:	e8bd0800 	ldmfd	sp!, {r11}
    124c:	e12fff1e 	bx	lr

00001250 <config_interrupt>:

void config_interrupt(int ID, int CPU) {
    1250:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1254:	e28db000 	add	r11, sp, #0
    1258:	e24dd01c 	sub	sp, sp, #28
    125c:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
    1260:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int reg_offset;
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
    1264:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1268:	e1a031c3 	asr	r3, r3, #3
    126c:	e3c33003 	bic	r3, r3, #3
    1270:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 0x1F;
    1274:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1278:	e203301f 	and	r3, r3, #31
    127c:	e50b300c 	str	r3, [r11, #-12]
	value = 1<<index;
    1280:	e3a02001 	mov	r2, #1
    1284:	e51b300c 	ldr	r3, [r11, #-12]
    1288:	e1a03312 	lsl	r3, r2, r3
    128c:	e50b3010 	str	r3, [r11, #-16]
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
    1290:	e51b3008 	ldr	r3, [r11, #-8]
    1294:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
    1298:	e2433c03 	sub	r3, r3, #768	; 0x300
    129c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(int *)address |= value;
    12a0:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    12a4:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    12a8:	e5921000 	ldr	r1, [r2]
    12ac:	e51b2010 	ldr	r2, [r11, #-16]
    12b0:	e1812002 	orr	r2, r1, r2
    12b4:	e5832000 	str	r2, [r3]
	
	reg_offset = (ID & 0xFFFFFFFC);
    12b8:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    12bc:	e3c33003 	bic	r3, r3, #3
    12c0:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 3;
    12c4:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    12c8:	e2033003 	and	r3, r3, #3
    12cc:	e50b300c 	str	r3, [r11, #-12]
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
    12d0:	e51b2008 	ldr	r2, [r11, #-8]
    12d4:	e51b300c 	ldr	r3, [r11, #-12]
    12d8:	e0823003 	add	r3, r2, r3
    12dc:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
    12e0:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(char *)address = (char)CPU;
    12e4:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    12e8:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
    12ec:	e6ef2072 	uxtb	r2, r2
    12f0:	e5c32000 	strb	r2, [r3]
}
    12f4:	e28bd000 	add	sp, r11, #0
    12f8:	e8bd0800 	ldmfd	sp!, {r11}
    12fc:	e12fff1e 	bx	lr

00001300 <config_GIC>:

void config_GIC(int len, int* IDs) {
    1300:	e92d4800 	push	{r11, lr}
    1304:	e28db004 	add	r11, sp, #4
    1308:	e24dd010 	sub	sp, sp, #16
    130c:	e50b0010 	str	r0, [r11, #-16]
    1310:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
	int i;
	for(i=0 ; i<len ; i++)
    1314:	e3a03000 	mov	r3, #0
    1318:	e50b3008 	str	r3, [r11, #-8]
    131c:	ea00000a 	b	134c <config_GIC+0x4c>
		config_interrupt(IDs[i],1);
    1320:	e51b3008 	ldr	r3, [r11, #-8]
    1324:	e1a03103 	lsl	r3, r3, #2
    1328:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    132c:	e0823003 	add	r3, r2, r3
    1330:	e5933000 	ldr	r3, [r3]
    1334:	e1a00003 	mov	r0, r3
    1338:	e3a01001 	mov	r1, #1
    133c:	ebffffc3 	bl	1250 <config_interrupt>
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
	int i;
	for(i=0 ; i<len ; i++)
    1340:	e51b3008 	ldr	r3, [r11, #-8]
    1344:	e2833001 	add	r3, r3, #1
    1348:	e50b3008 	str	r3, [r11, #-8]
    134c:	e51b2008 	ldr	r2, [r11, #-8]
    1350:	e51b3010 	ldr	r3, [r11, #-16]
    1354:	e1520003 	cmp	r2, r3
    1358:	bafffff0 	blt	1320 <config_GIC+0x20>
		config_interrupt(IDs[i],1);
	*((int *) (MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
    135c:	e30c3104 	movw	r3, #49412	; 0xc104
    1360:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1364:	e30f2fff 	movw	r2, #65535	; 0xffff
    1368:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_CPUIF)) = 1;
    136c:	e3a03cc1 	mov	r3, #49408	; 0xc100
    1370:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1374:	e3a02001 	mov	r2, #1
    1378:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_DIST)) = 1;
    137c:	e3a03a0d 	mov	r3, #53248	; 0xd000
    1380:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1384:	e3a02001 	mov	r2, #1
    1388:	e5832000 	str	r2, [r3]
}
    138c:	e24bd004 	sub	sp, r11, #4
    1390:	e8bd8800 	pop	{r11, pc}

00001394 <__cs3_isr_irq>:

void __attribute__ ((interrupt)) __cs3_isr_irq() {
    1394:	e24ee004 	sub	lr, lr, #4
    1398:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
    139c:	e28db018 	add	r11, sp, #24
    13a0:	e24dd00c 	sub	sp, sp, #12
	int interrupt_ID = *((int *) (MPCORE_GIC_CPUIF + ICCIAR));
    13a4:	e30c310c 	movw	r3, #49420	; 0xc10c
    13a8:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    13ac:	e5933000 	ldr	r3, [r3]
    13b0:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	
	switch(interrupt_ID) {
    13b4:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    13b8:	e3530053 	cmp	r3, #83	; 0x53
    13bc:	0a00003d 	beq	14b8 <__cs3_isr_irq+0x124>
    13c0:	e3530053 	cmp	r3, #83	; 0x53
    13c4:	ca000011 	bgt	1410 <__cs3_isr_irq+0x7c>
    13c8:	e353004e 	cmp	r3, #78	; 0x4e
    13cc:	0a000031 	beq	1498 <__cs3_isr_irq+0x104>
    13d0:	e353004e 	cmp	r3, #78	; 0x4e
    13d4:	ca000006 	bgt	13f4 <__cs3_isr_irq+0x60>
    13d8:	e3530048 	cmp	r3, #72	; 0x48
    13dc:	0a000029 	beq	1488 <__cs3_isr_irq+0xf4>
    13e0:	e3530049 	cmp	r3, #73	; 0x49
    13e4:	0a000029 	beq	1490 <__cs3_isr_irq+0xfc>
    13e8:	e353001d 	cmp	r3, #29
    13ec:	0a000019 	beq	1458 <__cs3_isr_irq+0xc4>
    13f0:	ea000036 	b	14d0 <__cs3_isr_irq+0x13c>
    13f4:	e3530050 	cmp	r3, #80	; 0x50
    13f8:	0a00002a 	beq	14a8 <__cs3_isr_irq+0x114>
    13fc:	e3530050 	cmp	r3, #80	; 0x50
    1400:	ba000026 	blt	14a0 <__cs3_isr_irq+0x10c>
    1404:	e3530051 	cmp	r3, #81	; 0x51
    1408:	0a000028 	beq	14b0 <__cs3_isr_irq+0x11c>
    140c:	ea00002f 	b	14d0 <__cs3_isr_irq+0x13c>
    1410:	e35300c7 	cmp	r3, #199	; 0xc7
    1414:	0a000013 	beq	1468 <__cs3_isr_irq+0xd4>
    1418:	e35300c7 	cmp	r3, #199	; 0xc7
    141c:	ca000006 	bgt	143c <__cs3_isr_irq+0xa8>
    1420:	e3530059 	cmp	r3, #89	; 0x59
    1424:	0a000027 	beq	14c8 <__cs3_isr_irq+0x134>
    1428:	e35300c5 	cmp	r3, #197	; 0xc5
    142c:	0a00000b 	beq	1460 <__cs3_isr_irq+0xcc>
    1430:	e3530054 	cmp	r3, #84	; 0x54
    1434:	0a000021 	beq	14c0 <__cs3_isr_irq+0x12c>
    1438:	ea000024 	b	14d0 <__cs3_isr_irq+0x13c>
    143c:	e35300c9 	cmp	r3, #201	; 0xc9
    1440:	0a00000c 	beq	1478 <__cs3_isr_irq+0xe4>
    1444:	e35300c9 	cmp	r3, #201	; 0xc9
    1448:	ba000008 	blt	1470 <__cs3_isr_irq+0xdc>
    144c:	e35300ca 	cmp	r3, #202	; 0xca
    1450:	0a00000a 	beq	1480 <__cs3_isr_irq+0xec>
    1454:	ea00001d 	b	14d0 <__cs3_isr_irq+0x13c>
		
		case 29:  A9_PRIV_TIM_ISR(); break;
    1458:	ebfffdb7 	bl	b3c <A9_PRIV_TIM_ISR>
    145c:	ea00001c 	b	14d4 <__cs3_isr_irq+0x140>
		case 197: HPS_GPIO1_ISR(); break;
    1460:	ebfffdb6 	bl	b40 <HPS_GPIO1_ISR>
    1464:	ea00001a 	b	14d4 <__cs3_isr_irq+0x140>
		case 199: HPS_TIM0_ISR(); break;
    1468:	ebfffdb5 	bl	b44 <HPS_TIM0_ISR>
    146c:	ea000018 	b	14d4 <__cs3_isr_irq+0x140>
		case 200: HPS_TIM1_ISR(); break;
    1470:	ebfffdbb 	bl	b64 <HPS_TIM1_ISR>
    1474:	ea000016 	b	14d4 <__cs3_isr_irq+0x140>
		case 201: HPS_TIM2_ISR(); break;
    1478:	ebfffdc1 	bl	b84 <HPS_TIM2_ISR>
    147c:	ea000014 	b	14d4 <__cs3_isr_irq+0x140>
		case 202: HPS_TIM3_ISR(); break;
    1480:	ebfffdc0 	bl	b88 <HPS_TIM3_ISR>
    1484:	ea000012 	b	14d4 <__cs3_isr_irq+0x140>
		case 72:  FPGA_INTERVAL_TIM_ISR(); break;
    1488:	ebfffdbf 	bl	b8c <FPGA_INTERVAL_TIM_ISR>
    148c:	ea000010 	b	14d4 <__cs3_isr_irq+0x140>
		case 73:  FPGA_PB_KEYS_ISR(); break;
    1490:	ebfffdbe 	bl	b90 <FPGA_PB_KEYS_ISR>
    1494:	ea00000e 	b	14d4 <__cs3_isr_irq+0x140>
		case 78:  FPGA_Audio_ISR(); break;
    1498:	ebfffdbd 	bl	b94 <FPGA_Audio_ISR>
    149c:	ea00000c 	b	14d4 <__cs3_isr_irq+0x140>
		case 79:  FPGA_PS2_ISR(); break;
    14a0:	ebfffdbc 	bl	b98 <FPGA_PS2_ISR>
    14a4:	ea00000a 	b	14d4 <__cs3_isr_irq+0x140>
		case 80:  FPGA_JTAG_ISR(); break;
    14a8:	ebfffdbb 	bl	b9c <FPGA_JTAG_ISR>
    14ac:	ea000008 	b	14d4 <__cs3_isr_irq+0x140>
		case 81:  FPGA_IrDA_ISR(); break;
    14b0:	ebfffdba 	bl	ba0 <FPGA_IrDA_ISR>
    14b4:	ea000006 	b	14d4 <__cs3_isr_irq+0x140>
		case 83:  FPGA_JP1_ISR(); break;
    14b8:	ebfffdb9 	bl	ba4 <FPGA_JP1_ISR>
    14bc:	ea000004 	b	14d4 <__cs3_isr_irq+0x140>
		case 84:  FPGA_JP2_ISR(); break;
    14c0:	ebfffdb8 	bl	ba8 <FPGA_JP2_ISR>
    14c4:	ea000002 	b	14d4 <__cs3_isr_irq+0x140>
		case 89:  FPGA_PS2_DUAL_ISR(); break;
    14c8:	ebfffdb7 	bl	bac <FPGA_PS2_DUAL_ISR>
    14cc:	ea000000 	b	14d4 <__cs3_isr_irq+0x140>
	
		default: while(1); break;
    14d0:	eafffffe 	b	14d0 <__cs3_isr_irq+0x13c>
	}
	
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = interrupt_ID;
    14d4:	e30c3110 	movw	r3, #49424	; 0xc110
    14d8:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    14dc:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
    14e0:	e5832000 	str	r2, [r3]
}
    14e4:	e24bd018 	sub	sp, r11, #24
    14e8:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

000014ec <__cs3_reset>:

void __attribute__ ((interrupt)) __cs3_reset (void) {
    14ec:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    14f0:	e28db000 	add	r11, sp, #0
	while(1);
    14f4:	eafffffe 	b	14f4 <__cs3_reset+0x8>

000014f8 <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) {
    14f8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    14fc:	e28db000 	add	r11, sp, #0
	while(1);
    1500:	eafffffe 	b	1500 <__cs3_isr_undef+0x8>

00001504 <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) {
    1504:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1508:	e28db000 	add	r11, sp, #0
	while(1);
    150c:	eafffffe 	b	150c <__cs3_isr_swi+0x8>

00001510 <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) {
    1510:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1514:	e28db000 	add	r11, sp, #0
	while(1);
    1518:	eafffffe 	b	1518 <__cs3_isr_pabort+0x8>

0000151c <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) {
    151c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1520:	e28db000 	add	r11, sp, #0
	while(1);
    1524:	eafffffe 	b	1524 <__cs3_isr_dabort+0x8>

00001528 <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) {
    1528:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    152c:	e28db000 	add	r11, sp, #0
	while(1);
    1530:	eafffffe 	b	1530 <__cs3_isr_fiq+0x8>

00001534 <fix_bug>:
}

void fix_bug() {
    1534:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1538:	e28db000 	add	r11, sp, #0
    153c:	e24dd00c 	sub	sp, sp, #12
	volatile int * addr = (int *)0xFFFED198;
    1540:	e30d3198 	movw	r3, #53656	; 0xd198
    1544:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1548:	e50b3008 	str	r3, [r11, #-8]
	*addr = 0x000C0000;
    154c:	e51b3008 	ldr	r3, [r11, #-8]
    1550:	e3a02703 	mov	r2, #786432	; 0xc0000
    1554:	e5832000 	str	r2, [r3]
}
    1558:	e28bd000 	add	sp, r11, #0
    155c:	e8bd0800 	ldmfd	sp!, {r11}
    1560:	e12fff1e 	bx	lr

00001564 <int_setup>:

void int_setup(int len, int* IDs) {
    1564:	e92d4800 	push	{r11, lr}
    1568:	e28db004 	add	r11, sp, #4
    156c:	e24dd008 	sub	sp, sp, #8
    1570:	e50b0008 	str	r0, [r11, #-8]
    1574:	e50b100c 	str	r1, [r11, #-12]
	disable_A9_interrupts();
    1578:	ebffff0e 	bl	11b8 <disable_A9_interrupts>
	set_A9_IRQ_stack();
    157c:	ebffff21 	bl	1208 <set_A9_IRQ_stack>
	fix_bug();
    1580:	ebffffeb 	bl	1534 <fix_bug>
	config_GIC(len, IDs);
    1584:	e51b0008 	ldr	r0, [r11, #-8]
    1588:	e51b100c 	ldr	r1, [r11, #-12]
    158c:	ebffff5b 	bl	1300 <config_GIC>
	enable_A9_interrupts();
    1590:	ebffff12 	bl	11e0 <enable_A9_interrupts>
}
    1594:	e24bd004 	sub	sp, r11, #4
    1598:	e8bd8800 	pop	{r11, pc}

0000159c <__aeabi_drsub>:
    159c:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    15a0:	ea000000 	b	15a8 <__adddf3>

000015a4 <__aeabi_dsub>:
    15a4:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

000015a8 <__adddf3>:
    15a8:	e92d4030 	push	{r4, r5, lr}
    15ac:	e1a04081 	lsl	r4, r1, #1
    15b0:	e1a05083 	lsl	r5, r3, #1
    15b4:	e1340005 	teq	r4, r5
    15b8:	01300002 	teqeq	r0, r2
    15bc:	1194c000 	orrsne	r12, r4, r0
    15c0:	1195c002 	orrsne	r12, r5, r2
    15c4:	11f0cac4 	mvnsne	r12, r4, asr #21
    15c8:	11f0cac5 	mvnsne	r12, r5, asr #21
    15cc:	0a00008c 	beq	1804 <__adddf3+0x25c>
    15d0:	e1a04aa4 	lsr	r4, r4, #21
    15d4:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    15d8:	b2655000 	rsblt	r5, r5, #0
    15dc:	da000006 	ble	15fc <__adddf3+0x54>
    15e0:	e0844005 	add	r4, r4, r5
    15e4:	e0202002 	eor	r2, r0, r2
    15e8:	e0213003 	eor	r3, r1, r3
    15ec:	e0220000 	eor	r0, r2, r0
    15f0:	e0231001 	eor	r1, r3, r1
    15f4:	e0202002 	eor	r2, r0, r2
    15f8:	e0213003 	eor	r3, r1, r3
    15fc:	e3550036 	cmp	r5, #54	; 0x36
    1600:	88bd4030 	pophi	{r4, r5, lr}
    1604:	812fff1e 	bxhi	lr
    1608:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    160c:	e1a01601 	lsl	r1, r1, #12
    1610:	e3a0c601 	mov	r12, #1048576	; 0x100000
    1614:	e18c1621 	orr	r1, r12, r1, lsr #12
    1618:	0a000001 	beq	1624 <__adddf3+0x7c>
    161c:	e2700000 	rsbs	r0, r0, #0
    1620:	e2e11000 	rsc	r1, r1, #0
    1624:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    1628:	e1a03603 	lsl	r3, r3, #12
    162c:	e18c3623 	orr	r3, r12, r3, lsr #12
    1630:	0a000001 	beq	163c <__adddf3+0x94>
    1634:	e2722000 	rsbs	r2, r2, #0
    1638:	e2e33000 	rsc	r3, r3, #0
    163c:	e1340005 	teq	r4, r5
    1640:	0a000069 	beq	17ec <__adddf3+0x244>
    1644:	e2444001 	sub	r4, r4, #1
    1648:	e275e020 	rsbs	lr, r5, #32
    164c:	ba000005 	blt	1668 <__adddf3+0xc0>
    1650:	e1a0ce12 	lsl	r12, r2, lr
    1654:	e0900532 	adds	r0, r0, r2, lsr r5
    1658:	e2a11000 	adc	r1, r1, #0
    165c:	e0900e13 	adds	r0, r0, r3, lsl lr
    1660:	e0b11553 	adcs	r1, r1, r3, asr r5
    1664:	ea000006 	b	1684 <__adddf3+0xdc>
    1668:	e2455020 	sub	r5, r5, #32
    166c:	e28ee020 	add	lr, lr, #32
    1670:	e3520001 	cmp	r2, #1
    1674:	e1a0ce13 	lsl	r12, r3, lr
    1678:	238cc002 	orrcs	r12, r12, #2
    167c:	e0900553 	adds	r0, r0, r3, asr r5
    1680:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    1684:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1688:	5a000002 	bpl	1698 <__adddf3+0xf0>
    168c:	e27cc000 	rsbs	r12, r12, #0
    1690:	e2f00000 	rscs	r0, r0, #0
    1694:	e2e11000 	rsc	r1, r1, #0
    1698:	e3510601 	cmp	r1, #1048576	; 0x100000
    169c:	3a00000f 	bcc	16e0 <__adddf3+0x138>
    16a0:	e3510602 	cmp	r1, #2097152	; 0x200000
    16a4:	3a000006 	bcc	16c4 <__adddf3+0x11c>
    16a8:	e1b010a1 	lsrs	r1, r1, #1
    16ac:	e1b00060 	rrxs	r0, r0
    16b0:	e1a0c06c 	rrx	r12, r12
    16b4:	e2844001 	add	r4, r4, #1
    16b8:	e1a02a84 	lsl	r2, r4, #21
    16bc:	e3720501 	cmn	r2, #4194304	; 0x400000
    16c0:	2a00006b 	bcs	1874 <__adddf3+0x2cc>
    16c4:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    16c8:	01b0c0a0 	lsrseq	r12, r0, #1
    16cc:	e2b00000 	adcs	r0, r0, #0
    16d0:	e0a11a04 	adc	r1, r1, r4, lsl #20
    16d4:	e1811005 	orr	r1, r1, r5
    16d8:	e8bd4030 	pop	{r4, r5, lr}
    16dc:	e12fff1e 	bx	lr
    16e0:	e1b0c08c 	lsls	r12, r12, #1
    16e4:	e0b00000 	adcs	r0, r0, r0
    16e8:	e0a11001 	adc	r1, r1, r1
    16ec:	e3110601 	tst	r1, #1048576	; 0x100000
    16f0:	e2444001 	sub	r4, r4, #1
    16f4:	1afffff2 	bne	16c4 <__adddf3+0x11c>
    16f8:	e3310000 	teq	r1, #0
    16fc:	13a03014 	movne	r3, #20
    1700:	03a03034 	moveq	r3, #52	; 0x34
    1704:	01a01000 	moveq	r1, r0
    1708:	03a00000 	moveq	r0, #0
    170c:	e1a02001 	mov	r2, r1
    1710:	e3520801 	cmp	r2, #65536	; 0x10000
    1714:	21a02822 	lsrcs	r2, r2, #16
    1718:	22433010 	subcs	r3, r3, #16
    171c:	e3520c01 	cmp	r2, #256	; 0x100
    1720:	21a02422 	lsrcs	r2, r2, #8
    1724:	22433008 	subcs	r3, r3, #8
    1728:	e3520010 	cmp	r2, #16
    172c:	21a02222 	lsrcs	r2, r2, #4
    1730:	22433004 	subcs	r3, r3, #4
    1734:	e3520004 	cmp	r2, #4
    1738:	22433002 	subcs	r3, r3, #2
    173c:	304330a2 	subcc	r3, r3, r2, lsr #1
    1740:	e04331a2 	sub	r3, r3, r2, lsr #3
    1744:	e2532020 	subs	r2, r3, #32
    1748:	aa000007 	bge	176c <__adddf3+0x1c4>
    174c:	e292200c 	adds	r2, r2, #12
    1750:	da000004 	ble	1768 <__adddf3+0x1c0>
    1754:	e282c014 	add	r12, r2, #20
    1758:	e262200c 	rsb	r2, r2, #12
    175c:	e1a00c11 	lsl	r0, r1, r12
    1760:	e1a01231 	lsr	r1, r1, r2
    1764:	ea000004 	b	177c <__adddf3+0x1d4>
    1768:	e2822014 	add	r2, r2, #20
    176c:	d262c020 	rsble	r12, r2, #32
    1770:	e1a01211 	lsl	r1, r1, r2
    1774:	d1811c30 	orrle	r1, r1, r0, lsr r12
    1778:	d1a00210 	lslle	r0, r0, r2
    177c:	e0544003 	subs	r4, r4, r3
    1780:	a0811a04 	addge	r1, r1, r4, lsl #20
    1784:	a1811005 	orrge	r1, r1, r5
    1788:	a8bd4030 	popge	{r4, r5, lr}
    178c:	a12fff1e 	bxge	lr
    1790:	e1e04004 	mvn	r4, r4
    1794:	e254401f 	subs	r4, r4, #31
    1798:	aa00000f 	bge	17dc <__adddf3+0x234>
    179c:	e294400c 	adds	r4, r4, #12
    17a0:	ca000006 	bgt	17c0 <__adddf3+0x218>
    17a4:	e2844014 	add	r4, r4, #20
    17a8:	e2642020 	rsb	r2, r4, #32
    17ac:	e1a00430 	lsr	r0, r0, r4
    17b0:	e1800211 	orr	r0, r0, r1, lsl r2
    17b4:	e1851431 	orr	r1, r5, r1, lsr r4
    17b8:	e8bd4030 	pop	{r4, r5, lr}
    17bc:	e12fff1e 	bx	lr
    17c0:	e264400c 	rsb	r4, r4, #12
    17c4:	e2642020 	rsb	r2, r4, #32
    17c8:	e1a00230 	lsr	r0, r0, r2
    17cc:	e1800411 	orr	r0, r0, r1, lsl r4
    17d0:	e1a01005 	mov	r1, r5
    17d4:	e8bd4030 	pop	{r4, r5, lr}
    17d8:	e12fff1e 	bx	lr
    17dc:	e1a00431 	lsr	r0, r1, r4
    17e0:	e1a01005 	mov	r1, r5
    17e4:	e8bd4030 	pop	{r4, r5, lr}
    17e8:	e12fff1e 	bx	lr
    17ec:	e3340000 	teq	r4, #0
    17f0:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    17f4:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    17f8:	02844001 	addeq	r4, r4, #1
    17fc:	12455001 	subne	r5, r5, #1
    1800:	eaffff8f 	b	1644 <__adddf3+0x9c>
    1804:	e1f0cac4 	mvns	r12, r4, asr #21
    1808:	11f0cac5 	mvnsne	r12, r5, asr #21
    180c:	0a00001d 	beq	1888 <__adddf3+0x2e0>
    1810:	e1340005 	teq	r4, r5
    1814:	01300002 	teqeq	r0, r2
    1818:	0a000004 	beq	1830 <__adddf3+0x288>
    181c:	e194c000 	orrs	r12, r4, r0
    1820:	01a01003 	moveq	r1, r3
    1824:	01a00002 	moveq	r0, r2
    1828:	e8bd4030 	pop	{r4, r5, lr}
    182c:	e12fff1e 	bx	lr
    1830:	e1310003 	teq	r1, r3
    1834:	13a01000 	movne	r1, #0
    1838:	13a00000 	movne	r0, #0
    183c:	18bd4030 	popne	{r4, r5, lr}
    1840:	112fff1e 	bxne	lr
    1844:	e1b0caa4 	lsrs	r12, r4, #21
    1848:	1a000004 	bne	1860 <__adddf3+0x2b8>
    184c:	e1b00080 	lsls	r0, r0, #1
    1850:	e0b11001 	adcs	r1, r1, r1
    1854:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    1858:	e8bd4030 	pop	{r4, r5, lr}
    185c:	e12fff1e 	bx	lr
    1860:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    1864:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    1868:	38bd4030 	popcc	{r4, r5, lr}
    186c:	312fff1e 	bxcc	lr
    1870:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1874:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    1878:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    187c:	e3a00000 	mov	r0, #0
    1880:	e8bd4030 	pop	{r4, r5, lr}
    1884:	e12fff1e 	bx	lr
    1888:	e1f0cac4 	mvns	r12, r4, asr #21
    188c:	11a01003 	movne	r1, r3
    1890:	11a00002 	movne	r0, r2
    1894:	01f0cac5 	mvnseq	r12, r5, asr #21
    1898:	11a03001 	movne	r3, r1
    189c:	11a02000 	movne	r2, r0
    18a0:	e1904601 	orrs	r4, r0, r1, lsl #12
    18a4:	01925603 	orrseq	r5, r2, r3, lsl #12
    18a8:	01310003 	teqeq	r1, r3
    18ac:	13811702 	orrne	r1, r1, #524288	; 0x80000
    18b0:	e8bd4030 	pop	{r4, r5, lr}
    18b4:	e12fff1e 	bx	lr

000018b8 <__aeabi_ui2d>:
    18b8:	e3300000 	teq	r0, #0
    18bc:	03a01000 	moveq	r1, #0
    18c0:	012fff1e 	bxeq	lr
    18c4:	e92d4030 	push	{r4, r5, lr}
    18c8:	e3a04b01 	mov	r4, #1024	; 0x400
    18cc:	e2844032 	add	r4, r4, #50	; 0x32
    18d0:	e3a05000 	mov	r5, #0
    18d4:	e3a01000 	mov	r1, #0
    18d8:	eaffff86 	b	16f8 <__adddf3+0x150>

000018dc <__aeabi_i2d>:
    18dc:	e3300000 	teq	r0, #0
    18e0:	03a01000 	moveq	r1, #0
    18e4:	012fff1e 	bxeq	lr
    18e8:	e92d4030 	push	{r4, r5, lr}
    18ec:	e3a04b01 	mov	r4, #1024	; 0x400
    18f0:	e2844032 	add	r4, r4, #50	; 0x32
    18f4:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    18f8:	42600000 	rsbmi	r0, r0, #0
    18fc:	e3a01000 	mov	r1, #0
    1900:	eaffff7c 	b	16f8 <__adddf3+0x150>

00001904 <__aeabi_f2d>:
    1904:	e1b02080 	lsls	r2, r0, #1
    1908:	e1a011c2 	asr	r1, r2, #3
    190c:	e1a01061 	rrx	r1, r1
    1910:	e1a00e02 	lsl	r0, r2, #28
    1914:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    1918:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    191c:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    1920:	112fff1e 	bxne	lr
    1924:	e3320000 	teq	r2, #0
    1928:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    192c:	012fff1e 	bxeq	lr
    1930:	e92d4030 	push	{r4, r5, lr}
    1934:	e3a04d0e 	mov	r4, #896	; 0x380
    1938:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    193c:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    1940:	eaffff6c 	b	16f8 <__adddf3+0x150>

00001944 <__aeabi_ul2d>:
    1944:	e1902001 	orrs	r2, r0, r1
    1948:	012fff1e 	bxeq	lr
    194c:	e92d4030 	push	{r4, r5, lr}
    1950:	e3a05000 	mov	r5, #0
    1954:	ea000006 	b	1974 <__aeabi_l2d+0x1c>

00001958 <__aeabi_l2d>:
    1958:	e1902001 	orrs	r2, r0, r1
    195c:	012fff1e 	bxeq	lr
    1960:	e92d4030 	push	{r4, r5, lr}
    1964:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    1968:	5a000001 	bpl	1974 <__aeabi_l2d+0x1c>
    196c:	e2700000 	rsbs	r0, r0, #0
    1970:	e2e11000 	rsc	r1, r1, #0
    1974:	e3a04b01 	mov	r4, #1024	; 0x400
    1978:	e2844032 	add	r4, r4, #50	; 0x32
    197c:	e1b0cb21 	lsrs	r12, r1, #22
    1980:	0affff44 	beq	1698 <__adddf3+0xf0>
    1984:	e3a02003 	mov	r2, #3
    1988:	e1b0c1ac 	lsrs	r12, r12, #3
    198c:	12822003 	addne	r2, r2, #3
    1990:	e1b0c1ac 	lsrs	r12, r12, #3
    1994:	12822003 	addne	r2, r2, #3
    1998:	e08221ac 	add	r2, r2, r12, lsr #3
    199c:	e2623020 	rsb	r3, r2, #32
    19a0:	e1a0c310 	lsl	r12, r0, r3
    19a4:	e1a00230 	lsr	r0, r0, r2
    19a8:	e1800311 	orr	r0, r0, r1, lsl r3
    19ac:	e1a01231 	lsr	r1, r1, r2
    19b0:	e0844002 	add	r4, r4, r2
    19b4:	eaffff37 	b	1698 <__adddf3+0xf0>

000019b8 <__aeabi_dmul>:
    19b8:	e92d4070 	push	{r4, r5, r6, lr}
    19bc:	e3a0c0ff 	mov	r12, #255	; 0xff
    19c0:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    19c4:	e01c4a21 	ands	r4, r12, r1, lsr #20
    19c8:	101c5a23 	andsne	r5, r12, r3, lsr #20
    19cc:	1134000c 	teqne	r4, r12
    19d0:	1135000c 	teqne	r5, r12
    19d4:	0b000075 	bleq	1bb0 <__aeabi_dmul+0x1f8>
    19d8:	e0844005 	add	r4, r4, r5
    19dc:	e0216003 	eor	r6, r1, r3
    19e0:	e1c11a8c 	bic	r1, r1, r12, lsl #21
    19e4:	e1c33a8c 	bic	r3, r3, r12, lsl #21
    19e8:	e1905601 	orrs	r5, r0, r1, lsl #12
    19ec:	11925603 	orrsne	r5, r2, r3, lsl #12
    19f0:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    19f4:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    19f8:	0a00001d 	beq	1a74 <__aeabi_dmul+0xbc>
    19fc:	e08ec290 	umull	r12, lr, r0, r2
    1a00:	e3a05000 	mov	r5, #0
    1a04:	e0a5e291 	umlal	lr, r5, r1, r2
    1a08:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    1a0c:	e0a5e390 	umlal	lr, r5, r0, r3
    1a10:	e3a06000 	mov	r6, #0
    1a14:	e0a65391 	umlal	r5, r6, r1, r3
    1a18:	e33c0000 	teq	r12, #0
    1a1c:	138ee001 	orrne	lr, lr, #1
    1a20:	e24440ff 	sub	r4, r4, #255	; 0xff
    1a24:	e3560c02 	cmp	r6, #512	; 0x200
    1a28:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    1a2c:	2a000002 	bcs	1a3c <__aeabi_dmul+0x84>
    1a30:	e1b0e08e 	lsls	lr, lr, #1
    1a34:	e0b55005 	adcs	r5, r5, r5
    1a38:	e0a66006 	adc	r6, r6, r6
    1a3c:	e1821586 	orr	r1, r2, r6, lsl #11
    1a40:	e1811aa5 	orr	r1, r1, r5, lsr #21
    1a44:	e1a00585 	lsl	r0, r5, #11
    1a48:	e1800aae 	orr	r0, r0, lr, lsr #21
    1a4c:	e1a0e58e 	lsl	lr, lr, #11
    1a50:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    1a54:	835c0c07 	cmphi	r12, #1792	; 0x700
    1a58:	8a000011 	bhi	1aa4 <__aeabi_dmul+0xec>
    1a5c:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    1a60:	01b0e0a0 	lsrseq	lr, r0, #1
    1a64:	e2b00000 	adcs	r0, r0, #0
    1a68:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1a6c:	e8bd4070 	pop	{r4, r5, r6, lr}
    1a70:	e12fff1e 	bx	lr
    1a74:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    1a78:	e1861001 	orr	r1, r6, r1
    1a7c:	e1800002 	orr	r0, r0, r2
    1a80:	e0211003 	eor	r1, r1, r3
    1a84:	e05440ac 	subs	r4, r4, r12, lsr #1
    1a88:	c074500c 	rsbsgt	r5, r4, r12
    1a8c:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    1a90:	c8bd4070 	popgt	{r4, r5, r6, lr}
    1a94:	c12fff1e 	bxgt	lr
    1a98:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    1a9c:	e3a0e000 	mov	lr, #0
    1aa0:	e2544001 	subs	r4, r4, #1
    1aa4:	ca00005d 	bgt	1c20 <__aeabi_dmul+0x268>
    1aa8:	e3740036 	cmn	r4, #54	; 0x36
    1aac:	d3a00000 	movle	r0, #0
    1ab0:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    1ab4:	d8bd4070 	pople	{r4, r5, r6, lr}
    1ab8:	d12fff1e 	bxle	lr
    1abc:	e2644000 	rsb	r4, r4, #0
    1ac0:	e2544020 	subs	r4, r4, #32
    1ac4:	aa00001a 	bge	1b34 <__aeabi_dmul+0x17c>
    1ac8:	e294400c 	adds	r4, r4, #12
    1acc:	ca00000c 	bgt	1b04 <__aeabi_dmul+0x14c>
    1ad0:	e2844014 	add	r4, r4, #20
    1ad4:	e2645020 	rsb	r5, r4, #32
    1ad8:	e1a03510 	lsl	r3, r0, r5
    1adc:	e1a00430 	lsr	r0, r0, r4
    1ae0:	e1800511 	orr	r0, r0, r1, lsl r5
    1ae4:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    1ae8:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    1aec:	e0900fa3 	adds	r0, r0, r3, lsr #31
    1af0:	e0a21431 	adc	r1, r2, r1, lsr r4
    1af4:	e19ee083 	orrs	lr, lr, r3, lsl #1
    1af8:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1afc:	e8bd4070 	pop	{r4, r5, r6, lr}
    1b00:	e12fff1e 	bx	lr
    1b04:	e264400c 	rsb	r4, r4, #12
    1b08:	e2645020 	rsb	r5, r4, #32
    1b0c:	e1a03410 	lsl	r3, r0, r4
    1b10:	e1a00530 	lsr	r0, r0, r5
    1b14:	e1800411 	orr	r0, r0, r1, lsl r4
    1b18:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1b1c:	e0900fa3 	adds	r0, r0, r3, lsr #31
    1b20:	e2a11000 	adc	r1, r1, #0
    1b24:	e19ee083 	orrs	lr, lr, r3, lsl #1
    1b28:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1b2c:	e8bd4070 	pop	{r4, r5, r6, lr}
    1b30:	e12fff1e 	bx	lr
    1b34:	e2645020 	rsb	r5, r4, #32
    1b38:	e18ee510 	orr	lr, lr, r0, lsl r5
    1b3c:	e1a03430 	lsr	r3, r0, r4
    1b40:	e1833511 	orr	r3, r3, r1, lsl r5
    1b44:	e1a00431 	lsr	r0, r1, r4
    1b48:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1b4c:	e1c00431 	bic	r0, r0, r1, lsr r4
    1b50:	e0800fa3 	add	r0, r0, r3, lsr #31
    1b54:	e19ee083 	orrs	lr, lr, r3, lsl #1
    1b58:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1b5c:	e8bd4070 	pop	{r4, r5, r6, lr}
    1b60:	e12fff1e 	bx	lr
    1b64:	e3340000 	teq	r4, #0
    1b68:	1a000008 	bne	1b90 <__aeabi_dmul+0x1d8>
    1b6c:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    1b70:	e1b00080 	lsls	r0, r0, #1
    1b74:	e0a11001 	adc	r1, r1, r1
    1b78:	e3110601 	tst	r1, #1048576	; 0x100000
    1b7c:	02444001 	subeq	r4, r4, #1
    1b80:	0afffffa 	beq	1b70 <__aeabi_dmul+0x1b8>
    1b84:	e1811006 	orr	r1, r1, r6
    1b88:	e3350000 	teq	r5, #0
    1b8c:	112fff1e 	bxne	lr
    1b90:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    1b94:	e1b02082 	lsls	r2, r2, #1
    1b98:	e0a33003 	adc	r3, r3, r3
    1b9c:	e3130601 	tst	r3, #1048576	; 0x100000
    1ba0:	02455001 	subeq	r5, r5, #1
    1ba4:	0afffffa 	beq	1b94 <__aeabi_dmul+0x1dc>
    1ba8:	e1833006 	orr	r3, r3, r6
    1bac:	e12fff1e 	bx	lr
    1bb0:	e134000c 	teq	r4, r12
    1bb4:	e00c5a23 	and	r5, r12, r3, lsr #20
    1bb8:	1135000c 	teqne	r5, r12
    1bbc:	0a000007 	beq	1be0 <__aeabi_dmul+0x228>
    1bc0:	e1906081 	orrs	r6, r0, r1, lsl #1
    1bc4:	11926083 	orrsne	r6, r2, r3, lsl #1
    1bc8:	1affffe5 	bne	1b64 <__aeabi_dmul+0x1ac>
    1bcc:	e0211003 	eor	r1, r1, r3
    1bd0:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1bd4:	e3a00000 	mov	r0, #0
    1bd8:	e8bd4070 	pop	{r4, r5, r6, lr}
    1bdc:	e12fff1e 	bx	lr
    1be0:	e1906081 	orrs	r6, r0, r1, lsl #1
    1be4:	01a00002 	moveq	r0, r2
    1be8:	01a01003 	moveq	r1, r3
    1bec:	11926083 	orrsne	r6, r2, r3, lsl #1
    1bf0:	0a000010 	beq	1c38 <__aeabi_dmul+0x280>
    1bf4:	e134000c 	teq	r4, r12
    1bf8:	1a000001 	bne	1c04 <__aeabi_dmul+0x24c>
    1bfc:	e1906601 	orrs	r6, r0, r1, lsl #12
    1c00:	1a00000c 	bne	1c38 <__aeabi_dmul+0x280>
    1c04:	e135000c 	teq	r5, r12
    1c08:	1a000003 	bne	1c1c <__aeabi_dmul+0x264>
    1c0c:	e1926603 	orrs	r6, r2, r3, lsl #12
    1c10:	11a00002 	movne	r0, r2
    1c14:	11a01003 	movne	r1, r3
    1c18:	1a000006 	bne	1c38 <__aeabi_dmul+0x280>
    1c1c:	e0211003 	eor	r1, r1, r3
    1c20:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1c24:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    1c28:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    1c2c:	e3a00000 	mov	r0, #0
    1c30:	e8bd4070 	pop	{r4, r5, r6, lr}
    1c34:	e12fff1e 	bx	lr
    1c38:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    1c3c:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    1c40:	e8bd4070 	pop	{r4, r5, r6, lr}
    1c44:	e12fff1e 	bx	lr

00001c48 <__aeabi_ddiv>:
    1c48:	e92d4070 	push	{r4, r5, r6, lr}
    1c4c:	e3a0c0ff 	mov	r12, #255	; 0xff
    1c50:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    1c54:	e01c4a21 	ands	r4, r12, r1, lsr #20
    1c58:	101c5a23 	andsne	r5, r12, r3, lsr #20
    1c5c:	1134000c 	teqne	r4, r12
    1c60:	1135000c 	teqne	r5, r12
    1c64:	0b00005e 	bleq	1de4 <__aeabi_ddiv+0x19c>
    1c68:	e0444005 	sub	r4, r4, r5
    1c6c:	e021e003 	eor	lr, r1, r3
    1c70:	e1925603 	orrs	r5, r2, r3, lsl #12
    1c74:	e1a01601 	lsl	r1, r1, #12
    1c78:	0a00004c 	beq	1db0 <__aeabi_ddiv+0x168>
    1c7c:	e1a03603 	lsl	r3, r3, #12
    1c80:	e3a05201 	mov	r5, #268435456	; 0x10000000
    1c84:	e1853223 	orr	r3, r5, r3, lsr #4
    1c88:	e1833c22 	orr	r3, r3, r2, lsr #24
    1c8c:	e1a02402 	lsl	r2, r2, #8
    1c90:	e1855221 	orr	r5, r5, r1, lsr #4
    1c94:	e1855c20 	orr	r5, r5, r0, lsr #24
    1c98:	e1a06400 	lsl	r6, r0, #8
    1c9c:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    1ca0:	e1550003 	cmp	r5, r3
    1ca4:	01560002 	cmpeq	r6, r2
    1ca8:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    1cac:	e2844c03 	add	r4, r4, #768	; 0x300
    1cb0:	2a000001 	bcs	1cbc <__aeabi_ddiv+0x74>
    1cb4:	e1b030a3 	lsrs	r3, r3, #1
    1cb8:	e1a02062 	rrx	r2, r2
    1cbc:	e0566002 	subs	r6, r6, r2
    1cc0:	e0c55003 	sbc	r5, r5, r3
    1cc4:	e1b030a3 	lsrs	r3, r3, #1
    1cc8:	e1a02062 	rrx	r2, r2
    1ccc:	e3a00601 	mov	r0, #1048576	; 0x100000
    1cd0:	e3a0c702 	mov	r12, #524288	; 0x80000
    1cd4:	e056e002 	subs	lr, r6, r2
    1cd8:	e0d5e003 	sbcs	lr, r5, r3
    1cdc:	20466002 	subcs	r6, r6, r2
    1ce0:	21a0500e 	movcs	r5, lr
    1ce4:	2180000c 	orrcs	r0, r0, r12
    1ce8:	e1b030a3 	lsrs	r3, r3, #1
    1cec:	e1a02062 	rrx	r2, r2
    1cf0:	e056e002 	subs	lr, r6, r2
    1cf4:	e0d5e003 	sbcs	lr, r5, r3
    1cf8:	20466002 	subcs	r6, r6, r2
    1cfc:	21a0500e 	movcs	r5, lr
    1d00:	218000ac 	orrcs	r0, r0, r12, lsr #1
    1d04:	e1b030a3 	lsrs	r3, r3, #1
    1d08:	e1a02062 	rrx	r2, r2
    1d0c:	e056e002 	subs	lr, r6, r2
    1d10:	e0d5e003 	sbcs	lr, r5, r3
    1d14:	20466002 	subcs	r6, r6, r2
    1d18:	21a0500e 	movcs	r5, lr
    1d1c:	2180012c 	orrcs	r0, r0, r12, lsr #2
    1d20:	e1b030a3 	lsrs	r3, r3, #1
    1d24:	e1a02062 	rrx	r2, r2
    1d28:	e056e002 	subs	lr, r6, r2
    1d2c:	e0d5e003 	sbcs	lr, r5, r3
    1d30:	20466002 	subcs	r6, r6, r2
    1d34:	21a0500e 	movcs	r5, lr
    1d38:	218001ac 	orrcs	r0, r0, r12, lsr #3
    1d3c:	e195e006 	orrs	lr, r5, r6
    1d40:	0a00000d 	beq	1d7c <__aeabi_ddiv+0x134>
    1d44:	e1a05205 	lsl	r5, r5, #4
    1d48:	e1855e26 	orr	r5, r5, r6, lsr #28
    1d4c:	e1a06206 	lsl	r6, r6, #4
    1d50:	e1a03183 	lsl	r3, r3, #3
    1d54:	e1833ea2 	orr	r3, r3, r2, lsr #29
    1d58:	e1a02182 	lsl	r2, r2, #3
    1d5c:	e1b0c22c 	lsrs	r12, r12, #4
    1d60:	1affffdb 	bne	1cd4 <__aeabi_ddiv+0x8c>
    1d64:	e3110601 	tst	r1, #1048576	; 0x100000
    1d68:	1a000006 	bne	1d88 <__aeabi_ddiv+0x140>
    1d6c:	e1811000 	orr	r1, r1, r0
    1d70:	e3a00000 	mov	r0, #0
    1d74:	e3a0c102 	mov	r12, #-2147483648	; 0x80000000
    1d78:	eaffffd5 	b	1cd4 <__aeabi_ddiv+0x8c>
    1d7c:	e3110601 	tst	r1, #1048576	; 0x100000
    1d80:	01811000 	orreq	r1, r1, r0
    1d84:	03a00000 	moveq	r0, #0
    1d88:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    1d8c:	835c0c07 	cmphi	r12, #1792	; 0x700
    1d90:	8affff43 	bhi	1aa4 <__aeabi_dmul+0xec>
    1d94:	e055c003 	subs	r12, r5, r3
    1d98:	0056c002 	subseq	r12, r6, r2
    1d9c:	01b0c0a0 	lsrseq	r12, r0, #1
    1da0:	e2b00000 	adcs	r0, r0, #0
    1da4:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1da8:	e8bd4070 	pop	{r4, r5, r6, lr}
    1dac:	e12fff1e 	bx	lr
    1db0:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    1db4:	e18e1621 	orr	r1, lr, r1, lsr #12
    1db8:	e09440ac 	adds	r4, r4, r12, lsr #1
    1dbc:	c074500c 	rsbsgt	r5, r4, r12
    1dc0:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    1dc4:	c8bd4070 	popgt	{r4, r5, r6, lr}
    1dc8:	c12fff1e 	bxgt	lr
    1dcc:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    1dd0:	e3a0e000 	mov	lr, #0
    1dd4:	e2544001 	subs	r4, r4, #1
    1dd8:	eaffff31 	b	1aa4 <__aeabi_dmul+0xec>
    1ddc:	e185e006 	orr	lr, r5, r6
    1de0:	eaffff2f 	b	1aa4 <__aeabi_dmul+0xec>
    1de4:	e00c5a23 	and	r5, r12, r3, lsr #20
    1de8:	e134000c 	teq	r4, r12
    1dec:	0135000c 	teqeq	r5, r12
    1df0:	0affff90 	beq	1c38 <__aeabi_dmul+0x280>
    1df4:	e134000c 	teq	r4, r12
    1df8:	1a000006 	bne	1e18 <__aeabi_ddiv+0x1d0>
    1dfc:	e1904601 	orrs	r4, r0, r1, lsl #12
    1e00:	1affff8c 	bne	1c38 <__aeabi_dmul+0x280>
    1e04:	e135000c 	teq	r5, r12
    1e08:	1affff83 	bne	1c1c <__aeabi_dmul+0x264>
    1e0c:	e1a00002 	mov	r0, r2
    1e10:	e1a01003 	mov	r1, r3
    1e14:	eaffff87 	b	1c38 <__aeabi_dmul+0x280>
    1e18:	e135000c 	teq	r5, r12
    1e1c:	1a000004 	bne	1e34 <__aeabi_ddiv+0x1ec>
    1e20:	e1925603 	orrs	r5, r2, r3, lsl #12
    1e24:	0affff68 	beq	1bcc <__aeabi_dmul+0x214>
    1e28:	e1a00002 	mov	r0, r2
    1e2c:	e1a01003 	mov	r1, r3
    1e30:	eaffff80 	b	1c38 <__aeabi_dmul+0x280>
    1e34:	e1906081 	orrs	r6, r0, r1, lsl #1
    1e38:	11926083 	orrsne	r6, r2, r3, lsl #1
    1e3c:	1affff48 	bne	1b64 <__aeabi_dmul+0x1ac>
    1e40:	e1904081 	orrs	r4, r0, r1, lsl #1
    1e44:	1affff74 	bne	1c1c <__aeabi_dmul+0x264>
    1e48:	e1925083 	orrs	r5, r2, r3, lsl #1
    1e4c:	1affff5e 	bne	1bcc <__aeabi_dmul+0x214>
    1e50:	eaffff78 	b	1c38 <__aeabi_dmul+0x280>

00001e54 <__aeabi_d2iz>:
    1e54:	e1a02081 	lsl	r2, r1, #1
    1e58:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    1e5c:	2a00000c 	bcs	1e94 <__aeabi_d2iz+0x40>
    1e60:	5a000009 	bpl	1e8c <__aeabi_d2iz+0x38>
    1e64:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    1e68:	e0532ac2 	subs	r2, r3, r2, asr #21
    1e6c:	9a00000a 	bls	1e9c <__aeabi_d2iz+0x48>
    1e70:	e1a03581 	lsl	r3, r1, #11
    1e74:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    1e78:	e1833aa0 	orr	r3, r3, r0, lsr #21
    1e7c:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    1e80:	e1a00233 	lsr	r0, r3, r2
    1e84:	12600000 	rsbne	r0, r0, #0
    1e88:	e12fff1e 	bx	lr
    1e8c:	e3a00000 	mov	r0, #0
    1e90:	e12fff1e 	bx	lr
    1e94:	e1900601 	orrs	r0, r0, r1, lsl #12
    1e98:	1a000002 	bne	1ea8 <__aeabi_d2iz+0x54>
    1e9c:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
    1ea0:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    1ea4:	e12fff1e 	bx	lr
    1ea8:	e3a00000 	mov	r0, #0
    1eac:	e12fff1e 	bx	lr

00001eb0 <__aeabi_frsub>:
    1eb0:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
    1eb4:	ea000000 	b	1ebc <__addsf3>

00001eb8 <__aeabi_fsub>:
    1eb8:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000

00001ebc <__addsf3>:
    1ebc:	e1b02080 	lsls	r2, r0, #1
    1ec0:	11b03081 	lslsne	r3, r1, #1
    1ec4:	11320003 	teqne	r2, r3
    1ec8:	11f0cc42 	mvnsne	r12, r2, asr #24
    1ecc:	11f0cc43 	mvnsne	r12, r3, asr #24
    1ed0:	0a000047 	beq	1ff4 <__addsf3+0x138>
    1ed4:	e1a02c22 	lsr	r2, r2, #24
    1ed8:	e0723c23 	rsbs	r3, r2, r3, lsr #24
    1edc:	c0822003 	addgt	r2, r2, r3
    1ee0:	c0201001 	eorgt	r1, r0, r1
    1ee4:	c0210000 	eorgt	r0, r1, r0
    1ee8:	c0201001 	eorgt	r1, r0, r1
    1eec:	b2633000 	rsblt	r3, r3, #0
    1ef0:	e3530019 	cmp	r3, #25
    1ef4:	812fff1e 	bxhi	lr
    1ef8:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    1efc:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    1f00:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
    1f04:	12600000 	rsbne	r0, r0, #0
    1f08:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    1f0c:	e3811502 	orr	r1, r1, #8388608	; 0x800000
    1f10:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
    1f14:	12611000 	rsbne	r1, r1, #0
    1f18:	e1320003 	teq	r2, r3
    1f1c:	0a00002e 	beq	1fdc <__addsf3+0x120>
    1f20:	e2422001 	sub	r2, r2, #1
    1f24:	e0900351 	adds	r0, r0, r1, asr r3
    1f28:	e2633020 	rsb	r3, r3, #32
    1f2c:	e1a01311 	lsl	r1, r1, r3
    1f30:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    1f34:	5a000001 	bpl	1f40 <__addsf3+0x84>
    1f38:	e2711000 	rsbs	r1, r1, #0
    1f3c:	e2e00000 	rsc	r0, r0, #0
    1f40:	e3500502 	cmp	r0, #8388608	; 0x800000
    1f44:	3a00000b 	bcc	1f78 <__addsf3+0xbc>
    1f48:	e3500401 	cmp	r0, #16777216	; 0x1000000
    1f4c:	3a000004 	bcc	1f64 <__addsf3+0xa8>
    1f50:	e1b000a0 	lsrs	r0, r0, #1
    1f54:	e1a01061 	rrx	r1, r1
    1f58:	e2822001 	add	r2, r2, #1
    1f5c:	e35200fe 	cmp	r2, #254	; 0xfe
    1f60:	2a000038 	bcs	2048 <__addsf3+0x18c>
    1f64:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    1f68:	e0a00b82 	adc	r0, r0, r2, lsl #23
    1f6c:	03c00001 	biceq	r0, r0, #1
    1f70:	e1800003 	orr	r0, r0, r3
    1f74:	e12fff1e 	bx	lr
    1f78:	e1b01081 	lsls	r1, r1, #1
    1f7c:	e0a00000 	adc	r0, r0, r0
    1f80:	e3100502 	tst	r0, #8388608	; 0x800000
    1f84:	e2422001 	sub	r2, r2, #1
    1f88:	1afffff5 	bne	1f64 <__addsf3+0xa8>
    1f8c:	e1b0c620 	lsrs	r12, r0, #12
    1f90:	01a00600 	lsleq	r0, r0, #12
    1f94:	0242200c 	subeq	r2, r2, #12
    1f98:	e31008ff 	tst	r0, #16711680	; 0xff0000
    1f9c:	01a00400 	lsleq	r0, r0, #8
    1fa0:	02422008 	subeq	r2, r2, #8
    1fa4:	e310060f 	tst	r0, #15728640	; 0xf00000
    1fa8:	01a00200 	lsleq	r0, r0, #4
    1fac:	02422004 	subeq	r2, r2, #4
    1fb0:	e3100503 	tst	r0, #12582912	; 0xc00000
    1fb4:	01a00100 	lsleq	r0, r0, #2
    1fb8:	02422002 	subeq	r2, r2, #2
    1fbc:	e3500502 	cmp	r0, #8388608	; 0x800000
    1fc0:	31a00080 	lslcc	r0, r0, #1
    1fc4:	e2d22000 	sbcs	r2, r2, #0
    1fc8:	a0800b82 	addge	r0, r0, r2, lsl #23
    1fcc:	b2622000 	rsblt	r2, r2, #0
    1fd0:	a1800003 	orrge	r0, r0, r3
    1fd4:	b1830230 	orrlt	r0, r3, r0, lsr r2
    1fd8:	e12fff1e 	bx	lr
    1fdc:	e3320000 	teq	r2, #0
    1fe0:	e2211502 	eor	r1, r1, #8388608	; 0x800000
    1fe4:	02200502 	eoreq	r0, r0, #8388608	; 0x800000
    1fe8:	02822001 	addeq	r2, r2, #1
    1fec:	12433001 	subne	r3, r3, #1
    1ff0:	eaffffca 	b	1f20 <__addsf3+0x64>
    1ff4:	e1a03081 	lsl	r3, r1, #1
    1ff8:	e1f0cc42 	mvns	r12, r2, asr #24
    1ffc:	11f0cc43 	mvnsne	r12, r3, asr #24
    2000:	0a000013 	beq	2054 <__addsf3+0x198>
    2004:	e1320003 	teq	r2, r3
    2008:	0a000002 	beq	2018 <__addsf3+0x15c>
    200c:	e3320000 	teq	r2, #0
    2010:	01a00001 	moveq	r0, r1
    2014:	e12fff1e 	bx	lr
    2018:	e1300001 	teq	r0, r1
    201c:	13a00000 	movne	r0, #0
    2020:	112fff1e 	bxne	lr
    2024:	e31204ff 	tst	r2, #-16777216	; 0xff000000
    2028:	1a000002 	bne	2038 <__addsf3+0x17c>
    202c:	e1b00080 	lsls	r0, r0, #1
    2030:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
    2034:	e12fff1e 	bx	lr
    2038:	e2922402 	adds	r2, r2, #33554432	; 0x2000000
    203c:	32800502 	addcc	r0, r0, #8388608	; 0x800000
    2040:	312fff1e 	bxcc	lr
    2044:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    2048:	e383047f 	orr	r0, r3, #2130706432	; 0x7f000000
    204c:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    2050:	e12fff1e 	bx	lr
    2054:	e1f02c42 	mvns	r2, r2, asr #24
    2058:	11a00001 	movne	r0, r1
    205c:	01f03c43 	mvnseq	r3, r3, asr #24
    2060:	11a01000 	movne	r1, r0
    2064:	e1b02480 	lsls	r2, r0, #9
    2068:	01b03481 	lslseq	r3, r1, #9
    206c:	01300001 	teqeq	r0, r1
    2070:	13800501 	orrne	r0, r0, #4194304	; 0x400000
    2074:	e12fff1e 	bx	lr

00002078 <__aeabi_ui2f>:
    2078:	e3a03000 	mov	r3, #0
    207c:	ea000001 	b	2088 <__aeabi_i2f+0x8>

00002080 <__aeabi_i2f>:
    2080:	e2103102 	ands	r3, r0, #-2147483648	; 0x80000000
    2084:	42600000 	rsbmi	r0, r0, #0
    2088:	e1b0c000 	movs	r12, r0
    208c:	012fff1e 	bxeq	lr
    2090:	e383344b 	orr	r3, r3, #1258291200	; 0x4b000000
    2094:	e1a01000 	mov	r1, r0
    2098:	e3a00000 	mov	r0, #0
    209c:	ea00000f 	b	20e0 <__aeabi_l2f+0x30>

000020a0 <__aeabi_ul2f>:
    20a0:	e1902001 	orrs	r2, r0, r1
    20a4:	012fff1e 	bxeq	lr
    20a8:	e3a03000 	mov	r3, #0
    20ac:	ea000005 	b	20c8 <__aeabi_l2f+0x18>

000020b0 <__aeabi_l2f>:
    20b0:	e1902001 	orrs	r2, r0, r1
    20b4:	012fff1e 	bxeq	lr
    20b8:	e2113102 	ands	r3, r1, #-2147483648	; 0x80000000
    20bc:	5a000001 	bpl	20c8 <__aeabi_l2f+0x18>
    20c0:	e2700000 	rsbs	r0, r0, #0
    20c4:	e2e11000 	rsc	r1, r1, #0
    20c8:	e1b0c001 	movs	r12, r1
    20cc:	01a0c000 	moveq	r12, r0
    20d0:	01a01000 	moveq	r1, r0
    20d4:	03a00000 	moveq	r0, #0
    20d8:	e383345b 	orr	r3, r3, #1526726656	; 0x5b000000
    20dc:	02433201 	subeq	r3, r3, #268435456	; 0x10000000
    20e0:	e2433502 	sub	r3, r3, #8388608	; 0x800000
    20e4:	e3a02017 	mov	r2, #23
    20e8:	e35c0801 	cmp	r12, #65536	; 0x10000
    20ec:	21a0c82c 	lsrcs	r12, r12, #16
    20f0:	22422010 	subcs	r2, r2, #16
    20f4:	e35c0c01 	cmp	r12, #256	; 0x100
    20f8:	21a0c42c 	lsrcs	r12, r12, #8
    20fc:	22422008 	subcs	r2, r2, #8
    2100:	e35c0010 	cmp	r12, #16
    2104:	21a0c22c 	lsrcs	r12, r12, #4
    2108:	22422004 	subcs	r2, r2, #4
    210c:	e35c0004 	cmp	r12, #4
    2110:	22422002 	subcs	r2, r2, #2
    2114:	304220ac 	subcc	r2, r2, r12, lsr #1
    2118:	e05221ac 	subs	r2, r2, r12, lsr #3
    211c:	e0433b82 	sub	r3, r3, r2, lsl #23
    2120:	ba000006 	blt	2140 <__aeabi_l2f+0x90>
    2124:	e0833211 	add	r3, r3, r1, lsl r2
    2128:	e1a0c210 	lsl	r12, r0, r2
    212c:	e2622020 	rsb	r2, r2, #32
    2130:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    2134:	e0a30230 	adc	r0, r3, r0, lsr r2
    2138:	03c00001 	biceq	r0, r0, #1
    213c:	e12fff1e 	bx	lr
    2140:	e2822020 	add	r2, r2, #32
    2144:	e1a0c211 	lsl	r12, r1, r2
    2148:	e2622020 	rsb	r2, r2, #32
    214c:	e190008c 	orrs	r0, r0, r12, lsl #1
    2150:	e0a30231 	adc	r0, r3, r1, lsr r2
    2154:	01c00fac 	biceq	r0, r0, r12, lsr #31
    2158:	e12fff1e 	bx	lr

0000215c <__gesf2>:
    215c:	e3e0c000 	mvn	r12, #0
    2160:	ea000002 	b	2170 <__cmpsf2+0x4>

00002164 <__lesf2>:
    2164:	e3a0c001 	mov	r12, #1
    2168:	ea000000 	b	2170 <__cmpsf2+0x4>

0000216c <__cmpsf2>:
    216c:	e3a0c001 	mov	r12, #1
    2170:	e52dc004 	push	{r12}		; (str r12, [sp, #-4]!)
    2174:	e1a02080 	lsl	r2, r0, #1
    2178:	e1a03081 	lsl	r3, r1, #1
    217c:	e1f0cc42 	mvns	r12, r2, asr #24
    2180:	11f0cc43 	mvnsne	r12, r3, asr #24
    2184:	0a000007 	beq	21a8 <__cmpsf2+0x3c>
    2188:	e28dd004 	add	sp, sp, #4
    218c:	e192c0a3 	orrs	r12, r2, r3, lsr #1
    2190:	11300001 	teqne	r0, r1
    2194:	50520003 	subspl	r0, r2, r3
    2198:	81a00fc1 	asrhi	r0, r1, #31
    219c:	31e00fc1 	mvncc	r0, r1, asr #31
    21a0:	13800001 	orrne	r0, r0, #1
    21a4:	e12fff1e 	bx	lr
    21a8:	e1f0cc42 	mvns	r12, r2, asr #24
    21ac:	1a000001 	bne	21b8 <__cmpsf2+0x4c>
    21b0:	e1b0c480 	lsls	r12, r0, #9
    21b4:	1a000003 	bne	21c8 <__cmpsf2+0x5c>
    21b8:	e1f0cc43 	mvns	r12, r3, asr #24
    21bc:	1afffff1 	bne	2188 <__cmpsf2+0x1c>
    21c0:	e1b0c481 	lsls	r12, r1, #9
    21c4:	0affffef 	beq	2188 <__cmpsf2+0x1c>
    21c8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    21cc:	e12fff1e 	bx	lr

000021d0 <__aeabi_cfrcmple>:
    21d0:	e1a0c000 	mov	r12, r0
    21d4:	e1a00001 	mov	r0, r1
    21d8:	e1a0100c 	mov	r1, r12
    21dc:	eaffffff 	b	21e0 <__aeabi_cfcmpeq>

000021e0 <__aeabi_cfcmpeq>:
    21e0:	e92d400f 	push	{r0, r1, r2, r3, lr}
    21e4:	ebffffe0 	bl	216c <__cmpsf2>
    21e8:	e3500000 	cmp	r0, #0
    21ec:	43700000 	cmnmi	r0, #0
    21f0:	e8bd400f 	pop	{r0, r1, r2, r3, lr}
    21f4:	e12fff1e 	bx	lr

000021f8 <__aeabi_fcmpeq>:
    21f8:	e52de008 	str	lr, [sp, #-8]!
    21fc:	ebfffff7 	bl	21e0 <__aeabi_cfcmpeq>
    2200:	03a00001 	moveq	r0, #1
    2204:	13a00000 	movne	r0, #0
    2208:	e49de008 	ldr	lr, [sp], #8
    220c:	e12fff1e 	bx	lr

00002210 <__aeabi_fcmplt>:
    2210:	e52de008 	str	lr, [sp, #-8]!
    2214:	ebfffff1 	bl	21e0 <__aeabi_cfcmpeq>
    2218:	33a00001 	movcc	r0, #1
    221c:	23a00000 	movcs	r0, #0
    2220:	e49de008 	ldr	lr, [sp], #8
    2224:	e12fff1e 	bx	lr

00002228 <__aeabi_fcmple>:
    2228:	e52de008 	str	lr, [sp, #-8]!
    222c:	ebffffeb 	bl	21e0 <__aeabi_cfcmpeq>
    2230:	93a00001 	movls	r0, #1
    2234:	83a00000 	movhi	r0, #0
    2238:	e49de008 	ldr	lr, [sp], #8
    223c:	e12fff1e 	bx	lr

00002240 <__aeabi_fcmpge>:
    2240:	e52de008 	str	lr, [sp, #-8]!
    2244:	ebffffe1 	bl	21d0 <__aeabi_cfrcmple>
    2248:	93a00001 	movls	r0, #1
    224c:	83a00000 	movhi	r0, #0
    2250:	e49de008 	ldr	lr, [sp], #8
    2254:	e12fff1e 	bx	lr

00002258 <__aeabi_fcmpgt>:
    2258:	e52de008 	str	lr, [sp, #-8]!
    225c:	ebffffdb 	bl	21d0 <__aeabi_cfrcmple>
    2260:	33a00001 	movcc	r0, #1
    2264:	23a00000 	movcs	r0, #0
    2268:	e49de008 	ldr	lr, [sp], #8
    226c:	e12fff1e 	bx	lr

00002270 <__aeabi_f2iz>:
    2270:	e1a02080 	lsl	r2, r0, #1
    2274:	e352047f 	cmp	r2, #2130706432	; 0x7f000000
    2278:	3a000008 	bcc	22a0 <__aeabi_f2iz+0x30>
    227c:	e3a0309e 	mov	r3, #158	; 0x9e
    2280:	e0532c22 	subs	r2, r3, r2, lsr #24
    2284:	9a000007 	bls	22a8 <__aeabi_f2iz+0x38>
    2288:	e1a03400 	lsl	r3, r0, #8
    228c:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    2290:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    2294:	e1a00233 	lsr	r0, r3, r2
    2298:	12600000 	rsbne	r0, r0, #0
    229c:	e12fff1e 	bx	lr
    22a0:	e3a00000 	mov	r0, #0
    22a4:	e12fff1e 	bx	lr
    22a8:	e3720061 	cmn	r2, #97	; 0x61
    22ac:	1a000001 	bne	22b8 <__aeabi_f2iz+0x48>
    22b0:	e1b02480 	lsls	r2, r0, #9
    22b4:	1a000002 	bne	22c4 <__aeabi_f2iz+0x54>
    22b8:	e2100102 	ands	r0, r0, #-2147483648	; 0x80000000
    22bc:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    22c0:	e12fff1e 	bx	lr
    22c4:	e3a00000 	mov	r0, #0
    22c8:	e12fff1e 	bx	lr

000022cc <atexit>:
    22cc:	e1a01000 	mov	r1, r0
    22d0:	e3a00000 	mov	r0, #0
    22d4:	e92d4008 	push	{r3, lr}
    22d8:	e1a02000 	mov	r2, r0
    22dc:	e1a03000 	mov	r3, r0
    22e0:	eb00000e 	bl	2320 <__register_exitproc>
    22e4:	e8bd4008 	pop	{r3, lr}
    22e8:	e12fff1e 	bx	lr

000022ec <exit>:
    22ec:	e92d4008 	push	{r3, lr}
    22f0:	e3a01000 	mov	r1, #0
    22f4:	e1a04000 	mov	r4, r0
    22f8:	eb000045 	bl	2414 <__call_exitprocs>
    22fc:	e59f3018 	ldr	r3, [pc, #24]	; 231c <exit+0x30>
    2300:	e5930000 	ldr	r0, [r3]
    2304:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    2308:	e3530000 	cmp	r3, #0
    230c:	11a0e00f 	movne	lr, pc
    2310:	112fff13 	bxne	r3
    2314:	e1a00004 	mov	r0, r4
    2318:	eb0000c9 	bl	2644 <_exit>
    231c:	000026f4 	.word	0x000026f4

00002320 <__register_exitproc>:
    2320:	e59fc0e4 	ldr	r12, [pc, #228]	; 240c <__register_exitproc+0xec>
    2324:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    2328:	e59c4000 	ldr	r4, [r12]
    232c:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    2330:	e35c0000 	cmp	r12, #0
    2334:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    2338:	e59c5004 	ldr	r5, [r12, #4]
    233c:	0584c148 	streq	r12, [r4, #328]	; 0x148
    2340:	e355001f 	cmp	r5, #31
    2344:	e24dd010 	sub	sp, sp, #16
    2348:	e1a06000 	mov	r6, r0
    234c:	da000015 	ble	23a8 <__register_exitproc+0x88>
    2350:	e59f00b8 	ldr	r0, [pc, #184]	; 2410 <__register_exitproc+0xf0>
    2354:	e3500000 	cmp	r0, #0
    2358:	1a000001 	bne	2364 <__register_exitproc+0x44>
    235c:	e3e00000 	mvn	r0, #0
    2360:	ea000018 	b	23c8 <__register_exitproc+0xa8>
    2364:	e3a00e19 	mov	r0, #400	; 0x190
    2368:	e58d100c 	str	r1, [sp, #12]
    236c:	e58d2008 	str	r2, [sp, #8]
    2370:	e58d3004 	str	r3, [sp, #4]
    2374:	e320f000 	nop	{0}
    2378:	e250c000 	subs	r12, r0, #0
    237c:	e59d100c 	ldr	r1, [sp, #12]
    2380:	e59d2008 	ldr	r2, [sp, #8]
    2384:	e59d3004 	ldr	r3, [sp, #4]
    2388:	0afffff3 	beq	235c <__register_exitproc+0x3c>
    238c:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    2390:	e3a00000 	mov	r0, #0
    2394:	e58c0004 	str	r0, [r12, #4]
    2398:	e58c5000 	str	r5, [r12]
    239c:	e584c148 	str	r12, [r4, #328]	; 0x148
    23a0:	e58c0188 	str	r0, [r12, #392]	; 0x188
    23a4:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    23a8:	e3560000 	cmp	r6, #0
    23ac:	e59c4004 	ldr	r4, [r12, #4]
    23b0:	1a000007 	bne	23d4 <__register_exitproc+0xb4>
    23b4:	e2843002 	add	r3, r4, #2
    23b8:	e2844001 	add	r4, r4, #1
    23bc:	e78c1103 	str	r1, [r12, r3, lsl #2]
    23c0:	e58c4004 	str	r4, [r12, #4]
    23c4:	e3a00000 	mov	r0, #0
    23c8:	e28dd010 	add	sp, sp, #16
    23cc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    23d0:	e12fff1e 	bx	lr
    23d4:	e3a00001 	mov	r0, #1
    23d8:	e1a00410 	lsl	r0, r0, r4
    23dc:	e08c8104 	add	r8, r12, r4, lsl #2
    23e0:	e3560002 	cmp	r6, #2
    23e4:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    23e8:	e5883108 	str	r3, [r8, #264]	; 0x108
    23ec:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    23f0:	e1877000 	orr	r7, r7, r0
    23f4:	01830000 	orreq	r0, r3, r0
    23f8:	e1a05008 	mov	r5, r8
    23fc:	e5882088 	str	r2, [r8, #136]	; 0x88
    2400:	e58c7188 	str	r7, [r12, #392]	; 0x188
    2404:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    2408:	eaffffe9 	b	23b4 <__register_exitproc+0x94>
    240c:	000026f4 	.word	0x000026f4
    2410:	00000000 	.word	0x00000000

00002414 <__call_exitprocs>:
    2414:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2418:	e59f3168 	ldr	r3, [pc, #360]	; 2588 <__call_exitprocs+0x174>
    241c:	e5933000 	ldr	r3, [r3]
    2420:	e24dd014 	sub	sp, sp, #20
    2424:	e58d3004 	str	r3, [sp, #4]
    2428:	e2833f52 	add	r3, r3, #328	; 0x148
    242c:	e58d0008 	str	r0, [sp, #8]
    2430:	e58d300c 	str	r3, [sp, #12]
    2434:	e1a07001 	mov	r7, r1
    2438:	e3a08001 	mov	r8, #1
    243c:	e59d3004 	ldr	r3, [sp, #4]
    2440:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    2444:	e3560000 	cmp	r6, #0
    2448:	e59db00c 	ldr	r11, [sp, #12]
    244c:	0a000033 	beq	2520 <__call_exitprocs+0x10c>
    2450:	e5965004 	ldr	r5, [r6, #4]
    2454:	e2554001 	subs	r4, r5, #1
    2458:	5286a088 	addpl	r10, r6, #136	; 0x88
    245c:	5285501f 	addpl	r5, r5, #31
    2460:	508a5105 	addpl	r5, r10, r5, lsl #2
    2464:	5a000007 	bpl	2488 <__call_exitprocs+0x74>
    2468:	ea000029 	b	2514 <__call_exitprocs+0x100>
    246c:	e5953000 	ldr	r3, [r5]
    2470:	e1530007 	cmp	r3, r7
    2474:	0a000005 	beq	2490 <__call_exitprocs+0x7c>
    2478:	e2444001 	sub	r4, r4, #1
    247c:	e3740001 	cmn	r4, #1
    2480:	e2455004 	sub	r5, r5, #4
    2484:	0a000022 	beq	2514 <__call_exitprocs+0x100>
    2488:	e3570000 	cmp	r7, #0
    248c:	1afffff6 	bne	246c <__call_exitprocs+0x58>
    2490:	e5963004 	ldr	r3, [r6, #4]
    2494:	e06a2005 	rsb	r2, r10, r5
    2498:	e2433001 	sub	r3, r3, #1
    249c:	e0862002 	add	r2, r6, r2
    24a0:	e1530004 	cmp	r3, r4
    24a4:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    24a8:	13a01000 	movne	r1, #0
    24ac:	05864004 	streq	r4, [r6, #4]
    24b0:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    24b4:	e3530000 	cmp	r3, #0
    24b8:	0affffee 	beq	2478 <__call_exitprocs+0x64>
    24bc:	e1a02418 	lsl	r2, r8, r4
    24c0:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    24c4:	e1120001 	tst	r2, r1
    24c8:	e5969004 	ldr	r9, [r6, #4]
    24cc:	0a000016 	beq	252c <__call_exitprocs+0x118>
    24d0:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    24d4:	e1120001 	tst	r2, r1
    24d8:	1a000016 	bne	2538 <__call_exitprocs+0x124>
    24dc:	e59d0008 	ldr	r0, [sp, #8]
    24e0:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    24e4:	e1a0e00f 	mov	lr, pc
    24e8:	e12fff13 	bx	r3
    24ec:	e5963004 	ldr	r3, [r6, #4]
    24f0:	e1530009 	cmp	r3, r9
    24f4:	1affffd0 	bne	243c <__call_exitprocs+0x28>
    24f8:	e59b3000 	ldr	r3, [r11]
    24fc:	e1530006 	cmp	r3, r6
    2500:	1affffcd 	bne	243c <__call_exitprocs+0x28>
    2504:	e2444001 	sub	r4, r4, #1
    2508:	e3740001 	cmn	r4, #1
    250c:	e2455004 	sub	r5, r5, #4
    2510:	1affffdc 	bne	2488 <__call_exitprocs+0x74>
    2514:	e59f1070 	ldr	r1, [pc, #112]	; 258c <__call_exitprocs+0x178>
    2518:	e3510000 	cmp	r1, #0
    251c:	1a000009 	bne	2548 <__call_exitprocs+0x134>
    2520:	e28dd014 	add	sp, sp, #20
    2524:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2528:	e12fff1e 	bx	lr
    252c:	e1a0e00f 	mov	lr, pc
    2530:	e12fff13 	bx	r3
    2534:	eaffffec 	b	24ec <__call_exitprocs+0xd8>
    2538:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    253c:	e1a0e00f 	mov	lr, pc
    2540:	e12fff13 	bx	r3
    2544:	eaffffe8 	b	24ec <__call_exitprocs+0xd8>
    2548:	e5963004 	ldr	r3, [r6, #4]
    254c:	e3530000 	cmp	r3, #0
    2550:	e5963000 	ldr	r3, [r6]
    2554:	1a000008 	bne	257c <__call_exitprocs+0x168>
    2558:	e3530000 	cmp	r3, #0
    255c:	0a000006 	beq	257c <__call_exitprocs+0x168>
    2560:	e1a00006 	mov	r0, r6
    2564:	e58b3000 	str	r3, [r11]
    2568:	e320f000 	nop	{0}
    256c:	e59b6000 	ldr	r6, [r11]
    2570:	e3560000 	cmp	r6, #0
    2574:	1affffb5 	bne	2450 <__call_exitprocs+0x3c>
    2578:	eaffffe8 	b	2520 <__call_exitprocs+0x10c>
    257c:	e1a0b006 	mov	r11, r6
    2580:	e1a06003 	mov	r6, r3
    2584:	eafffff9 	b	2570 <__call_exitprocs+0x15c>
    2588:	000026f4 	.word	0x000026f4
    258c:	00000000 	.word	0x00000000

00002590 <register_fini>:
    2590:	e92d4008 	push	{r3, lr}
    2594:	e59f3010 	ldr	r3, [pc, #16]	; 25ac <register_fini+0x1c>
    2598:	e3530000 	cmp	r3, #0
    259c:	159f000c 	ldrne	r0, [pc, #12]	; 25b0 <register_fini+0x20>
    25a0:	1bffff49 	blne	22cc <atexit>
    25a4:	e8bd4008 	pop	{r3, lr}
    25a8:	e12fff1e 	bx	lr
    25ac:	0000271c 	.word	0x0000271c
    25b0:	000025b4 	.word	0x000025b4

000025b4 <__libc_fini_array>:
    25b4:	e92d4038 	push	{r3, r4, r5, lr}
    25b8:	e59f5030 	ldr	r5, [pc, #48]	; 25f0 <__libc_fini_array+0x3c>
    25bc:	e59f4030 	ldr	r4, [pc, #48]	; 25f4 <__libc_fini_array+0x40>
    25c0:	e0654004 	rsb	r4, r5, r4
    25c4:	e1b04144 	asrs	r4, r4, #2
    25c8:	10855104 	addne	r5, r5, r4, lsl #2
    25cc:	0a000004 	beq	25e4 <__libc_fini_array+0x30>
    25d0:	e5353004 	ldr	r3, [r5, #-4]!
    25d4:	e1a0e00f 	mov	lr, pc
    25d8:	e12fff13 	bx	r3
    25dc:	e2544001 	subs	r4, r4, #1
    25e0:	1afffffa 	bne	25d0 <__libc_fini_array+0x1c>
    25e4:	eb00004c 	bl	271c <__libc_fini>
    25e8:	e8bd4038 	pop	{r3, r4, r5, lr}
    25ec:	e12fff1e 	bx	lr
    25f0:	00002734 	.word	0x00002734
    25f4:	00002738 	.word	0x00002738

000025f8 <__cs3_premain>:
    25f8:	e92d4008 	push	{r3, lr}
    25fc:	eb000017 	bl	2660 <__libc_init_array>
    2600:	e59f3030 	ldr	r3, [pc, #48]	; 2638 <__cs3_premain+0x40>
    2604:	e3530000 	cmp	r3, #0
    2608:	15930000 	ldrne	r0, [r3]
    260c:	01a00003 	moveq	r0, r3
    2610:	e59f3024 	ldr	r3, [pc, #36]	; 263c <__cs3_premain+0x44>
    2614:	e3530000 	cmp	r3, #0
    2618:	15931000 	ldrne	r1, [r3]
    261c:	01a01003 	moveq	r1, r3
    2620:	e3a02000 	mov	r2, #0
    2624:	ebfff730 	bl	2ec <main>
    2628:	e59f3010 	ldr	r3, [pc, #16]	; 2640 <__cs3_premain+0x48>
    262c:	e3530000 	cmp	r3, #0
    2630:	1bffff2d 	blne	22ec <exit>
    2634:	eafffffe 	b	2634 <__cs3_premain+0x3c>
	...
    2640:	000022ec 	.word	0x000022ec

00002644 <_exit>:
    2644:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    2648:	e3a00018 	mov	r0, #24
    264c:	e59f1004 	ldr	r1, [pc, #4]	; 2658 <_exit+0x14>
    2650:	ef123456 	svc	0x00123456
    2654:	eafffffe 	b	2654 <_exit+0x10>
    2658:	00020026 	.word	0x00020026

0000265c <__cs3_isr_interrupt>:
    265c:	eafffffe 	b	265c <__cs3_isr_interrupt>

00002660 <__libc_init_array>:
    2660:	e92d4070 	push	{r4, r5, r6, lr}
    2664:	e59f506c 	ldr	r5, [pc, #108]	; 26d8 <__libc_init_array+0x78>
    2668:	e59f606c 	ldr	r6, [pc, #108]	; 26dc <__libc_init_array+0x7c>
    266c:	e0656006 	rsb	r6, r5, r6
    2670:	e1b06146 	asrs	r6, r6, #2
    2674:	12455004 	subne	r5, r5, #4
    2678:	13a04000 	movne	r4, #0
    267c:	0a000005 	beq	2698 <__libc_init_array+0x38>
    2680:	e5b53004 	ldr	r3, [r5, #4]!
    2684:	e2844001 	add	r4, r4, #1
    2688:	e1a0e00f 	mov	lr, pc
    268c:	e12fff13 	bx	r3
    2690:	e1560004 	cmp	r6, r4
    2694:	1afffff9 	bne	2680 <__libc_init_array+0x20>
    2698:	e59f5040 	ldr	r5, [pc, #64]	; 26e0 <__libc_init_array+0x80>
    269c:	e59f6040 	ldr	r6, [pc, #64]	; 26e4 <__libc_init_array+0x84>
    26a0:	e0656006 	rsb	r6, r5, r6
    26a4:	eb000014 	bl	26fc <_init>
    26a8:	e1b06146 	asrs	r6, r6, #2
    26ac:	12455004 	subne	r5, r5, #4
    26b0:	13a04000 	movne	r4, #0
    26b4:	0a000005 	beq	26d0 <__libc_init_array+0x70>
    26b8:	e5b53004 	ldr	r3, [r5, #4]!
    26bc:	e2844001 	add	r4, r4, #1
    26c0:	e1a0e00f 	mov	lr, pc
    26c4:	e12fff13 	bx	r3
    26c8:	e1560004 	cmp	r6, r4
    26cc:	1afffff9 	bne	26b8 <__libc_init_array+0x58>
    26d0:	e8bd4070 	pop	{r4, r5, r6, lr}
    26d4:	e12fff1e 	bx	lr
    26d8:	00002714 	.word	0x00002714
    26dc:	00002714 	.word	0x00002714
    26e0:	00002714 	.word	0x00002714
    26e4:	0000271c 	.word	0x0000271c

Disassembly of section .rodata:

000026ec <_global_impure_ptr-0x8>:
    26ec:	000000c7 	.word	0x000000c7
    26f0:	000000c8 	.word	0x000000c8

000026f4 <_global_impure_ptr>:
    26f4:	00031560 00000043                       `...C...

000026fc <_init>:
    26fc:	e1a0c00d 	mov	r12, sp
    2700:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    2704:	e24cb004 	sub	r11, r12, #4
    2708:	e24bd028 	sub	sp, r11, #40	; 0x28
    270c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    2710:	e12fff1e 	bx	lr

00002714 <__init_array_start>:
    2714:	00002590 	.word	0x00002590

00002718 <__frame_dummy_init_array_entry>:
    2718:	00000208                                ....

0000271c <__libc_fini>:
    271c:	e1a0c00d 	mov	r12, sp
    2720:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    2724:	e24cb004 	sub	r11, r12, #4
    2728:	e24bd028 	sub	sp, r11, #40	; 0x28
    272c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    2730:	e12fff1e 	bx	lr

00002734 <__fini_array_start>:
    2734:	000001c4 	.word	0x000001c4

00002738 <__cs3_regions>:
	...
    2744:	00031990 	.word	0x00031990
    2748:	00000020 	.word	0x00000020

0000274c <__cs3_regions_end>:
    274c:	00000000 	.word	0x00000000
